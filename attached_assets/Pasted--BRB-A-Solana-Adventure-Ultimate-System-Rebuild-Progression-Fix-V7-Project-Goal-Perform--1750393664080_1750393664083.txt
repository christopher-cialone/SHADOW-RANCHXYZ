# BRB: A Solana Adventure - Ultimate System Rebuild & Progression Fix V7

**Project Goal:** Perform a definitive, comprehensive, and complete rebuild of the "BRB: A Solana Adventure" application. This prompt aims to permanently resolve ALL outstanding issues, including persistent lesson progression failures, HTML nesting warnings, layout overlaps, lack of data persistence (implementing Firestore), and fully integrate all planned visual enhancements and interactive elements (quizzes, video, custom components).

**Summary of CRITICAL Issues to Be Resolved DEFINITIVELY:**
1.  **Lesson Progression Blocked:** `client/src/data/lessons.ts` is incomplete, leading to progression loop after Lesson 2, Step 1.
2.  **HTML Warning:** `<a> cannot appear as a descendant of <a>` in `Header.tsx`.
3.  **Layout Overlaps:** Header in `LessonLayout.tsx`, missing fixed bottom navigation, floating footer.
4.  **Persistence:** Firestore not implemented in `server/storage.ts` and frontend hooks.
5.  **Missing Components:** `ChallengeReward.tsx`, `HintCharacter.tsx` files are absent.
6.  **`GameCanvas`:** Still uses raw Canvas2D, not PIXI.js.
7.  **Ethos Lessons:** Static, lack interactivity (quizzes, video) and dynamic presentation.
8.  **Console Output:** Basic, lacks dynamic styling and structured error display.

---

**Instructions for Replit Agent (Comprehensive & Definitive Rebuild):**

**CRITICAL INSTRUCTION:** For any file where a "Completely REPLACE" instruction is given, you MUST **delete all existing content** in that file before pasting the new code. This is paramount to fix the persistent issues.

**Phase 1: Core Data & Firebase Foundation (DEFINITIVE FILE REPLACEMENTS)**

1.  **Completely REPLACE `client/src/data/lessons.ts` Content:**
    * **File:** `client/src/data/lessons.ts`
    * **Action:** DELETE ALL EXISTING CONTENT. PASTE THE ENTIRE BLOCK BELOW.
    * **Implementation:**
        ```typescript
        // client/src/data/lessons.ts - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
        export interface LessonData {
            id: number;
            title: string;
            description: string;
            chapter: number;
            difficulty: 'beginner' | 'intermediate' | 'advanced';
            estimatedTime: number; // in minutes
            isPremium: boolean;
            content: {
                steps: LessonStep[];
            };
            codeTemplate?: string; // Optional: for general lesson, specific templates in steps
        }

        export interface LessonStep {
            id: number;
            title: string;
            challenge: string;
            expectedCodePattern?: { rust?: string; python?: string; }; // Made optional for narrative/quiz lessons
            successMessage: string;
            failureMessage: string;
            initialCodeTemplateKey: string; // Key from code-templates.ts
            visualEffectTrigger?: 'networkPing' | 'sparkle' | 'coinFall' | 'messageBoard' | 'transaction' | 'dataStream' | 'blueprint' | 'dystopianCity' | 'cypherpunkSymbol' | 'codeShield' | 'digitalGhost' | 'bankBreaking' | 'decentralizedNodes' | 'blockchainBlocks' | 'smartContractGears' | 'digitalMarketplace' | 'glowingPath'; // New visual triggers
            hintMessage?: string;
            isCodingChallenge: boolean; // Flag to indicate if this step requires coding
            quiz?: { // NEW: Optional quiz for narrative steps
                type: 'multiple-choice' | 'true-false' | 'text-input';
                question: string;
                options?: string[]; // For multiple-choice/true-false
                correctAnswer: string | boolean; // Text for text-input, boolean for true-false
            };
            videoUrl?: string; // NEW: Optional video URL for narrative steps
        }

        export const lessons: LessonData[] = [
            // --- NEW: Module 0: Prologue - The Digital Frontier's Code of Honor (Lesson ID 1) ---
            {
                id: 1,
                title: "Prologue: The Digital Frontier's Code of Honor",
                description: "Uncover the forgotten history of digital freedom.",
                chapter: 0,
                difficulty: 'beginner',
                estimatedTime: 20,
                isPremium: false,
                content: {
                    steps: [
                        {
                            id: 1,
                            title: "Echoes from the Old World",
                            challenge: `Before the blockchain sun rose over this digital frontier, the Old World suffered under the thumb of centralized powers. Data was spied on, money controlled, and freedom often felt like a myth whispered in hushed tones. But some dreamed of a new kind of freedom – built not with guns, but with **code**.\n\n**Reflection:** What aspects of the 'Old World' (digital or otherwise) make you value privacy and control over your own data?`,
                            successMessage: "Understood. The seeds of rebellion are often sown in the shadows of control. Click 'Next Step' to continue.",
                            failureMessage: "Please take a moment to reflect on the prompt. Click 'Deploy' to confirm understanding.",
                            initialCodeTemplateKey: 'ethos_lesson0_1',
                            visualEffectTrigger: 'dystopianCity',
                            hintMessage: "This step is about setting the stage. Read the narrative, think about the question, and click 'Deploy' when you're ready to proceed.",
                            isCodingChallenge: false,
                            quiz: {
                                type: 'text-input',
                                question: "Type 'Freedom' to confirm you're ready to learn about the digital frontier.",
                                correctAnswer: "Freedom",
                            },
                            videoUrl: "[https://www.youtube.com/embed/P-2R-5_Bf7k?autoplay=1&mute=1&controls=0&modestbranding=1&rel=0](https://www.youtube.com/embed/P-2R-5_Bf7k?autoplay=1&mute=1&controls=0&modestbranding=1&rel=0)" // Placeholder, replace with relevant video
                        },
                        {
                            id: 2,
                            title: "The Whispers of Rebellion - Rise of the Cypherpunks",
                            challenge: `In the shadows of early digital networks, a band of rebels emerged – the **Cypherpunks**. They weren't outlaws in the traditional sense, but digital freedom fighters who believed that cryptography, not legislation, was the key to true liberty. They met not in saloons, but in email lists, forging their manifestos in lines of encrypted text.\n\n**Reflection:** If code is a form of speech, and privacy is essential for free speech, how does strong encryption become a tool for freedom?`,
                            successMessage: "Confirmed. The digital whispers grew into a chorus. Click 'Next Step' to continue.",
                            failureMessage: "Please reflect on the concept of code and freedom. Click 'Deploy' to confirm understanding.",
                            initialCodeTemplateKey: 'ethos_lesson0_2',
                            visualEffectTrigger: 'cypherpunkSymbol',
                            hintMessage: "The Cypherpunks believed that privacy could only be guaranteed by mathematics, not by human promises. Think about how unbreakable math gives you control.",
                            isCodingChallenge: false,
                            quiz: {
                                type: 'multiple-choice',
                                question: "What was the primary tool Cypherpunks believed was key to liberty?",
                                options: ["Laws", "Debates", "Cryptography", "Speeches"],
                                correctAnswer: "Cryptography",
                            },
                        },
                    ]
                },
            },
            // --- NEW: Module 1: The Manifestos - Code is Law, Privacy is Power (Lesson ID 2) ---
            {
                id: 2,
                title: "The Manifestos: Code is Law, Privacy is Power",
                description: "Dive into the founding texts of the digital freedom movement.",
                chapter: 1,
                difficulty: 'beginner',
                estimatedTime: 25,
                isPremium: false,
                content: {
                    steps: [
                        {
                            id: 1,
                            title: "The Cypherpunk Manifesto: Code, Not Trust",
                            challenge: `Eric Hughes, a quiet frontier coder, penned the words that became our first law: 'Cypherpunks write code.' He argued that laws and regulations could never truly protect our freedom in the digital realm. Only **unbreakable code** could truly guarantee privacy and liberty. Our very first step in this adventure is to understand this fundamental truth.\n\n**Reflection:** Why do cypherpunks believe that code is a stronger guarantee of privacy than laws or policies?`,
                            successMessage: "Manifesto understood. Trust in code is the first principle. Click 'Next Step' to continue.",
                            failureMessage: "Consider the inherent limitations of human promises versus mathematical guarantees. Click 'Deploy' to confirm understanding.",
                            initialCodeTemplateKey: 'ethos_lesson1_1',
                            visualEffectTrigger: 'codeShield',
                            hintMessage: "Laws can be broken or changed by people. Code, if written correctly, executes exactly as intended, every time.",
                            isCodingChallenge: false,
                            quiz: {
                                type: 'true-false',
                                question: "True or False: Cypherpunks primarily relied on legislation to achieve privacy.",
                                correctAnswer: false,
                            },
                        },
                        {
                            id: 2,
                            title: "The Crypto Anarchist Manifesto: Unstoppable Liberty",
                            challenge: `Timothy C. May, a figure shrouded in digital mist, took the vision even further. His 'Crypto Anarchist Manifesto' painted a future where cryptography would dissolve the very power of the state, creating truly free and anonymous markets. This vision of an unstoppable, censorship-resistant digital realm is where the true heart of Web3 beats.\n\n**Reflection:** How does an 'anonymous, distributed digital cash system' fulfill the vision of a truly free and unstoppable market?`,
                            successMessage: "Vision embraced. A future without central gatekeepers. Click 'Next Step' to continue.",
                            failureMessage: "Think about how intermediaries can stop or control transactions. Click 'Deploy' to confirm understanding.",
                            initialCodeTemplateKey: 'ethos_lesson1_2',
                            visualEffectTrigger: 'digitalGhost',
                            hintMessage: "If no single person or company can control the money, then no one can stop you from using it. That's true freedom in action.",
                            isCodingChallenge: false,
                            quiz: {
                                type: 'text-input',
                                question: "What concept describes a market where transactions cannot be stopped by a central authority?",
                                correctAnswer: "Censorship Resistance",
                            },
                        },
                    ]
                },
            },
            // --- NEW: Module 2: The Genesis Block - Bitcoin's Cypherpunk Legacy (Lesson ID 3) ---
            {
                id: 3,
                title: "The Genesis Block: Bitcoin's Cypherpunk Legacy",
                description: "Explore how Bitcoin brought cypherpunk ideals to life.",
                chapter: 2,
                difficulty: 'beginner',
                estimatedTime: 30,
                isPremium: false,
                content: {
                    steps: [
                        {
                            id: 1,
                            title: "The Fiat Chains - Why Bitcoin Was Born",
                            challenge: `The old world's money, 'fiat currency,' was controlled by central banks and governments. It could be printed out of thin air, censored, or inflated away. This system felt like digital chains to those who valued financial freedom. The 2008 financial crisis exposed these flaws, and in the digital dust, a new idea was born.\n\n**Reflection:** How can a system where money supply is controlled by a single entity undermine individual freedom?`,
                            successMessage: "Chains identified. The need for a new path. Click 'Next Step' to continue.",
                            failureMessage: "Reflect on the power a centralized financial system holds over individuals. Click 'Deploy' to confirm understanding.",
                            initialCodeTemplateKey: 'ethos_lesson2_1',
                            visualEffectTrigger: 'bankBreaking',
                            hintMessage: "Think about inflation, censorship, and access to funds. What happens when someone else has ultimate control over your money?",
                            isCodingChallenge: false,
                            quiz: {
                                type: 'true-false',
                                question: "True or False: Fiat currency is backed by physical gold.",
                                correctAnswer: false,
                            },
                        },
                        {
                            id: 2,
                            title: "Bitcoin: A Peer-to-Peer Electronic Cash System",
                            challenge: `From the shadows, an anonymous figure, Satoshi Nakamoto, rode into the digital frontier with a revolutionary proposal: **Bitcoin**. It was the first true 'electronic cash' that didn't need a bank, a government, or any trusted middleman. It was a digital currency for the people, by the people, secured by pure cryptography.\n\n**Reflection:** How does eliminating the 'trusted third party' in financial transactions enhance privacy and decentralization?`,
                            successMessage: "Bitcoin's core principle absorbed. Trustless transactions for a new new age. Click 'Next Step' to continue.",
                            failureMessage: "Focus on the 'peer-to-peer' aspect. What does that remove from the equation? Click 'Deploy' to confirm understanding.",
                            initialCodeTemplateKey: 'ethos_lesson2_2',
                            visualEffectTrigger: 'decentralizedNodes',
                            hintMessage: "When you send money directly to someone else, without a bank in the middle, who can stop it? No one.",
                            isCodingChallenge: false,
                            quiz: {
                                type: 'multiple-choice',
                                question: "What does 'peer-to-peer' mean in the context of Bitcoin?",
                                options: ["Requires a central server", "Direct transactions between users", "Only for anonymous users", "Backed by government"],
                                correctAnswer: "Direct transactions between users",
                            },
                        },
                        {
                            id: 3,
                            title: "The Blockchain: A Public, Immutable Ledger",
                            challenge: `At the heart of Bitcoin was the **blockchain** – a revolutionary 'digital ledger' that recorded every transaction not in a bank's secret book, but openly and immutably across a vast network of computers. Once a transaction was carved into this digital stone, it couldn't be changed. This public, decentralized truth became the backbone of our new digital world.\n\n**Reflection:** How does a public and immutable ledger contribute to a more transparent and fair financial system, even if the users are pseudonymous?`,
                            successMessage: "Blockchain principles secured. The unchangeable truth. Click 'Next Step' to continue.",
                            failureMessage: "Consider what 'public' and 'immutable' mean for accountability. Click 'Deploy' to confirm understanding.",
                            initialCodeTemplateKey: 'ethos_lesson2_3',
                            visualEffectTrigger: 'blockchainBlocks',
                            hintMessage: "Even if you don't know *who* did something, you know *what* happened, and that it can't be covered up.",
                            isCodingChallenge: false,
                            quiz: {
                                type: 'text-input',
                                question: "What is the key characteristic of a blockchain that prevents past transactions from being altered?",
                                correctAnswer: "Immutability",
                            },
                        },
                    ]
                  },
                },
                // Lesson 4
                {
                  id: 4,
                  title: "The Crossroads: Web3's Path and Future",
                  description: "Understand the evolution of Web3 and re-align with core ideals.",
                  chapter: 3,
                  difficulty: 'beginner',
                  estimatedTime: 30,
                  isPremium: false,
                  content: {
                    steps: [
                      {
                        id: 1,
                        title: "Ethereum & Smart Contracts: Expanding the Vision",
                        challenge: `Bitcoin proved that decentralized money was possible. But soon, new pioneers arrived, pushing the frontier further. Ethereum, with its 'smart contracts,' allowed not just money, but **any kind of digital agreement** to be executed automatically and transparently on the blockchain. The digital Wild West just got a lot more sophisticated.\n\n**Reflection:** How do smart contracts enhance the idea of 'code is law' by making agreements self-enforcing without human intervention?`,
                        successMessage: "Smart Contracts understood. Code as unstoppable agreement. Click 'Next Step' to continue.",
                        failureMessage: "Think about what 'self-enforcing' means for trust and intermediaries. Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson3_1',
                        visualEffectTrigger: 'smartContractGears',
                        hintMessage: "If the rules are written in code, and that code runs automatically, you don't need a judge or lawyer to enforce it.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'multiple-choice',
                            question: "What do smart contracts allow to be executed directly on the blockchain?",
                            options: ["Legal documents", "Digital agreements", "Physical contracts", "Verbal promises"],
                            correctAnswer: "Digital agreements",
                        },
                      },
                      {
                        id: 2,
                        title: "The Rise of DeFi & NFTs: Promises and Perils",
                        challenge: `The frontier exploded with innovation: Decentralized Finance (DeFi) offered banks made of code, and Non-Fungible Tokens (NFTs) gave us true digital ownership of art, collectibles, and even virtual land. But with this rapid growth came new challenges – the lure of easy riches, scams lurking in the shadows, and the constant threat of centralization creeping back into the decentralized dream.\n\n**Reflection:** How can we, as builders and users, ensure that the growth of Web3 (like DeFi and NFTs) remains true to the original cypherpunk ideals of decentralization and individual control?`,
                        successMessage: "Perils recognized, vigilance heightened. The fight for true decentralization continues. Click 'Next Step' to continue.",
                        failureMessage: "Consider where power can accumulate in new systems. How can we prevent that? Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson3_2',
                        visualEffectTrigger: 'digitalMarketplace',
                        hintMessage: "Even in Web3, some services become very popular and centralize power. We need to actively choose decentralized alternatives and build them robustly.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'text-input',
                            question: "What is the primary risk to decentralization as Web3 grows?",
                            correctAnswer: "Centralization",
                        },
                      },
                      {
                        id: 3,
                        title: "The Path Forward: Realigning with the Ethos",
                        challenge: `The digital frontier is vast and ever-changing. As new builders like you join the ranks, it's crucial to remember the code of honor established by the original cypherpunks. To truly build a decentralized future, we must constantly question centralization, champion privacy, and ensure that our innovations serve liberty, not control. Your journey is not just about writing code; it's about building a better digital world.\n\n**Reflection:** As a future Solana developer, how will you incorporate the principles of privacy, decentralization, and censorship resistance into the applications you build?`,
                        successMessage: "Ethos embraced! Your journey as a builder aligned with the true spirit of Web3 begins now. Click 'Next' to move to your first coding challenge!",
                        failureMessage: "Reflect on your role in shaping the decentralized future. What principles will guide your work? Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson3_3',
                        visualEffectTrigger: 'glowingPath',
                        hintMessage: "Every piece of code you write, every decision you make, can either reinforce centralization or push towards more freedom and privacy.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'multiple-choice',
                            question: "Which of these is NOT a core cypherpunk principle?",
                            options: ["Privacy", "Decentralization", "Censorship Resistance", "Centralized Control"],
                            correctAnswer: "Centralized Control",
                        },
                      },
                    ]
                  },
                },
            // --- ORIGINAL Solana Lessons (IDs SHIFTED and chapter updated) ---
            {
                id: 5, // Original Lesson 1 (Solana Basics & Wallet Setup)
                title: "Solana Basics & Wallet Setup",
                description: "Learn the fundamentals of Solana and set up your Web3 wallet",
                chapter: 4, // Chapter adjusted
                difficulty: 'beginner',
                estimatedTime: 30,
                isPremium: false,
                content: {
                    steps: [
                        {
                            id: 1,
                            title: "Ping the Blockchain: Your First Transmission",
                            challenge: `Welcome, new recruit! Your mission begins now. This isn't just a game; it's a training simulation in the digital frontier. Your first task is to establish a connection with the Solana Devnet – think of it as sending a tiny digital "ping" to see if the network is alive and responding.

                            Below, you'll see your **Code Terminal**, a powerful tool for writing Solana programs. It starts with some basic program structure. Don't worry about understanding all of it yet! We'll guide you.

                            **Your Task:**
                            1.  Find the special area in your **Code Terminal** marked with comments like \`// Your code goes here\` or \`# Your code goes here\`.
                            2.  Type the following command into that area: \`get_network_status()\`
                            3.  Click the **"Deploy"** button to send your command.

                            Watch the "Console Output" below your code for a response! This is how your program communicates with the Solana network.`,
                            expectedCodePattern: { rust: 'get_network_status\\(\\)', python: 'get_network_status\\(\\)' },
                            successMessage: "Transmission received! Network Status: Connected! Ping: {ping}ms | Current Slot: {slot}. You've made your first connection!",
                            failureMessage: "Transmission failed. The `get_network_status()` command was not found or is misspelled. Please ensure you typed it exactly as shown in the designated area. Double-check for typos!",
                            initialCodeTemplateKey: 'default',
                            visualEffectTrigger: 'networkPing',
                            hintMessage: "Hey there! To complete this first step, type `get_network_status()` exactly as you see it into the designated section of your Code Terminal. Then, click the 'Deploy' button. This function call is like pressing a big red button to check the network!",
                            isCodingChallenge: true, // Mark as coding challenge
                        },
                    ]
                },
            },
            {
                id: 6, // Original Lesson 2
                title: "Creating Your Ranch Account",
                description: "Build your first Solana program to manage ranch data",
                chapter: 5, // Chapter adjusted
                difficulty: 'beginner',
                estimatedTime: 45,
                isPremium: false,
                content: {
                    steps: [
                        {
                            id: 1,
                            title: "Define Ranch Owner Field",
                            challenge: "Your ranch needs an owner! In the `Ranch` struct (Rust) or `Ranch` class (Python), add a `pubkey` field named `owner`. This will identify who controls the ranch. Don't forget the comma for Rust!",
                            expectedCodePattern: { rust: 'pub\\s+owner:\\s*Pubkey,', python: 'owner:\\s*Pubkey' },
                            successMessage: "Excellent! The `owner` field has been added. Your ranch now knows who its rightful owner is!",
                            failureMessage: "Not quite. Make sure you've added 'pub owner: Pubkey,' (Rust) or 'owner: Pubkey' (Python) exactly inside the Ranch definition. Check for typos and correct capitalization!",
                            initialCodeTemplateKey: 'ranch_management_initial',
                            visualEffectTrigger: 'blueprint',
                            hintMessage: "Think about Rust structs or Python classes. You need to add a line that declares a public key variable named 'owner' within your 'Ranch' data structure.",
                            isCodingChallenge: true,
                        },
                        {
                            id: 2,
                            title: "Initialize Owner in `initialize_ranch`",
                            challenge: "Now, inside the `initialize_ranch` function, assign the `owner` field of your `ranch` account to the `ctx.accounts.owner.key()` (Rust) or `owner.key()` (Python). Remember `ranch.owner = ctx.accounts.owner.key();` or `ranch.owner = owner.key()`.",
                            expectedCodePattern: { rust: 'ranch\\.owner\\s*=\\s*ctx\\.accounts\\.owner\\.key\\(\\);', python: 'ranch\\.owner\\s*=\\s*owner\\.key\\(\\)' },
                            successMessage: "Owner successfully initialized! Your ranch deed is now registered to you!",
                            failureMessage: "The owner assignment is incorrect. Double-check the syntax for assigning the owner's key to the ranch account. Hint: Look at the `ctx.accounts.owner` context in Rust or `owner` parameter in Python.",
                            initialCodeTemplateKey: 'ranch_management_step1_complete',
                            visualEffectTrigger: 'sparkle',
                            hintMessage: "You need to set the 'owner' field of your 'ranch' variable to the public key of the user who's calling this program. In Rust, you'll use `ctx.accounts.owner.key()`; in Python, `owner.key()`.",
                            isCodingChallenge: true,
                        },
                        {
                            id: 3,
                            title: "Programmatic Ownership: Securing Your Ranch with a Program Derived Address (PDA)",
                            challenge: `Welcome, digital homesteader! In this decentralized frontier, we value true ownership and privacy. Unlike the old world where deeds were on paper in a dusty office, here, your ranch deed can be controlled by pure code! This is the essence of **cypher-punk** – using cryptography and decentralized tech to protect privacy and freedom.
                            Today, we're diving into **Program Derived Addresses (PDAs)**. Imagine your ranch deed isn't owned by a specific wallet with a private key, but by a special, unhackable 'strongbox' that *only your ranch program can open*. This strongbox address is *derived* from your program's ID and some unique 'seeds' (like a secret password) and a 'bump' (a special number to make sure it's valid). This makes your ranch truly **decentralized** and secure, giving control to the smart contract itself, not a person's key.

                            **Your Task:**
                            1.  In the \`InitializeRanch\` struct (Rust) or function definition (Python), locate the \`#[account(...)]\` attribute for your \`ranch\` account.
                            2.  **Add a \`seeds\` argument** to this attribute. For the ranch, the seeds will be the byte literal \`b"ranch"\` and the owner's public key (\`owner.key().as_ref()\` in Rust, \`owner\` in Python).
                            3.  **Add a \`bump\` argument** to this attribute. This is a special nonce that ensures the PDA is valid.`,
                            expectedCodePattern: {
                                rust: 'seeds\\s*=\\s*\\[b"ranch",\\s*owner\\.key\\(\\)\\.as_ref\\(\\)\\]\\s*,\\s*bump',
                                python: 'seeds=\\[\'ranch\',\\s*owner\\]\\s*,\\s*bump'
                            },
                            successMessage: "Fantastic! Your ranch account is now a true Program Derived Address (PDA)! Its deed is safely locked away, controlled by your program, not a private key. You've embraced programmatic ownership!",
                            failureMessage: "Not quite. Double-check your PDA syntax. Did you add `seeds` and `bump` correctly within the `#[account(...)]` attribute (Rust) or `init` arguments (Python)? Remember the exact values for the seeds (`b\"ranch\"` and the owner's key) and that `bump` is also required!",
                            initialCodeTemplateKey: 'ranch_management_step2_complete',
                            visualEffectTrigger: 'dataStream',
                            hintMessage: `Okay, digital prospector! Think of PDAs like a magic lockbox only your program can open. You need to tell Solana:
                            1.  What 'words' (seeds) make this lockbox unique (e.g., the word "ranch" and the owner's special key).
                            2.  A special number (the 'bump') that makes sure the lockbox address is perfect and unhackable.
                            Look at the \`#[account(...)]\` line for the \`ranch\` in Rust, or the \`.init()\` call in Python, and add the \`seeds\` and \`bump\` keywords!`,
                            isCodingChallenge: true,
                        },
                    ]
                },
            },
            {
                id: 7, // Original Lesson 3
                title: "Minting Character NFTs",
                description: "Create unique cowboy and outlaw NFTs with custom traits",
                chapter: 6, // Chapter adjusted
                difficulty: 'intermediate',
                estimatedTime: 60,
                isPremium: false,
                content: {
                    steps: [
                        { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
                    ]
                }
            },
            {
                id: 8, // Original Lesson 4
                title: "RanchCoin Token Creation",
                description: "Deploy your own SPL token for in-game economy",
                chapter: 7, // Chapter adjusted
                difficulty: 'intermediate',
                estimatedTime: 50,
                isPremium: true,
                content: {
                    steps: [
                        { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
                    ]
                }
            },
            {
                id: 9, // Original Lesson 5
                title: "Saloon Dueling System",
                description: "Program interactive duels and betting mechanics",
                chapter: 8, // Chapter adjusted
                difficulty: 'advanced',
                estimatedTime: 75,
                isPremium: true,
                content: {
                    steps: [
                        { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
                    ]
                }
            },
            {
                id: 10, // Original Lesson 6
                title: "Security & Ranch Defense",
                description: "Implement security measures against shadow beasts",
                chapter: 9, // Chapter adjusted
                difficulty: 'advanced',
                estimatedTime: 90,
                isPremium: true,
                content: {
                    steps: [
                        { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
                    ]
                }
            },
            {
                id: 11, // Original Lesson 7
                title: "Ether Range Expeditions",
                description: "Master cross-program invocations and external integrations",
                chapter: 10, // Chapter adjusted
                difficulty: 'advanced',
                estimatedTime: 120,
                isPremium: true,
                content: {
                    steps: [
                        { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
                    ]
                }
            }
        ];
        ```

2.  **Completely REPLACE `client/src/data/code-templates.ts` Content:**
    * **File:** `client/src/data/code-templates.ts`
    * **Action:** DELETE ALL EXISTING CONTENT. PASTE THE ENTIRE BLOCK BELOW.
    * **Implementation:**
        ```typescript
        // client/src/data/code-templates.ts - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
        export const rustTemplates = {
          default: `use anchor_lang::prelude::*;\n\ndeclare_id!("YourProgramID");\n\n#[program]\npub mod my_program {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {\n        // --- Your code goes here! ---\n        // Type: get_network_status()\n        // Example: msg!("Hello World!");\n        // -----------------------------\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(mut)]\n    pub payer: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n`,
          // Ethos Lesson Templates (Non-coding)
          // For narrative/quiz steps, the code editor will be read-only, but these templates provide
          // a visual "code-like" background that hints at the topic.
          ethos_lesson0_1: `// Code for freedom, not control.\n// Welcome to the digital frontier.\n\n/*\nHistory shows that control leads to oppression.\nOur fight is for a decentralized future.\n*/\n`,
          ethos_lesson0_2: `// Privacy is power.\n// Cryptography is the shield.\n\n/*\nCypherpunks write code.\nWe are going to write it.\n*/\n`,
          ethos_lesson1_1: `// A Cypherpunk's Manifesto\n// by Eric Hughes\n\n/*\nPrivacy is necessary for an open society in the electronic age.\n... We cannot expect governments, corporations... to grant us privacy.\n*/\n`,
          ethos_lesson1_2: `// The Crypto Anarchist Manifesto\n// by Timothy C. May\n\n/*\nFully anonymous, untraceable transactions.\nStrong cryptography will forever alter the nature of governments.\n*/\n`,
          ethos_lesson2_1: `// The Fiat Chains\n// 2008: A crisis of centralization.\n\n/*\nMoney supply controlled by a few.\nCensorship, inflation, and lack of true ownership.\n*/\n`,
          ethos_lesson2_2: `// Bitcoin Whitepaper (Excerpt)\n// A Peer-to-Peer Electronic Cash System\n\n/*\n"A purely peer-to-peer version of electronic cash would allow online payments\nto be sent directly from one party to another without going through a financial institution."\n*/\n`,
          ethos_lesson2_3: `// The Blockchain\n// Immutability and Transparency.\n\n/*\n"The network timestamps transactions by hashing them into an ongoing chain of hash-based\nproof-of-work, forming a record that cannot be changed without redoing the proof-of-work."\n*/\n`,
          ethos_lesson3_1: `// Ethereum & Smart Contracts\n// Code is law, self-enforcing.\n\n/*\n"A smart contract is a computer protocol intended to digitally facilitate, verify,\nor enforce the negotiation or performance of a contract."\n*/\n`,
          ethos_lesson3_2: `// DeFi & NFTs: Promises and Perils\n// Innovation vs. Centralization's creeping threat.\n\n/*\nDecentralized Finance aims to recreate traditional financial systems without intermediaries.\nNFTs provide unique digital ownership.\n*/\n`,
          ethos_lesson3_3: `// The Path Forward\n// Realigning with the Ethos.\n\n/*\nQuestion centralization.\nChampion privacy.\nBuild for liberty.\n*/\n`,

          // Solana Programming Templates (Adjusted L#)
          ranch_management_initial: `use anchor_lang::prelude::*;

declare_id!("RanchManager111111111111111111111111111111");

#[program]
pub mod ranch_manager {
    use super::*;

    pub fn initialize_ranch(
        ctx: Context<InitializeRanch>,
        ranch_name: String,
    ) -> Result<()> {
        let ranch = &mut ctx.accounts.ranch;
        // TODO: Assign owner field here in a later step (L6S2)
        ranch.name = ranch_name;
        ranch.level = 1;
        ranch.experience = 0;
        ranch.ranch_coin_balance = 500;
        ranch.building_count = 0;
        ranch.character_count = 0;
        ranch.created_at = Clock::get()?.unix_timestamp;

        msg!("Ranch '{}' initialized for owner {}", ranch.name, ranch.owner);
        Ok(())
    }
}

#[derive(Accounts)]
#[instruction(ranch_name: String)]
pub struct InitializeRanch<'info> {
    #[account(
        init,
        payer = owner,
        space = 8 + Ranch::INIT_SPACE,
        // USER ADDS SEEDS AND BUMP HERE IN L6S3
        // seeds = [b"ranch", owner.key().as_ref()],
        // bump
    )]
    pub ranch: Account<'info, Ranch>,

    #[account(mut)]
    pub owner: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[account]
pub struct Ranch {
    // USER ADDS PUB OWNER: PUBKEY, HERE IN L6S1
    pub ranch_coin_balance: u64, // 8
    pub building_count: u8,     // 1
    pub character_count: u8,    // 1
    pub created_at: i64,        // 8
    pub name: String,           // 4 + 32
    pub level: u8,              // 1
    pub experience: u64,        // 8
}

impl Ranch {
    const INIT_SPACE: usize = 8 + 1 + 1 + 8 + 4 + 32 + 1 + 8; // Adjust space as fields are added
}

#[error_code]
pub enum ErrorCode {
    #[msg("Unauthorized access to ranch")]
    UnauthorizedAccess,
}
`,
          ranch_management_step1_complete: `use anchor_lang::prelude::*;

declare_id!("RanchManager111111111111111111111111111111");

#[program]
pub mod ranch_manager {
    use super::*;

    pub fn initialize_ranch(
        ctx: Context<InitializeRanch>,
        ranch_name: String,
    ) -> Result<()> {
        let ranch = &mut ctx.accounts.ranch;
        ranch.owner = ctx.accounts.owner.key(); // This line is added in L6S2
        ranch.name = ranch_name;
        ranch.level = 1;
        ranch.experience = 0;
        ranch.ranch_coin_balance = 500;
        ranch.building_count = 0;
        ranch.character_count = 0;
        ranch.created_at = Clock::get()?.unix_timestamp;

        msg!("Ranch '{}' initialized for owner {}", ranch.name, ranch.owner);
        Ok(())
    }
}

#[derive(Accounts)]
#[instruction(ranch_name: String)]
pub struct InitializeRanch<'info> {
    #[account(
        init,
        payer = owner,
        space = 8 + 32 + 4 + 32 + 1 + 8 + 8 + 1 + 1 + 8, // Adjusted space for 'owner: Pubkey'
        // USER ADDS SEEDS AND BUMP HERE IN L6S3
        // seeds = [b"ranch", owner.key().as_ref()],
        // bump
    )]
    pub ranch: Account<'info, Ranch>,

    #[account(mut)]
    pub owner: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[account]
pub struct Ranch {
    pub owner: Pubkey, // This line is added in L6S1
    pub ranch_coin_balance: u64,
    pub building_count: u8,
    pub character_count: u8,
    pub created_at: i64,
    pub name: String,
    pub level: u8,
    pub experience: u64,
}

impl Ranch {
    const INIT_SPACE: usize = 32 + 4 + 32 + 1 + 8 + 8 + 1 + 1 + 8; // Updated for Pubkey (32 bytes)
}

#[error_code]
pub enum ErrorCode {
    #[msg("Unauthorized access to ranch")]
    UnauthorizedAccess,
}
`,
        };

        export const pythonTemplates = {
          default: `import seahorse.prelude.*

declare_id('YourProgramID')

@instruction
def initialize(payer: Signer):
    """Initialize a new program"""
    # --- Your code goes here! ---
    # Example: print("Hello World!")
    # ----------------------------
    pass # Keep this line unless you replace it with actual code
`,
          // Ethos Lesson Templates (Non-coding)
          ethos_lesson0_1: `# Code for freedom, not control.\n# Welcome to the digital frontier.\n\n# History shows that control leads to oppression.\n# Our fight is for a decentralized future.\n`,
          ethos_lesson0_2: `# Privacy is power.\n# Cryptography is the shield.\n\n# Cypherpunks write code.\n# We are going to write it.\n`,
          ethos_lesson1_1: `# A Cypherpunk's Manifesto\n# by Eric Hughes\n\n# Privacy is necessary for an open society in the electronic age.\n# We cannot expect governments, corporations... to grant us privacy.\n`,
          ethos_lesson1_2: `# The Crypto Anarchist Manifesto\n# by Timothy C. May\n\n# Fully anonymous, untraceable transactions.\n# Strong cryptography will forever alter the nature of governments.\n`,
          ethos_lesson2_1: `# The Fiat Chains\n# 2008: A crisis of centralization.\n\n# Money supply controlled by a few.\n# Censorship, inflation, and lack of true ownership.\n`,
          ethos_lesson2_2: `# Bitcoin Whitepaper (Excerpt)\n# A Peer-to-Peer Electronic Cash System\n\n# "A purely peer-to-peer version of electronic cash would allow online payments\n# to be sent directly from one party to another without going through a financial institution."\n`,
          ethos_lesson2_3: `# The Blockchain\n# Immutability and Transparency.\n\n# "The network timestamps transactions by hashing them into an ongoing chain of hash-based\n# proof-of-work, forming a record that cannot be changed without redoing the proof-of-work."\n`,
          ethos_lesson3_1: `# Ethereum & Smart Contracts\n# Code is law, self-enforcing.\n\n# "A smart contract is a computer protocol intended to digitally facilitate, verify,\n# or enforce the negotiation or performance of a contract."\n`,
          ethos_lesson3_2: `# DeFi & NFTs: Promises and Perils\n# Innovation vs. Centralization's creeping threat.\n\n# Decentralized Finance aims to recreate traditional financial systems without intermediaries.\n# NFTs provide unique digital ownership.\n`,
          ethos_lesson3_3: `# The Path Forward\n# Realigning with the Ethos.\n\n# Question centralization.\n# Champion privacy.\n# Build for liberty.\n`,

          // Solana Programming Templates
          ranch_management_initial: `import seahorse.prelude.*

declare_id('RanchManager111111111111111111111111111111')

class Ranch(Account):
    # USER ADDS OWNER: PUBKEY HERE IN L6S1
    ranch_coin_balance: u64
    building_count: u8
    character_count: u8
    created_at: i64
    name: str
    level: u8
    experience: u64

@instruction
def initialize_ranch(
    ranch: Empty[Ranch],
    owner: Signer,
    ranch_name: str
):
    """Initialize a new ranch"""
    ranch = ranch.init(
        payer=owner,
        space=8 + 32 + 32 + 1 + 8 + 8 + 1 + 1 + 8, // Adjust space
        # USER ADDS SEEDS AND BUMP HERE IN L6S3
        # seeds=['ranch', owner],
        # bump
    )

    # TODO: Assign owner field here in a later step (L6S2)
    ranch.name = ranch_name
    ranch.level = 1
    ranch.experience = 0
    ranch.ranch_coin_balance = 500
    ranch.building_count = 0
    ranch.character_count = 0
    ranch.created_at = Clock.unix_timestamp()

    print(f"Ranch '{ranch_name}' initialized for owner {owner.key()}")
`,
          ranch_management_step1_complete: `import seahorse.prelude.*

declare_id('RanchManager111111111111111111111111111111')

class Ranch(Account):
    owner: Pubkey # This line is added in L6S1
    ranch_coin_balance: u64
    building_count: u8
    character_count: u8
    created_at: i64
    name: str
    level: u8
    experience: u64

@instruction
def initialize_ranch(
    ranch: Empty[Ranch],
    owner: Signer,
    ranch_name: str
):
    """Initialize a new ranch"""
    ranch = ranch.init(
        payer=owner,
        space=8 + 32 + 32 + 1 + 8 + 8 + 1 + 1 + 8, // Adjusted space
        # USER ADDS SEEDS AND BUMP HERE IN L6S3
        # seeds=['ranch', owner],
        # bump
    )

    ranch.owner = owner.key() // This line is added in L6S2
    ranch.name = ranch_name
    ranch.level = 1
    ranch.experience = 0
    ranch.ranch_coin_balance = 500
    ranch.building_count = 0
    ranch.character_count = 0
    ranch.created_at = Clock.unix_timestamp()

    print(f"Ranch '{ranch_name}' initialized for owner {owner.key()}")
`,
        };
        ```

3.  **Create `client/public/assets/images/scientist-character.png`:**
    * **Action:** **YOU MUST MANUALLY UPLOAD** your AI Assistant image (the running scientist with purple hair) to `client/public/assets/images/` and name it `scientist-character.png`. This prompt cannot perform file uploads.

4.  **Create `client/public/assets/images/brb-nft-ai-robot.png`:**
    * **Action:** **YOU MUST MANUALLY UPLOAD** your reward NFT image (the robot with coffee mug) to `client/public/assets/images/` and name it `brb-nft-ai-robot.png`. This prompt cannot perform file uploads.

5.  **Completely REPLACE `client/src/firebase-init.ts` Content:**
    * **File:** `client/src/firebase-init.ts`
    * **Action:** DELETE ALL EXISTING CONTENT. PASTE THE ENTIRE BLOCK BELOW.
    * **Implementation:**
        ```typescript
        // client/src/firebase-init.ts - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
        import { initializeApp } from 'firebase/app';
        import { getAuth } from 'firebase/auth';
        import { getFirestore } from 'firebase/firestore';

        declare const __app_id: string;
        declare const __firebase_config: string;
        declare const __initial_auth_token: string;

        let firebaseConfigParsed = {};
        try {
          if (typeof __firebase_config !== 'undefined' && __firebase_config) {
            firebaseConfigParsed = JSON.parse(__firebase_config);
          } else {
            console.warn("__firebase_config not found. Using default empty config. Firebase features might not work.");
          }
        } catch (e) {
          console.error("Failed to parse __firebase_config:", e);
          firebaseConfigParsed = {};
        }

        export const app = initializeApp(firebaseConfigParsed);
        export const auth = getAuth(app);
        export const db = getFirestore(app);
        export const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        export const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : '';
        ```

6.  **Completely REPLACE `server/storage.ts` Content:**
    * **File:** `server/storage.ts`
    * **Action:** DELETE ALL EXISTING CONTENT. PASTE THE ENTIRE BLOCK BELOW.
    * **Implementation:**
        ```typescript
        // server/storage.ts - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
        import {
          users, ranches, lessons, userProgress, characters, buildings, rewardNfts,
          type User, type InsertUser, type Ranch, type InsertRanch, type Lesson,
          type UserProgress, type InsertUserProgress, type Character, type InsertCharacter,
          type Building, type InsertBuilding, type RewardNft, type InsertRewardNft
        } from "@shared/schema";
        import { getFirestore, doc, getDoc, setDoc, addDoc, updateDoc, deleteDoc, collection, query, where, getDocs } from "firebase/firestore";
        import { initializeApp } from "firebase/app";

        declare const __app_id: string;
        declare const __firebase_config: string;

        let firebaseAppInstance: any;
        let firestoreDbInstance: any;

        try {
          const config = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
          if (Object.keys(config).length > 0) {
            firebaseAppInstance = initializeApp(config, "server-side-app");
            firestoreDbInstance = getFirestore(firebaseAppInstance);
          } else {
            console.warn("Firebase config not found or empty on server. Firestore storage will be mocked or non-functional.");
          }
        } catch (e) {
          console.error("Failed to parse __firebase_config on server:", e);
        }

        const ARTIFACTS_PATH = `artifacts/${typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'}`;

        export interface IStorage {
            getUser(id: string): Promise<User | undefined>;
            getUserByUsername(username: string): Promise<User | undefined>;
            getUserByWalletAddress(walletAddress: string): Promise<User | undefined>;
            createUser(user: InsertUser): Promise<User>;

            getRanch(id: string): Promise<Ranch | undefined>;
            getRanchByUserId(userId: string): Promise<Ranch | undefined>;
            createRanch(ranch: InsertRanch): Promise<Ranch>;
            updateRanch(userId: string, updates: Partial<Omit<Ranch, 'id' | 'ownerId' | 'createdAt'>>): Promise<Ranch>;

            getAllLessons(): Promise<Lesson[]>;
            getLessonById(id: number): Promise<Lesson | undefined>;
            createLesson(lesson: Omit<Lesson, 'id' | 'createdAt'>): Promise<Lesson>;

            getLessonProgress(id: string): Promise<UserProgress | undefined>;
            getLessonProgressByUserId(userId: string): Promise<UserProgress[]>;
            getLessonProgressByUserAndLesson(userId: string, lessonId: number): Promise<UserProgress | undefined>;
            createLessonProgress(progress: InsertUserProgress): Promise<UserProgress>;
            updateLessonProgress(id: string, updates: Partial<Omit<UserProgress, 'id' | 'userId' | 'lessonId' | 'createdAt'>>): Promise<UserProgress>;

            getCharacter(id: string): Promise<Character | undefined>;
            getCharactersByUserId(userId: string): Promise<Character[]>;
            createCharacter(character: InsertCharacter): Promise<Character>;
            updateCharacter(id: string, updates: Partial<Omit<Character, 'id' | 'ownerId' | 'createdAt'>>): Promise<Character>;

            getBuilding(id: string): Promise<Building | undefined>;
            getBuildingsByRanchId(ranchId: string): Promise<Building[]>;
            createBuilding(building: InsertBuilding): Promise<Building>;
            updateBuilding(id: string, updates: Partial<Omit<Building, 'id' | 'ranchId' | 'createdAt'>>): Promise<Building>;

            getRewardNftsByUserId(userId: string): Promise<RewardNft[]>;
            createRewardNft(insertReward: InsertRewardNft): Promise<RewardNft>;
        }

        export class FirestoreStorage implements IStorage {
          private db: any;

          constructor() {
            if (!firestoreDbInstance) {
              console.error("Firestore DB instance not available in FirestoreStorage constructor. Using dummy storage.");
              this.db = null; // Set to null if not initialized
            } else {
              this.db = firestoreDbInstance;
              this.initializeLessons(); // Ensure default lessons are in Firestore
            }
          }

          private getUserCollectionRef(userId: string, collectionName: string) {
            if (!this.db) throw new Error("Firestore DB not initialized.");
            return collection(this.db, `${ARTIFACTS_PATH}/users/${userId}/${collectionName}`);
          }

          private getPublicCollectionRef(collectionName: string) {
            if (!this.db) throw new Error("Firestore DB not initialized.");
            return collection(this.db, `${ARTIFACTS_PATH}/public/data/${collectionName}`);
          }

          private async initializeLessons() {
            if (!this.db) return;
            const lessonsRef = this.getPublicCollectionRef('lessons');
            const snapshot = await getDocs(lessonsRef);
            if (snapshot.empty) {
              // Lessons data structure needs to match the new client/src/data/lessons.ts
              // The 'id' property here is used to set the Firestore document ID.
              const defaultLessons: (Omit<Lesson, 'createdAt'> & { id: number })[] = [
                // Lesson 1
                {
                  id: 1,
                  title: "Prologue: The Digital Frontier's Code of Honor",
                  description: "Uncover the forgotten history of digital freedom.",
                  chapter: 0,
                  difficulty: 'beginner',
                  estimatedTime: 20,
                  isPremium: false,
                  content: {
                    steps: [
                      {
                        id: 1,
                        title: "Echoes from the Old World",
                        challenge: `Before the blockchain sun rose over this digital frontier, the Old World suffered under the thumb of centralized powers. Data was spied on, money controlled, and freedom often felt like a myth whispered in hushed tones. But some dreamed of a new kind of freedom – built not with guns, but with **code**.

                        **Reflection:** What aspects of the 'Old World' (digital or otherwise) make you value privacy and control over your own data?`,
                        successMessage: "Understood. The seeds of rebellion are often sown in the shadows of control. Click 'Next Step' to continue.",
                        failureMessage: "Please take a moment to reflect on the prompt. Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson0_1',
                        visualEffectTrigger: 'dystopianCity',
                        hintMessage: "This step is about setting the stage. Read the narrative, think about the question, and click 'Deploy' when you're ready to proceed.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'text-input',
                            question: "Type 'Freedom' to confirm you're ready to learn about the digital frontier.",
                            correctAnswer: "Freedom",
                        },
                        videoUrl: "[https://www.youtube.com/embed/P-2R-5_Bf7k?autoplay=1&mute=1&controls=0&modestbranding=1&rel=0](https://www.youtube.com/embed/P-2R-5_Bf7k?autoplay=1&mute=1&controls=0&modestbranding=1&rel=0)" // Placeholder, replace with relevant video
                      },
                      {
                        id: 2,
                        title: "The Whispers of Rebellion - Rise of the Cypherpunks",
                        challenge: `In the shadows of early digital networks, a band of rebels emerged – the **Cypherpunks**. They weren't outlaws in the traditional sense, but digital freedom fighters who believed that cryptography, not legislation, was the key to true liberty. They met not in saloons, but in email lists, forging their manifestos in lines of encrypted text.

                        **Reflection:** If code is a form of speech, and privacy is essential for free speech, how does strong encryption become a tool for freedom?`,
                        successMessage: "Confirmed. The digital whispers grew into a chorus. Click 'Next Step' to continue.",
                        failureMessage: "Please reflect on the concept of code and freedom. Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson0_2',
                        visualEffectTrigger: 'cypherpunkSymbol',
                        hintMessage: "The Cypherpunks believed that privacy could only be guaranteed by mathematics, not by human promises. Think about how unbreakable math gives you control.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'multiple-choice',
                            question: "What was the primary tool Cypherpunks believed was key to liberty?",
                            options: ["Laws", "Debates", "Cryptography", "Speeches"],
                            correctAnswer: "Cryptography",
                        },
                      },
                    ]
                  },
                },
                // Lesson 2
                {
                  id: 2,
                  title: "The Manifestos: Code is Law, Privacy is Power",
                  description: "Dive into the founding texts of the digital freedom movement.",
                  chapter: 1,
                  difficulty: 'beginner',
                  estimatedTime: 25,
                  isPremium: false,
                  content: {
                    steps: [
                      {
                        id: 1,
                        title: "The Cypherpunk Manifesto: Code, Not Trust",
                        challenge: `Eric Hughes, a quiet frontier coder, penned the words that became our first law: 'Cypherpunks write code.' He argued that laws and regulations could never truly protect our freedom in the digital realm. Only **unbreakable code** could truly guarantee privacy and liberty. Our very first step in this adventure is to understand this fundamental truth.

                        **Reflection:** Why do cypherpunks believe that code is a stronger guarantee of privacy than laws or policies?`,
                        successMessage: "Manifesto understood. Trust in code is the first principle. Click 'Next Step' to continue.",
                        failureMessage: "Consider the inherent limitations of human promises versus mathematical guarantees. Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson1_1',
                        visualEffectTrigger: 'codeShield',
                        hintMessage: "Laws can be broken or changed by people. Code, if written correctly, executes exactly as intended, every time.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'true-false',
                            question: "True or False: Cypherpunks primarily relied on legislation to achieve privacy.",
                            correctAnswer: false,
                        },
                      },
                      {
                        id: 2,
                        title: "The Crypto Anarchist Manifesto: Unstoppable Liberty",
                        challenge: `Timothy C. May, a figure shrouded in digital mist, took the vision even further. His 'Crypto Anarchist Manifesto' painted a future where cryptography would dissolve the very power of the state, creating truly free and anonymous markets. This vision of an unstoppable, censorship-resistant digital realm is where the true heart of Web3 beats.\n\n**Reflection:** How does an 'anonymous, distributed digital cash system' fulfill the vision of a truly free and unstoppable market?`,
                        successMessage: "Vision embraced. A future without central gatekeepers. Click 'Next Step' to continue.",
                        failureMessage: "Think about how intermediaries can stop or control transactions. Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson1_2',
                        visualEffectTrigger: 'digitalGhost',
                        hintMessage: "If no single person or company can control the money, then no one can stop you from using it. That's true freedom in action.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'text-input',
                            question: "What concept describes a market where transactions cannot be stopped by a central authority?",
                            correctAnswer: "Censorship Resistance",
                        },
                      },
                    ]
                  },
                },
                // Lesson 3
                {
                  id: 3,
                  title: "The Genesis Block: Bitcoin's Cypherpunk Legacy",
                  description: "Explore how Bitcoin brought cypherpunk ideals to life.",
                  chapter: 2,
                  difficulty: 'beginner',
                  estimatedTime: 30,
                  isPremium: false,
                  content: {
                    steps: [
                      {
                        id: 1,
                        title: "The Fiat Chains - Why Bitcoin Was Born",
                        challenge: `The old world's money, 'fiat currency,' was controlled by central banks and governments. It could be printed out of thin air, censored, or inflated away. This system felt like digital chains to those who valued financial freedom. The 2008 financial crisis exposed these flaws, and in the digital dust, a new idea was born.\n\n**Reflection:** How can a system where money supply is controlled by a single entity undermine individual freedom?`,
                        successMessage: "Chains identified. The need for a new path. Click 'Next Step' to continue.",
                        failureMessage: "Reflect on the power a centralized financial system holds over individuals. Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson2_1',
                        visualEffectTrigger: 'bankBreaking',
                        hintMessage: "Think about inflation, censorship, and access to funds. What happens when someone else has ultimate control over your money?",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'true-false',
                            question: "True or False: Fiat currency is backed by physical gold.",
                            correctAnswer: false,
                        },
                      },
                      {
                        id: 2,
                        title: "Bitcoin: A Peer-to-Peer Electronic Cash System",
                        challenge: `From the shadows, an anonymous figure, Satoshi Nakamoto, rode into the digital frontier with a revolutionary proposal: **Bitcoin**. It was the first true 'electronic cash' that didn't need a bank, a government, or any trusted middleman. It was a digital currency for the people, by the people, secured by pure cryptography.\n\n**Reflection:** How does eliminating the 'trusted third party' in financial transactions enhance privacy and decentralization?`,
                        successMessage: "Bitcoin's core principle absorbed. Trustless transactions for a new new age. Click 'Next Step' to continue.",
                        failureMessage: "Focus on the 'peer-to-peer' aspect. What does that remove from the equation? Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson2_2',
                        visualEffectTrigger: 'decentralizedNodes',
                        hintMessage: "When you send money directly to someone else, without a bank in the middle, who can stop it? No one.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'multiple-choice',
                            question: "What does 'peer-to-peer' mean in the context of Bitcoin?",
                            options: ["Requires a central server", "Direct transactions between users", "Only for anonymous users", "Backed by government"],
                            correctAnswer: "Direct transactions between users",
                        },
                      },
                      {
                        id: 3,
                        title: "The Blockchain: A Public, Immutable Ledger",
                        challenge: `At the heart of Bitcoin was the **blockchain** – a revolutionary 'digital ledger' that recorded every transaction not in a bank's secret book, but openly and immutably across a vast network of computers. Once a transaction was carved into this digital stone, it couldn't be changed. This public, decentralized truth became the backbone of our new digital world.\n\n**Reflection:** How does a public and immutable ledger contribute to a more transparent and fair financial system, even if the users are pseudonymous?`,
                        successMessage: "Blockchain principles secured. The unchangeable truth. Click 'Next Step' to continue.",
                        failureMessage: "Consider what 'public' and 'immutable' mean for accountability. Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson2_3',
                        visualEffectTrigger: 'blockchainBlocks',
                        hintMessage: "Even if you don't know *who* did something, you know *what* happened, and that it can't be covered up.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'text-input',
                            question: "What is the key characteristic of a blockchain that prevents past transactions from being altered?",
                            correctAnswer: "Immutability",
                        },
                      },
                    ]
                  },
                },
                // Lesson 4
                {
                  id: 4,
                  title: "The Crossroads: Web3's Path and Future",
                  description: "Understand the evolution of Web3 and re-align with core ideals.",
                  chapter: 3,
                  difficulty: 'beginner',
                  estimatedTime: 30,
                  isPremium: false,
                  content: {
                    steps: [
                      {
                        id: 1,
                        title: "Ethereum & Smart Contracts: Expanding the Vision",
                        challenge: `Bitcoin proved that decentralized money was possible. But soon, new pioneers arrived, pushing the frontier further. Ethereum, with its 'smart contracts,' allowed not just money, but **any kind of digital agreement** to be executed automatically and transparently on the blockchain. The digital Wild West just got a lot more sophisticated.\n\n**Reflection:** How do smart contracts enhance the idea of 'code is law' by making agreements self-enforcing without human intervention?`,
                        successMessage: "Smart Contracts understood. Code as unstoppable agreement. Click 'Next Step' to continue.",
                        failureMessage: "Think about what 'self-enforcing' means for trust and intermediaries. Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson3_1',
                        visualEffectTrigger: 'smartContractGears',
                        hintMessage: "If the rules are written in code, and that code runs automatically, you don't need a judge or lawyer to enforce it.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'multiple-choice',
                            question: "What do smart contracts allow to be executed directly on the blockchain?",
                            options: ["Legal documents", "Digital agreements", "Physical contracts", "Verbal promises"],
                            correctAnswer: "Digital agreements",
                        },
                      },
                      {
                        id: 2,
                        title: "The Rise of DeFi & NFTs: Promises and Perils",
                        challenge: `The frontier exploded with innovation: Decentralized Finance (DeFi) offered banks made of code, and Non-Fungible Tokens (NFTs) gave us true digital ownership of art, collectibles, and even virtual land. But with this rapid growth came new challenges – the lure of easy riches, scams lurking in the shadows, and the constant threat of centralization creeping back into the decentralized dream.\n\n**Reflection:** How can we, as builders and users, ensure that the growth of Web3 (like DeFi and NFTs) remains true to the original cypherpunk ideals of decentralization and individual control?`,
                        successMessage: "Perils recognized, vigilance heightened. The fight for true decentralization continues. Click 'Next Step' to continue.",
                        failureMessage: "Consider where power can accumulate in new systems. How can we prevent that? Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson3_2',
                        visualEffectTrigger: 'digitalMarketplace',
                        hintMessage: "Even in Web3, some services become very popular and centralize power. We need to actively choose decentralized alternatives and build them robustly.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'text-input',
                            question: "What is the primary risk to decentralization as Web3 grows?",
                            correctAnswer: "Centralization",
                        },
                      },
                      {
                        id: 3,
                        title: "The Path Forward: Realigning with the Ethos",
                        challenge: `The digital frontier is vast and ever-changing. As new builders like you join the ranks, it's crucial to remember the code of honor established by the original cypherpunks. To truly build a decentralized future, we must constantly question centralization, champion privacy, and ensure that our innovations serve liberty, not control. Your journey is not just about writing code; it's about building a better digital world.\n\n**Reflection:** As a future Solana developer, how will you incorporate the principles of privacy, decentralization, and censorship resistance into the applications you build?`,
                        successMessage: "Ethos embraced! Your journey as a builder aligned with the true spirit of Web3 begins now. Click 'Next' to move to your first coding challenge!",
                        failureMessage: "Reflect on your role in shaping the decentralized future. What principles will guide your work? Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson3_3',
                        visualEffectTrigger: 'glowingPath',
                        hintMessage: "Every piece of code you write, every decision you make, can either reinforce centralization or push towards more freedom and privacy.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'multiple-choice',
                            question: "Which of these is NOT a core cypherpunk principle?",
                            options: ["Privacy", "Decentralization", "Censorship Resistance", "Centralized Control"],
                            correctAnswer: "Centralized Control",
                        },
                      },
                    ]
                  },
                },
            // --- ORIGINAL Solana Lessons (IDs SHIFTED and chapter updated) ---
            {
                id: 5, // Original Lesson 1 (Solana Basics & Wallet Setup)
                title: "Solana Basics & Wallet Setup",
                description: "Learn the fundamentals of Solana and set up your Web3 wallet",
                chapter: 4, // Chapter adjusted
                difficulty: 'beginner',
                estimatedTime: 30,
                isPremium: false,
                content: {
                    steps: [
                        {
                            id: 1,
                            title: "Ping the Blockchain: Your First Transmission",
                            challenge: `Welcome, new recruit! Your mission begins now. This isn't just a game; it's a training simulation in the digital frontier. Your first task is to establish a connection with the Solana Devnet – think of it as sending a tiny digital "ping" to see if the network is alive and responding.

                            Below, you'll see your **Code Terminal**, a powerful tool for writing Solana programs. It starts with some basic program structure. Don't worry about understanding all of it yet! We'll guide you.

                            **Your Task:**
                            1.  Find the special area in your **Code Terminal** marked with comments like \`// Your code goes here\` or \`# Your code goes here\`.
                            2.  Type the following command into that area: \`get_network_status()\`
                            3.  Click the **"Deploy"** button to send your command.

                            Watch the "Console Output" below your code for a response! This is how your program communicates with the Solana network.`,
                            expectedCodePattern: { rust: 'get_network_status\\(\\)', python: 'get_network_status\\(\\)' },
                            successMessage: "Transmission received! Network Status: Connected! Ping: {ping}ms | Current Slot: {slot}. You've made your first connection!",
                            failureMessage: "Transmission failed. The `get_network_status()` command was not found or is misspelled. Please ensure you typed it exactly as shown in the designated area. Double-check for typos!",
                            initialCodeTemplateKey: 'default',
                            visualEffectTrigger: 'networkPing',
                            hintMessage: "Hey there! To complete this first step, type `get_network_status()` exactly as you see it into the designated section of your Code Terminal. Then, click the 'Deploy' button. This function call is like pressing a big red button to check the network!",
                            isCodingChallenge: true, // Mark as coding challenge
                        },
                    ]
                },
            },
            {
                id: 6, // Original Lesson 2
                title: "Creating Your Ranch Account",
                description: "Build your first Solana program to manage ranch data",
                chapter: 5, // Chapter adjusted
                difficulty: 'beginner',
                estimatedTime: 45,
                isPremium: false,
                content: {
                    steps: [
                        {
                            id: 1,
                            title: "Define Ranch Owner Field",
                            challenge: "Your ranch needs an owner! In the `Ranch` struct (Rust) or `Ranch` class (Python), add a `pubkey` field named `owner`. This will identify who controls the ranch. Don't forget the comma for Rust!",
                            expectedCodePattern: { rust: 'pub\\s+owner:\\s*Pubkey,', python: 'owner:\\s*Pubkey' },
                            successMessage: "Excellent! The `owner` field has been added. Your ranch now knows who its rightful owner is!",
                            failureMessage: "Not quite. Make sure you've added 'pub owner: Pubkey,' (Rust) or 'owner: Pubkey' (Python) exactly inside the Ranch definition. Check for typos and correct capitalization!",
                            initialCodeTemplateKey: 'ranch_management_initial',
                            visualEffectTrigger: 'blueprint',
                            hintMessage: "Think about Rust structs or Python classes. You need to add a line that declares a public key variable named 'owner' within your 'Ranch' data structure.",
                            isCodingChallenge: true,
                        },
                        {
                            id: 2,
                            title: "Initialize Owner in `initialize_ranch`",
                            challenge: "Now, inside the `initialize_ranch` function, assign the `owner` field of your `ranch` account to the `ctx.accounts.owner.key()` (Rust) or `owner.key()` (Python). Remember `ranch.owner = ctx.accounts.owner.key();` or `ranch.owner = owner.key()`.",
                            expectedCodePattern: { rust: 'ranch\\.owner\\s*=\\s*ctx\\.accounts\\.owner\\.key\\(\\);', python: 'ranch\\.owner\\s*=\\s*owner\\.key\\(\\)' },
                            successMessage: "Owner successfully initialized! Your ranch deed is now registered to you!",
                            failureMessage: "The owner assignment is incorrect. Double-check the syntax for assigning the owner's key to the ranch account. Hint: Look at the `ctx.accounts.owner` context in Rust or `owner` parameter in Python.",
                            initialCodeTemplateKey: 'ranch_management_step1_complete',
                            visualEffectTrigger: 'sparkle',
                            hintMessage: "You need to set the 'owner' field of your 'ranch' variable to the public key of the user who's calling this program. In Rust, you'll use `ctx.accounts.owner.key()`; in Python, `owner.key()`.",
                            isCodingChallenge: true,
                        },
                        {
                            id: 3,
                            title: "Programmatic Ownership: Securing Your Ranch with a Program Derived Address (PDA)",
                            challenge: `Welcome, digital homesteader! In this decentralized frontier, we value true ownership and privacy. Unlike the old world where deeds were on paper in a dusty office, here, your ranch deed can be controlled by pure code! This is the essence of **cypher-punk** – using cryptography and decentralized tech to protect privacy and freedom.
                            Today, we're diving into **Program Derived Addresses (PDAs)**. Imagine your ranch deed isn't owned by a specific wallet with a private key, but by a special, unhackable 'strongbox' that *only your ranch program can open*. This strongbox address is *derived* from your program's ID and some unique 'seeds' (like a secret password) and a 'bump' (a special number to make sure it's valid). This makes your ranch truly **decentralized** and secure, giving control to the smart contract itself, not a person's key.

                            **Your Task:**
                            1.  In the \`InitializeRanch\` struct (Rust) or function definition (Python), locate the \`#[account(...)]\` attribute for your \`ranch\` account.
                            2.  **Add a \`seeds\` argument** to this attribute. For the ranch, the seeds will be the byte literal \`b"ranch"\` and the owner's public key (\`owner.key().as_ref()\` in Rust, \`owner\` in Python).
                            3.  **Add a \`bump\` argument** to this attribute. This is a special nonce that ensures the PDA is valid.`,
                            expectedCodePattern: {
                                rust: 'seeds\\s*=\\s*\\[b"ranch",\\s*owner\\.key\\(\\)\\.as_ref\\(\\)\\]\\s*,\\s*bump',
                                python: 'seeds=\\[\'ranch\',\\s*owner\\]\\s*,\\s*bump'
                            },
                            successMessage: "Fantastic! Your ranch account is now a true Program Derived Address (PDA)! Its deed is safely locked away, controlled by your program, not a private key. You've embraced programmatic ownership!",
                            failureMessage: "Not quite. Double-check your PDA syntax. Did you add `seeds` and `bump` correctly within the `#[account(...)]` attribute (Rust) or `init` arguments (Python)? Remember the exact values for the seeds (`b\"ranch\"` and the owner's key) and that `bump` is also required!",
                            initialCodeTemplateKey: 'ranch_management_step2_complete',
                            visualEffectTrigger: 'dataStream',
                            hintMessage: `Okay, digital prospector! Think of PDAs like a magic lockbox only your program can open. You need to tell Solana:
                            1.  What 'words' (seeds) make this lockbox unique (e.g., the word "ranch" and the owner's special key).
                            2.  A special number (the 'bump') that makes sure the lockbox address is perfect and unhackable.
                            Look at the \`#[account(...)]\` line for the \`ranch\` in Rust, or the \`.init()\` call in Python, and add the \`seeds\` and \`bump\` keywords!`,
                            isCodingChallenge: true,
                        },
                    ]
                },
            },
            {
                id: 7, // Original Lesson 3
                title: "Minting Character NFTs",
                description: "Create unique cowboy and outlaw NFTs with custom traits",
                chapter: 6, // Chapter adjusted
                difficulty: 'intermediate',
                estimatedTime: 60,
                isPremium: false,
                content: {
                    steps: [
                        { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
                    ]
                }
            },
            {
                id: 8, // Original Lesson 4
                title: "RanchCoin Token Creation",
                description: "Deploy your own SPL token for in-game economy",
                chapter: 7, // Chapter adjusted
                difficulty: 'intermediate',
                estimatedTime: 50,
                isPremium: true,
                content: {
                    steps: [
                        { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
                    ]
                }
            },
            {
                id: 9, // Original Lesson 5
                title: "Saloon Dueling System",
                description: "Program interactive duels and betting mechanics",
                chapter: 8, // Chapter adjusted
                difficulty: 'advanced',
                estimatedTime: 75,
                isPremium: true,
                content: {
                    steps: [
                        { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
                    ]
                }
            },
            {
                id: 10, // Original Lesson 6
                title: "Security & Ranch Defense",
                description: "Implement security measures against shadow beasts",
                chapter: 9, // Chapter adjusted
                difficulty: 'advanced',
                estimatedTime: 90,
                isPremium: true,
                content: {
                    steps: [
                        { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
                    ]
                }
            },
            {
                id: 11, // Original Lesson 7
                title: "Ether Range Expeditions",
                description: "Master cross-program invocations and external integrations",
                chapter: 10, // Chapter adjusted
                difficulty: 'advanced',
                estimatedTime: 120,
                isPremium: true,
                content: {
                    steps: [
                        { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
                    ]
                }
            }
        ];
        ```

2.  **Completely REPLACE `client/src/data/code-templates.ts` Content:**
    * **File:** `client/src/data/code-templates.ts`
    * **Action:** DELETE ALL EXISTING CONTENT. PASTE THE ENTIRE BLOCK BELOW.
    * **Implementation:**
        ```typescript
        // client/src/data/code-templates.ts - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
        export const rustTemplates = {
          default: `use anchor_lang::prelude::*;\n\ndeclare_id!("YourProgramID");\n\n#[program]\npub mod my_program {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {\n        // --- Your code goes here! ---\n        // Type: get_network_status()\n        // Example: msg!("Hello World!");\n        // -----------------------------\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(mut)]\n    pub payer: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n`,
          // Ethos Lesson Templates (Non-coding)
          // For narrative/quiz steps, the code editor will be read-only, but these templates provide
          // a visual "code-like" background that hints at the topic.
          ethos_lesson0_1: `// Code for freedom, not control.\n// Welcome to the digital frontier.\n\n/*\nHistory shows that control leads to oppression.\nOur fight is for a decentralized future.\n*/\n`,
          ethos_lesson0_2: `// Privacy is power.\n// Cryptography is the shield.\n\n/*\nCypherpunks write code.\nWe are going to write it.\n*/\n`,
          ethos_lesson1_1: `// A Cypherpunk's Manifesto\n// by Eric Hughes\n\n/*\nPrivacy is necessary for an open society in the electronic age.\n... We cannot expect governments, corporations... to grant us privacy.\n*/\n`,
          ethos_lesson1_2: `// The Crypto Anarchist Manifesto\n// by Timothy C. May\n\n/*\nFully anonymous, untraceable transactions.\nStrong cryptography will forever alter the nature of governments.\n*/\n`,
          ethos_lesson2_1: `// The Fiat Chains\n// 2008: A crisis of centralization.\n\n/*\nMoney supply controlled by a few.\nCensorship, inflation, and lack of true ownership.\n*/\n`,
          ethos_lesson2_2: `// Bitcoin Whitepaper (Excerpt)\n// A Peer-to-Peer Electronic Cash System\n\n/*\n"A purely peer-to-peer version of electronic cash would allow online payments\nto be sent directly from one party to another without going through a financial institution."\n*/\n`,
          ethos_lesson2_3: `// The Blockchain\n// Immutability and Transparency.\n\n/*\n"The network timestamps transactions by hashing them into an ongoing chain of hash-based\nproof-of-work, forming a record that cannot be changed without redoing the proof-of-work."\n*/\n`,
          ethos_lesson3_1: `// Ethereum & Smart Contracts\n// Code is law, self-enforcing.\n\n/*\n"A smart contract is a computer protocol intended to digitally facilitate, verify,\nor enforce the negotiation or performance of a contract."\n*/\n`,
          ethos_lesson3_2: `// DeFi & NFTs: Promises and Perils\n// Innovation vs. Centralization's creeping threat.\n\n/*\nDecentralized Finance aims to recreate traditional financial systems without intermediaries.\nNFTs provide unique digital ownership.\n*/\n`,
          ethos_lesson3_3: `// The Path Forward\n// Realigning with the Ethos.\n\n/*\nQuestion centralization.\nChampion privacy.\nBuild for liberty.\n*/\n`,

          // Solana Programming Templates (Adjusted L#)
          ranch_management_initial: `use anchor_lang::prelude::*;

declare_id!("RanchManager111111111111111111111111111111");

#[program]
pub mod ranch_manager {
    use super::*;

    pub fn initialize_ranch(
        ctx: Context<InitializeRanch>,
        ranch_name: String,
    ) -> Result<()> {
        let ranch = &mut ctx.accounts.ranch;
        // TODO: Assign owner field here in a later step (L6S2)
        ranch.name = ranch_name;
        ranch.level = 1;
        ranch.experience = 0;
        ranch.ranch_coin_balance = 500;
        ranch.building_count = 0;
        ranch.character_count = 0;
        ranch.created_at = Clock::get()?.unix_timestamp;

        msg!("Ranch '{}' initialized for owner {}", ranch.name, ranch.owner);
        Ok(())
    }
}

#[derive(Accounts)]
#[instruction(ranch_name: String)]
pub struct InitializeRanch<'info> {
    #[account(
        init,
        payer = owner,
        space = 8 + Ranch::INIT_SPACE,
        // USER ADDS SEEDS AND BUMP HERE IN L6S3
        // seeds = [b"ranch", owner.key().as_ref()],
        // bump
    )]
    pub ranch: Account<'info, Ranch>,

    #[account(mut)]
    pub owner: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[account]
pub struct Ranch {
    // USER ADDS PUB OWNER: PUBKEY, HERE IN L6S1
    pub ranch_coin_balance: u64, // 8
    pub building_count: u8,     // 1
    pub character_count: u8,    // 1
    pub created_at: i64,        // 8
    pub name: String,           // 4 + 32
    pub level: u8,              // 1
    pub experience: u64,        // 8
}

impl Ranch {
    const INIT_SPACE: usize = 8 + 1 + 1 + 8 + 4 + 32 + 1 + 8; // Adjust space as fields are added
}

#[error_code]
pub enum ErrorCode {
    #[msg("Unauthorized access to ranch")]
    UnauthorizedAccess,
}
`,
          ranch_management_step1_complete: `use anchor_lang::prelude::*;

declare_id!("RanchManager111111111111111111111111111111");

#[program]
pub mod ranch_manager {
    use super::*;

    pub fn initialize_ranch(
        ctx: Context<InitializeRanch>,
        ranch_name: String,
    ) -> Result<()> {
        let ranch = &mut ctx.accounts.ranch;
        ranch.owner = ctx.accounts.owner.key(); // This line is added in L6S2
        ranch.name = ranch_name;
        ranch.level = 1;
        ranch.experience = 0;
        ranch.ranch_coin_balance = 500;
        ranch.building_count = 0;
        ranch.character_count = 0;
        ranch.created_at = Clock::get()?.unix_timestamp;

        msg!("Ranch '{}' initialized for owner {}", ranch.name, ranch.owner);
        Ok(())
    }
}

#[derive(Accounts)]
#[instruction(ranch_name: String)]
pub struct InitializeRanch<'info> {
    #[account(
        init,
        payer = owner,
        space = 8 + 32 + 4 + 32 + 1 + 8 + 8 + 1 + 1 + 8, // Adjusted space for 'owner: Pubkey'
        // USER ADDS SEEDS AND BUMP HERE IN L6S3
        // seeds = [b"ranch", owner.key().as_ref()],
        // bump
    )]
    pub ranch: Account<'info, Ranch>,

    #[account(mut)]
    pub owner: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[account]
pub struct Ranch {
    pub owner: Pubkey, // This line is added in L6S1
    pub ranch_coin_balance: u64,
    pub building_count: u8,
    pub character_count: u8,
    pub created_at: i64,
    pub name: String,
    pub level: u8,
    pub experience: u64,
}

impl Ranch {
    const INIT_SPACE: usize = 32 + 4 + 32 + 1 + 8 + 8 + 1 + 1 + 8; // Updated for Pubkey (32 bytes)
}

#[error_code]
pub enum ErrorCode {
    #[msg("Unauthorized access to ranch")]
    UnauthorizedAccess,
}
`,
        };

        export const pythonTemplates = {
          default: `import seahorse.prelude.*

declare_id('YourProgramID')

@instruction
def initialize(payer: Signer):
    """Initialize a new program"""
    # --- Your code goes here! ---
    # Example: print("Hello World!")
    # ----------------------------
    pass # Keep this line unless you replace it with actual code
`,
          // Ethos Lesson Templates (Non-coding)
          ethos_lesson0_1: `# Code for freedom, not control.\n# Welcome to the digital frontier.\n\n# History shows that control leads to oppression.\n# Our fight is for a decentralized future.\n`,
          ethos_lesson0_2: `# Privacy is power.\n# Cryptography is the shield.\n\n# Cypherpunks write code.\n# We are going to write it.\n`,
          ethos_lesson1_1: `# A Cypherpunk's Manifesto\n# by Eric Hughes\n\n# Privacy is necessary for an open society in the electronic age.\n# We cannot expect governments, corporations... to grant us privacy.\n`,
          ethos_lesson1_2: `# The Crypto Anarchist Manifesto\n# by Timothy C. May\n\n# Fully anonymous, untraceable transactions.\n# Strong cryptography will forever alter the nature of governments.\n`,
          ethos_lesson2_1: `# The Fiat Chains\n# 2008: A crisis of centralization.\n\n# Money supply controlled by a few.\n# Censorship, inflation, and lack of true ownership.\n`,
          ethos_lesson2_2: `# Bitcoin Whitepaper (Excerpt)\n# A Peer-to-Peer Electronic Cash System\n\n# "A purely peer-to-peer version of electronic cash would allow online payments\n# to be sent directly from one party to another without going through a financial institution."\n`,
          ethos_lesson2_3: `# The Blockchain\n# Immutability and Transparency.\n\n# "The network timestamps transactions by hashing them into an ongoing chain of hash-based\n# proof-of-work, forming a record that cannot be changed without redoing the proof-of-work."\n`,
          ethos_lesson3_1: `# Ethereum & Smart Contracts\n# Code is law, self-enforcing.\n\n# "A smart contract is a computer protocol intended to digitally facilitate, verify,\n# or enforce the negotiation or performance of a contract."\n`,
          ethos_lesson3_2: `# DeFi & NFTs: Promises and Perils\n# Innovation vs. Centralization's creeping threat.\n\n# Decentralized Finance aims to recreate traditional financial systems without intermediaries.\n# NFTs provide unique digital ownership.\n`,
          ethos_lesson3_3: `# The Path Forward\n# Realigning with the Ethos.\n\n# Question centralization.\n# Champion privacy.\n# Build for liberty.\n`,

          // Solana Programming Templates
          ranch_management_initial: `import seahorse.prelude.*

declare_id('RanchManager111111111111111111111111111111')

class Ranch(Account):
    # USER ADDS OWNER: PUBKEY HERE IN L6S1
    ranch_coin_balance: u64
    building_count: u8
    character_count: u8
    created_at: i64
    name: str
    level: u8
    experience: u64

@instruction
def initialize_ranch(
    ranch: Empty[Ranch],
    owner: Signer,
    ranch_name: str
):
    """Initialize a new ranch"""
    ranch = ranch.init(
        payer=owner,
        space=8 + 32 + 32 + 1 + 8 + 8 + 1 + 1 + 8, // Adjust space
        # USER ADDS SEEDS AND BUMP HERE IN L6S3
        # seeds=['ranch', owner],
        # bump
    )

    # TODO: Assign owner field here in a later step (L6S2)
    ranch.name = ranch_name
    ranch.level = 1
    ranch.experience = 0
    ranch.ranch_coin_balance = 500
    ranch.building_count = 0
    ranch.character_count = 0
    ranch.created_at = Clock.unix_timestamp()

    print(f"Ranch '{ranch_name}' initialized for owner {owner.key()}")
`,
          ranch_management_step1_complete: `import seahorse.prelude.*

declare_id('RanchManager111111111111111111111111111111')

class Ranch(Account):
    owner: Pubkey # This line is added in L6S1
    ranch_coin_balance: u64
    building_count: u8
    character_count: u8
    created_at: i64
    name: str
    level: u8
    experience: u64

@instruction
def initialize_ranch(
    ranch: Empty[Ranch],
    owner: Signer,
    ranch_name: str
):
    """Initialize a new ranch"""
    ranch = ranch.init(
        payer=owner,
        space=8 + 32 + 32 + 1 + 8 + 8 + 1 + 1 + 8, // Adjusted space
        # USER ADDS SEEDS AND BUMP HERE IN L6S3
        # seeds=['ranch', owner],
        # bump
    )

    ranch.owner = owner.key() // This line is added in L6S2
    ranch.name = ranch_name
    ranch.level = 1
    ranch.experience = 0
    ranch.ranch_coin_balance = 500
    ranch.building_count = 0
    ranch.character_count = 0
    ranch.created_at = Clock.unix_timestamp()

    print(f"Ranch '{ranch_name}' initialized for owner {owner.key()}")
`,
        };
        ```

3.  **Create `client/public/assets/images/scientist-character.png` (Manual Upload - Critical):**
    * **Action:** **YOU MUST MANUALLY UPLOAD** your AI Assistant image (the running scientist with purple hair) to `client/public/assets/images/` and name it `scientist-character.png`. This prompt cannot perform file uploads. If this file is missing, the HintCharacter will not render.

4.  **Create `client/public/assets/images/brb-nft-ai-robot.png` (Manual Upload - Critical):**
    * **Action:** **YOU MUST MANUALLY UPLOAD** your reward NFT image (the robot with coffee mug) to `client/public/assets/images/` and name it `brb-nft-ai-robot.png`. This prompt cannot perform file uploads. If this file is missing, the ChallengeReward will not render.

5.  **Completely REPLACE `client/src/firebase-init.ts` Content:**
    * **File:** `client/src/firebase-init.ts`
    * **Action:** DELETE ALL EXISTING CONTENT. PASTE THE ENTIRE BLOCK BELOW.
    * **Implementation:**
        ```typescript
        // client/src/firebase-init.ts - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
        import { initializeApp } from 'firebase/app';
        import { getAuth } from 'firebase/auth';
        import { getFirestore } from 'firebase/firestore';

        declare const __app_id: string;
        declare const __firebase_config: string;
        declare const __initial_auth_token: string;

        let firebaseConfigParsed = {};
        try {
          if (typeof __firebase_config !== 'undefined' && __firebase_config) {
            firebaseConfigParsed = JSON.parse(__firebase_config);
          } else {
            console.warn("__firebase_config not found. Using default empty config. Firebase features might not work.");
          }
        } catch (e) {
          console.error("Failed to parse __firebase_config:", e);
          firebaseConfigParsed = {};
        }

        export const app = initializeApp(firebaseConfigParsed);
        export const auth = getAuth(app);
        export const db = getFirestore(app);
        export const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        export const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : '';
        ```

6.  **Completely REPLACE `server/storage.ts` Content:**
    * **File:** `server/storage.ts`
    * **Action:** DELETE ALL EXISTING CONTENT. PASTE THE ENTIRE BLOCK BELOW.
    * **Implementation:**
        ```typescript
        // server/storage.ts - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
        import {
          users, ranches, lessons, userProgress, characters, buildings, rewardNfts,
          type User, type InsertUser, type Ranch, type InsertRanch, type Lesson,
          type UserProgress, type InsertUserProgress, type Character, type InsertCharacter,
          type Building, type InsertBuilding, type RewardNft, type InsertRewardNft
        } from "@shared/schema";
        import { getFirestore, doc, getDoc, setDoc, addDoc, updateDoc, deleteDoc, collection, query, where, getDocs } from "firebase/firestore";
        import { initializeApp } from "firebase/app";

        declare const __app_id: string;
        declare const __firebase_config: string;

        let firebaseAppInstance: any;
        let firestoreDbInstance: any;

        try {
          const config = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
          if (Object.keys(config).length > 0) {
            firebaseAppInstance = initializeApp(config, "server-side-app");
            firestoreDbInstance = getFirestore(firebaseAppInstance);
          } else {
            console.warn("Firebase config not found or empty on server. Firestore storage will be mocked or non-functional.");
          }
        } catch (e) {
          console.error("Failed to parse __firebase_config on server:", e);
        }

        const ARTIFACTS_PATH = `artifacts/${typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'}`;

        export interface IStorage {
            getUser(id: string): Promise<User | undefined>;
            getUserByUsername(username: string): Promise<User | undefined>;
            getUserByWalletAddress(walletAddress: string): Promise<User | undefined>;
            createUser(user: InsertUser): Promise<User>;

            getRanch(id: string): Promise<Ranch | undefined>;
            getRanchByUserId(userId: string): Promise<Ranch | undefined>;
            createRanch(ranch: InsertRanch): Promise<Ranch>;
            updateRanch(userId: string, updates: Partial<Omit<Ranch, 'id' | 'ownerId' | 'createdAt'>>): Promise<Ranch>;

            getAllLessons(): Promise<Lesson[]>;
            getLessonById(id: number): Promise<Lesson | undefined>;
            createLesson(lesson: Omit<Lesson, 'id' | 'createdAt'>): Promise<Lesson>;

            getLessonProgress(id: string): Promise<UserProgress | undefined>;
            getLessonProgressByUserId(userId: string): Promise<UserProgress[]>;
            getLessonProgressByUserAndLesson(userId: string, lessonId: number): Promise<UserProgress | undefined>;
            createLessonProgress(progress: InsertUserProgress): Promise<UserProgress>;
            updateLessonProgress(id: string, updates: Partial<Omit<UserProgress, 'id' | 'userId' | 'lessonId' | 'createdAt'>>): Promise<UserProgress>;

            getCharacter(id: string): Promise<Character | undefined>;
            getCharactersByUserId(userId: string): Promise<Character[]>;
            createCharacter(character: InsertCharacter): Promise<Character>;
            updateCharacter(id: string, updates: Partial<Omit<Character, 'id' | 'ownerId' | 'createdAt'>>): Promise<Character>;

            getBuilding(id: string): Promise<Building | undefined>;
            getBuildingsByRanchId(ranchId: string): Promise<Building[]>;
            createBuilding(building: InsertBuilding): Promise<Building>;
            updateBuilding(id: string, updates: Partial<Omit<Building, 'id' | 'ranchId' | 'createdAt'>>): Promise<Building>;

            getRewardNftsByUserId(userId: string): Promise<RewardNft[]>;
            createRewardNft(insertReward: InsertRewardNft): Promise<RewardNft>;
        }

        export class FirestoreStorage implements IStorage {
          private db: any;

          constructor() {
            if (!firestoreDbInstance) {
              console.error("Firestore DB instance not available in FirestoreStorage constructor. Using dummy storage.");
              this.db = null; // Set to null if not initialized
            } else {
              this.db = firestoreDbInstance;
              this.initializeLessons(); // Ensure default lessons are in Firestore
            }
          }

          private getUserCollectionRef(userId: string, collectionName: string) {
            if (!this.db) throw new Error("Firestore DB not initialized.");
            return collection(this.db, `${ARTIFACTS_PATH}/users/${userId}/${collectionName}`);
          }

          private getPublicCollectionRef(collectionName: string) {
            if (!this.db) throw new Error("Firestore DB not initialized.");
            return collection(this.db, `${ARTIFACTS_PATH}/public/data/${collectionName}`);
          }

          private async initializeLessons() {
            if (!this.db) return;
            const lessonsRef = this.getPublicCollectionRef('lessons');
            const snapshot = await getDocs(lessonsRef);
            if (snapshot.empty) {
              // Lessons data structure needs to match the new client/src/data/lessons.ts
              // The 'id' property here is used to set the Firestore document ID.
              const defaultLessons: (Omit<Lesson, 'createdAt'> & { id: number })[] = [
                // Lesson 1
                {
                  id: 1,
                  title: "Prologue: The Digital Frontier's Code of Honor",
                  description: "Uncover the forgotten history of digital freedom.",
                  chapter: 0,
                  difficulty: 'beginner',
                  estimatedTime: 20,
                  isPremium: false,
                  content: {
                    steps: [
                      {
                        id: 1,
                        title: "Echoes from the Old World",
                        challenge: `Before the blockchain sun rose over this digital frontier, the Old World suffered under the thumb of centralized powers. Data was spied on, money controlled, and freedom often felt like a myth whispered in hushed tones. But some dreamed of a new kind of freedom – built not with guns, but with **code**.

                        **Reflection:** What aspects of the 'Old World' (digital or otherwise) make you value privacy and control over your own data?`,
                        successMessage: "Understood. The seeds of rebellion are often sown in the shadows of control. Click 'Next Step' to continue.",
                        failureMessage: "Please take a moment to reflect on the prompt. Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson0_1',
                        visualEffectTrigger: 'dystopianCity',
                        hintMessage: "This step is about setting the stage. Read the narrative, think about the question, and click 'Deploy' when you're ready to proceed.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'text-input',
                            question: "Type 'Freedom' to confirm you're ready to learn about the digital frontier.",
                            correctAnswer: "Freedom",
                        },
                        videoUrl: "[https://www.youtube.com/embed/P-2R-5_Bf7k?autoplay=1&mute=1&controls=0&modestbranding=1&rel=0](https://www.youtube.com/embed/P-2R-5_Bf7k?autoplay=1&mute=1&controls=0&modestbranding=1&rel=0)" // Placeholder, replace with relevant video
                      },
                      {
                        id: 2,
                        title: "The Whispers of Rebellion - Rise of the Cypherpunks",
                        challenge: `In the shadows of early digital networks, a band of rebels emerged – the **Cypherpunks**. They weren't outlaws in the traditional sense, but digital freedom fighters who believed that cryptography, not legislation, was the key to true liberty. They met not in saloons, but in email lists, forging their manifestos in lines of encrypted text.

                        **Reflection:** If code is a form of speech, and privacy is essential for free speech, how does strong encryption become a tool for freedom?`,
                        successMessage: "Confirmed. The digital whispers grew into a chorus. Click 'Next Step' to continue.",
                        failureMessage: "Please reflect on the concept of code and freedom. Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson0_2',
                        visualEffectTrigger: 'cypherpunkSymbol',
                        hintMessage: "The Cypherpunks believed that privacy could only be guaranteed by mathematics, not by human promises. Think about how unbreakable math gives you control.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'multiple-choice',
                            question: "What was the primary tool Cypherpunks believed was key to liberty?",
                            options: ["Laws", "Debates", "Cryptography", "Speeches"],
                            correctAnswer: "Cryptography",
                        },
                      },
                    ]
                  },
                },
                // Lesson 2
                {
                  id: 2,
                  title: "The Manifestos: Code is Law, Privacy is Power",
                  description: "Dive into the founding texts of the digital freedom movement.",
                  chapter: 1,
                  difficulty: 'beginner',
                  estimatedTime: 25,
                  isPremium: false,
                  content: {
                    steps: [
                      {
                        id: 1,
                        title: "The Cypherpunk Manifesto: Code, Not Trust",
                        challenge: `Eric Hughes, a quiet frontier coder, penned the words that became our first law: 'Cypherpunks write code.' He argued that laws and regulations could never truly protect our freedom in the digital realm. Only **unbreakable code** could truly guarantee privacy and liberty. Our very first step in this adventure is to understand this fundamental truth.

                        **Reflection:** Why do cypherpunks believe that code is a stronger guarantee of privacy than laws or policies?`,
                        successMessage: "Manifesto understood. Trust in code is the first principle. Click 'Next Step' to continue.",
                        failureMessage: "Consider the inherent limitations of human promises versus mathematical guarantees. Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson1_1',
                        visualEffectTrigger: 'codeShield',
                        hintMessage: "Laws can be broken or changed by people. Code, if written correctly, executes exactly as intended, every time.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'true-false',
                            question: "True or False: Cypherpunks primarily relied on legislation to achieve privacy.",
                            correctAnswer: false,
                        },
                      },
                      {
                        id: 2,
                        title: "The Crypto Anarchist Manifesto: Unstoppable Liberty",
                        challenge: `Timothy C. May, a figure shrouded in digital mist, took the vision even further. His 'Crypto Anarchist Manifesto' painted a future where cryptography would dissolve the very power of the state, creating truly free and anonymous markets. This vision of an unstoppable, censorship-resistant digital realm is where the true heart of Web3 beats.\n\n**Reflection:** How does an 'anonymous, distributed digital cash system' fulfill the vision of a truly free and unstoppable market?`,
                        successMessage: "Vision embraced. A future without central gatekeepers. Click 'Next Step' to continue.",
                        failureMessage: "Think about how intermediaries can stop or control transactions. Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson1_2',
                        visualEffectTrigger: 'digitalGhost',
                        hintMessage: "If no single person or company can control the money, then no one can stop you from using it. That's true freedom in action.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'text-input',
                            question: "What concept describes a market where transactions cannot be stopped by a central authority?",
                            correctAnswer: "Censorship Resistance",
                        },
                      },
                    ]
                  },
                },
                // Lesson 3
                {
                  id: 3,
                  title: "The Genesis Block: Bitcoin's Cypherpunk Legacy",
                  description: "Explore how Bitcoin brought cypherpunk ideals to life.",
                  chapter: 2,
                  difficulty: 'beginner',
                  estimatedTime: 30,
                  isPremium: false,
                  content: {
                    steps: [
                      {
                        id: 1,
                        title: "The Fiat Chains - Why Bitcoin Was Born",
                        challenge: `The old world's money, 'fiat currency,' was controlled by central banks and governments. It could be printed out of thin air, censored, or inflated away. This system felt like digital chains to those who valued financial freedom. The 2008 financial crisis exposed these flaws, and in the digital dust, a new idea was born.\n\n**Reflection:** How can a system where money supply is controlled by a single entity undermine individual freedom?`,
                        successMessage: "Chains identified. The need for a new path. Click 'Next Step' to continue.",
                        failureMessage: "Reflect on the power a centralized financial system holds over individuals. Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson2_1',
                        visualEffectTrigger: 'bankBreaking',
                        hintMessage: "Think about inflation, censorship, and access to funds. What happens when someone else has ultimate control over your money?",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'true-false',
                            question: "True or False: Fiat currency is backed by physical gold.",
                            correctAnswer: false,
                        },
                      },
                      {
                        id: 2,
                        title: "Bitcoin: A Peer-to-Peer Electronic Cash System",
                        challenge: `From the shadows, an anonymous figure, Satoshi Nakamoto, rode into the digital frontier with a revolutionary proposal: **Bitcoin**. It was the first true 'electronic cash' that didn't need a bank, a government, or any trusted middleman. It was a digital currency for the people, by the people, secured by pure cryptography.\n\n**Reflection:** How does eliminating the 'trusted third party' in financial transactions enhance privacy and decentralization?`,
                        successMessage: "Bitcoin's core principle absorbed. Trustless transactions for a new new age. Click 'Next Step' to continue.",
                        failureMessage: "Focus on the 'peer-to-peer' aspect. What does that remove from the equation? Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson2_2',
                        visualEffectTrigger: 'decentralizedNodes',
                        hintMessage: "When you send money directly to someone else, without a bank in the middle, who can stop it? No one.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'multiple-choice',
                            question: "What does 'peer-to-peer' mean in the context of Bitcoin?",
                            options: ["Requires a central server", "Direct transactions between users", "Only for anonymous users", "Backed by government"],
                            correctAnswer: "Direct transactions between users",
                        },
                      },
                      {
                        id: 3,
                        title: "The Blockchain: A Public, Immutable Ledger",
                        challenge: `At the heart of Bitcoin was the **blockchain** – a revolutionary 'digital ledger' that recorded every transaction not in a bank's secret book, but openly and immutably across a vast network of computers. Once a transaction was carved into this digital stone, it couldn't be changed. This public, decentralized truth became the backbone of our new digital world.\n\n**Reflection:** How does a public and immutable ledger contribute to a more transparent and fair financial system, even if the users are pseudonymous?`,
                        successMessage: "Blockchain principles secured. The unchangeable truth. Click 'Next Step' to continue.",
                        failureMessage: "Consider what 'public' and 'immutable' mean for accountability. Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson2_3',
                        visualEffectTrigger: 'blockchainBlocks',
                        hintMessage: "Even if you don't know *who* did something, you know *what* happened, and that it can't be covered up.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'text-input',
                            question: "What is the key characteristic of a blockchain that prevents past transactions from being altered?",
                            correctAnswer: "Immutability",
                        },
                      },
                    ]
                  },
                },
                // Lesson 4
                {
                  id: 4,
                  title: "The Crossroads: Web3's Path and Future",
                  description: "Understand the evolution of Web3 and re-align with core ideals.",
                  chapter: 3,
                  difficulty: 'beginner',
                  estimatedTime: 30,
                  isPremium: false,
                  content: {
                    steps: [
                      {
                        id: 1,
                        title: "Ethereum & Smart Contracts: Expanding the Vision",
                        challenge: `Bitcoin proved that decentralized money was possible. But soon, new pioneers arrived, pushing the frontier further. Ethereum, with its 'smart contracts,' allowed not just money, but **any kind of digital agreement** to be executed automatically and transparently on the blockchain. The digital Wild West just got a lot more sophisticated.\n\n**Reflection:** How do smart contracts enhance the idea of 'code is law' by making agreements self-enforcing without human intervention?`,
                        successMessage: "Smart Contracts understood. Code as unstoppable agreement. Click 'Next Step' to continue.",
                        failureMessage: "Think about what 'self-enforcing' means for trust and intermediaries. Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson3_1',
                        visualEffectTrigger: 'smartContractGears',
                        hintMessage: "If the rules are written in code, and that code runs automatically, you don't need a judge or lawyer to enforce it.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'multiple-choice',
                            question: "What do smart contracts allow to be executed directly on the blockchain?",
                            options: ["Legal documents", "Digital agreements", "Physical contracts", "Verbal promises"],
                            correctAnswer: "Digital agreements",
                        },
                      },
                      {
                        id: 2,
                        title: "The Rise of DeFi & NFTs: Promises and Perils",
                        challenge: `The frontier exploded with innovation: Decentralized Finance (DeFi) offered banks made of code, and Non-Fungible Tokens (NFTs) gave us true digital ownership of art, collectibles, and even virtual land. But with this rapid growth came new challenges – the lure of easy riches, scams lurking in the shadows, and the constant threat of centralization creeping back into the decentralized dream.\n\n**Reflection:** How can we, as builders and users, ensure that the growth of Web3 (like DeFi and NFTs) remains true to the original cypherpunk ideals of decentralization and individual control?`,
                        successMessage: "Perils recognized, vigilance heightened. The fight for true decentralization continues. Click 'Next Step' to continue.",
                        failureMessage: "Consider where power can accumulate in new systems. How can we prevent that? Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson3_2',
                        visualEffectTrigger: 'digitalMarketplace',
                        hintMessage: "Even in Web3, some services become very popular and centralize power. We need to actively choose decentralized alternatives and build them robustly.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'text-input',
                            question: "What is the primary risk to decentralization as Web3 grows?",
                            correctAnswer: "Centralization",
                        },
                      },
                      {
                        id: 3,
                        title: "The Path Forward: Realigning with the Ethos",
                        challenge: `The digital frontier is vast and ever-changing. As new builders like you join the ranks, it's crucial to remember the code of honor established by the original cypherpunks. To truly build a decentralized future, we must constantly question centralization, champion privacy, and ensure that our innovations serve liberty, not control. Your journey is not just about writing code; it's about building a better digital world.\n\n**Reflection:** As a future Solana developer, how will you incorporate the principles of privacy, decentralization, and censorship resistance into the applications you build?`,
                        successMessage: "Ethos embraced! Your journey as a builder aligned with the true spirit of Web3 begins now. Click 'Next' to move to your first coding challenge!",
                        failureMessage: "Reflect on your role in shaping the decentralized future. What principles will guide your work? Click 'Deploy' to confirm understanding.",
                        initialCodeTemplateKey: 'ethos_lesson3_3',
                        visualEffectTrigger: 'glowingPath',
                        hintMessage: "Every piece of code you write, every decision you make, can either reinforce centralization or push towards more freedom and privacy.",
                        isCodingChallenge: false,
                        quiz: {
                            type: 'multiple-choice',
                            question: "Which of these is NOT a core cypherpunk principle?",
                            options: ["Privacy", "Decentralization", "Censorship Resistance", "Centralized Control"],
                            correctAnswer: "Centralized Control",
                        },
                      },
                    ]
                  },
                },
            // --- ORIGINAL Solana Lessons (IDs SHIFTED and chapter updated) ---
            {
                id: 5, // Original Lesson 1 (Solana Basics & Wallet Setup)
                title: "Solana Basics & Wallet Setup",
                description: "Learn the fundamentals of Solana and set up your Web3 wallet",
                chapter: 4, // Chapter adjusted
                difficulty: 'beginner',
                estimatedTime: 30,
                isPremium: false,
                content: {
                    steps: [
                        {
                            id: 1,
                            title: "Ping the Blockchain: Your First Transmission",
                            challenge: `Welcome, new recruit! Your mission begins now. This isn't just a game; it's a training simulation in the digital frontier. Your first task is to establish a connection with the Solana Devnet – think of it as sending a tiny digital "ping" to see if the network is alive and responding.

                            Below, you'll see your **Code Terminal**, a powerful tool for writing Solana programs. It starts with some basic program structure. Don't worry about understanding all of it yet! We'll guide you.

                            **Your Task:**
                            1.  Find the special area in your **Code Terminal** marked with comments like \`// Your code goes here\` or \`# Your code goes here\`.
                            2.  Type the following command into that area: \`get_network_status()\`
                            3.  Click the **"Deploy"** button to send your command.

                            Watch the "Console Output" below your code for a response! This is how your program communicates with the Solana network.`,
                            expectedCodePattern: { rust: 'get_network_status\\(\\)', python: 'get_network_status\\(\\)' },
                            successMessage: "Transmission received! Network Status: Connected! Ping: {ping}ms | Current Slot: {slot}. You've made your first connection!",
                            failureMessage: "Transmission failed. The `get_network_status()` command was not found or is misspelled. Please ensure you typed it exactly as shown in the designated area. Double-check for typos!",
                            initialCodeTemplateKey: 'default',
                            visualEffectTrigger: 'networkPing',
                            hintMessage: "Hey there! To complete this first step, type `get_network_status()` exactly as you see it into the designated section of your Code Terminal. Then, click the 'Deploy' button. This function call is like pressing a big red button to check the network!",
                            isCodingChallenge: true, // Mark as coding challenge
                        },
                    ]
                },
            },
            {
                id: 6, // Original Lesson 2
                title: "Creating Your Ranch Account",
                description: "Build your first Solana program to manage ranch data",
                chapter: 5, // Chapter adjusted
                difficulty: 'beginner',
                estimatedTime: 45,
                isPremium: false,
                content: {
                    steps: [
                        {
                            id: 1,
                            title: "Define Ranch Owner Field",
                            challenge: "Your ranch needs an owner! In the `Ranch` struct (Rust) or `Ranch` class (Python), add a `pubkey` field named `owner`. This will identify who controls the ranch. Don't forget the comma for Rust!",
                            expectedCodePattern: { rust: 'pub\\s+owner:\\s*Pubkey,', python: 'owner:\\s*Pubkey' },
                            successMessage: "Excellent! The `owner` field has been added. Your ranch now knows who its rightful owner is!",
                            failureMessage: "Not quite. Make sure you've added 'pub owner: Pubkey,' (Rust) or 'owner: Pubkey' (Python) exactly inside the Ranch definition. Check for typos and correct capitalization!",
                            initialCodeTemplateKey: 'ranch_management_initial',
                            visualEffectTrigger: 'blueprint',
                            hintMessage: "Think about Rust structs or Python classes. You need to add a line that declares a public key variable named 'owner' within your 'Ranch' data structure.",
                            isCodingChallenge: true,
                        },
                        {
                            id: 2,
                            title: "Initialize Owner in `initialize_ranch`",
                            challenge: "Now, inside the `initialize_ranch` function, assign the `owner` field of your `ranch` account to the `ctx.accounts.owner.key()` (Rust) or `owner.key()` (Python). Remember `ranch.owner = ctx.accounts.owner.key();` or `ranch.owner = owner.key()`.",
                            expectedCodePattern: { rust: 'ranch\\.owner\\s*=\\s*ctx\\.accounts\\.owner\\.key\\(\\);', python: 'ranch\\.owner\\s*=\\s*owner\\.key\\(\\)' },
                            successMessage: "Owner successfully initialized! Your ranch deed is now registered to you!",
                            failureMessage: "The owner assignment is incorrect. Double-check the syntax for assigning the owner's key to the ranch account. Hint: Look at the `ctx.accounts.owner` context in Rust or `owner` parameter in Python.",
                            initialCodeTemplateKey: 'ranch_management_step1_complete',
                            visualEffectTrigger: 'sparkle',
                            hintMessage: "You need to set the 'owner' field of your 'ranch' variable to the public key of the user who's calling this program. In Rust, you'll use `ctx.accounts.owner.key()`; in Python, `owner.key()`.",
                            isCodingChallenge: true,
                        },
                        {
                            id: 3,
                            title: "Programmatic Ownership: Securing Your Ranch with a Program Derived Address (PDA)",
                            challenge: `Welcome, digital homesteader! In this decentralized frontier, we value true ownership and privacy. Unlike the old world where deeds were on paper in a dusty office, here, your ranch deed can be controlled by pure code! This is the essence of **cypher-punk** – using cryptography and decentralized tech to protect privacy and freedom.
                            Today, we're diving into **Program Derived Addresses (PDAs)**. Imagine your ranch deed isn't owned by a specific wallet with a private key, but by a special, unhackable 'strongbox' that *only your ranch program can open*. This strongbox address is *derived* from your program's ID and some unique 'seeds' (like a secret password) and a 'bump' (a special number to make sure it's valid). This makes your ranch truly **decentralized** and secure, giving control to the smart contract itself, not a person's key.

                            **Your Task:**
                            1.  In the \`InitializeRanch\` struct (Rust) or function definition (Python), locate the \`#[account(...)]\` attribute for your \`ranch\` account.
                            2.  **Add a \`seeds\` argument** to this attribute. For the ranch, the seeds will be the byte literal \`b"ranch"\` and the owner's public key (\`owner.key().as_ref()\` in Rust, \`owner\` in Python).
                            3.  **Add a \`bump\` argument** to this attribute. This is a special nonce that ensures the PDA is valid.`,
                            expectedCodePattern: {
                                rust: 'seeds\\s*=\\s*\\[b"ranch",\\s*owner\\.key\\(\\)\\.as_ref\\(\\)\\]\\s*,\\s*bump',
                                python: 'seeds=\\[\'ranch\',\\s*owner\\]\\s*,\\s*bump'
                            },
                            successMessage: "Fantastic! Your ranch account is now a true Program Derived Address (PDA)! Its deed is safely locked away, controlled by your program, not a private key. You've embraced programmatic ownership!",
                            failureMessage: "Not quite. Double-check your PDA syntax. Did you add `seeds` and `bump` correctly within the `#[account(...)]` attribute (Rust) or `init` arguments (Python)? Remember the exact values for the seeds (`b\"ranch\"` and the owner's key) and that `bump` is also required!",
                            initialCodeTemplateKey: 'ranch_management_step2_complete',
                            visualEffectTrigger: 'dataStream',
                            hintMessage: `Okay, digital prospector! Think of PDAs like a magic lockbox only your program can open. You need to tell Solana:
                            1.  What 'words' (seeds) make this lockbox unique (e.g., the word "ranch" and the owner's special key).
                            2.  A special number (the 'bump') that makes sure the lockbox address is perfect and unhackable.
                            Look at the \`#[account(...)]\` line for the \`ranch\` in Rust, or the \`.init()\` call in Python, and add the \`seeds\` and \`bump\` keywords!`,
                            isCodingChallenge: true,
                        },
                    ]
                },
            },
            {
                id: 7, // Original Lesson 3
                title: "Minting Character NFTs",
                description: "Create unique cowboy and outlaw NFTs with custom traits",
                chapter: 6, // Chapter adjusted
                difficulty: 'intermediate',
                estimatedTime: 60,
                isPremium: false,
                content: {
                    steps: [
                        { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
                    ]
                }
            },
            {
                id: 8, // Original Lesson 4
                title: "RanchCoin Token Creation",
                description: "Deploy your own SPL token for in-game economy",
                chapter: 7, // Chapter adjusted
                difficulty: 'intermediate',
                estimatedTime: 50,
                isPremium: true,
                content: {
                    steps: [
                        { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
                    ]
                }
            },
            {
                id: 9, // Original Lesson 5
                title: "Saloon Dueling System",
                description: "Program interactive duels and betting mechanics",
                chapter: 8, // Chapter adjusted
                difficulty: 'advanced',
                estimatedTime: 75,
                isPremium: true,
                content: {
                    steps: [
                        { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
                    ]
                }
            },
            {
                id: 10, // Original Lesson 6
                title: "Security & Ranch Defense",
                description: "Implement security measures against shadow beasts",
                chapter: 9, // Chapter adjusted
                difficulty: 'advanced',
                estimatedTime: 90,
                isPremium: true,
                content: {
                    steps: [
                        { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
                    ]
                }
            },
            {
                id: 11, // Original Lesson 7
                title: "Ether Range Expeditions",
                description: "Master cross-program invocations and external integrations",
                chapter: 10, // Chapter adjusted
                difficulty: 'advanced',
                estimatedTime: 120,
                isPremium: true,
                content: {
                    steps: [
                        { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
                    ]
                }
            }
        ];
        ```

2.  **Completely REPLACE `client/src/data/code-templates.ts` Content:**
    * **File:** `client/src/data/code-templates.ts`
    * **Action:** DELETE ALL EXISTING CONTENT. PASTE THE ENTIRE BLOCK BELOW.
    * **Implementation:**
        ```typescript
        // client/src/data/code-templates.ts - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
        export const rustTemplates = {
          default: `use anchor_lang::prelude::*;\n\ndeclare_id!("YourProgramID");\n\n#[program]\npub mod my_program {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {\n        // --- Your code goes here! ---\n        // Type: get_network_status()\n        // Example: msg!("Hello World!");\n        // -----------------------------\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(mut)]\n    pub payer: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n`,
          // Ethos Lesson Templates (Non-coding)
          // For narrative/quiz steps, the code editor will be read-only, but these templates provide
          // a visual "code-like" background that hints at the topic.
          ethos_lesson0_1: `// Code for freedom, not control.\n// Welcome to the digital frontier.\n\n/*\nHistory shows that control leads to oppression.\nOur fight is for a decentralized future.\n*/\n`,
          ethos_lesson0_2: `// Privacy is power.\n// Cryptography is the shield.\n\n/*\nCypherpunks write code.\nWe are going to write it.\n*/\n`,
          ethos_lesson1_1: `// A Cypherpunk's Manifesto\n// by Eric Hughes\n\n/*\nPrivacy is necessary for an open society in the electronic age.\n... We cannot expect governments, corporations... to grant us privacy.\n*/\n`,
          ethos_lesson1_2: `// The Crypto Anarchist Manifesto\n// by Timothy C. May\n\n/*\nFully anonymous, untraceable transactions.\nStrong cryptography will forever alter the nature of governments.\n*/\n`,
          ethos_lesson2_1: `// The Fiat Chains\n// 2008: A crisis of centralization.\n\n/*\nMoney supply controlled by a few.\nCensorship, inflation, and lack of true ownership.\n*/\n`,
          ethos_lesson2_2: `// Bitcoin Whitepaper (Excerpt)\n// A Peer-to-Peer Electronic Cash System\n\n/*\n"A purely peer-to-peer version of electronic cash would allow online payments\nto be sent directly from one party to another without going through a financial institution."\n*/\n`,
          ethos_lesson2_3: `// The Blockchain\n// Immutability and Transparency.\n\n/*\n"The network timestamps transactions by hashing them into an ongoing chain of hash-based\nproof-of-work, forming a record that cannot be changed without redoing the proof-of-work."\n*/\n`,
          ethos_lesson3_1: `// Ethereum & Smart Contracts\n// Code is law, self-enforcing.\n\n/*\n"A smart contract is a computer protocol intended to digitally facilitate, verify,\nor enforce the negotiation or performance of a contract."\n*/\n`,
          ethos_lesson3_2: `// DeFi & NFTs: Promises and Perils\n// Innovation vs. Centralization's creeping threat.\n\n/*\nDecentralized Finance aims to recreate traditional financial systems without intermediaries.\nNFTs provide unique digital ownership.\n*/\n`,
          ethos_lesson3_3: `// The Path Forward\n// Realigning with the Ethos.\n\n/*\nQuestion centralization.\nChampion privacy.\nBuild for liberty.\n*/\n`,

          // Solana Programming Templates (Adjusted L#)
          ranch_management_initial: `use anchor_lang::prelude::*;

declare_id!("RanchManager111111111111111111111111111111");

#[program]
pub mod ranch_manager {
    use super::*;

    pub fn initialize_ranch(
        ctx: Context<InitializeRanch>,
        ranch_name: String,
    ) -> Result<()> {
        let ranch = &mut ctx.accounts.ranch;
        // TODO: Assign owner field here in a later step (L6S2)
        ranch.name = ranch_name;
        ranch.level = 1;
        ranch.experience = 0;
        ranch.ranch_coin_balance = 500;
        ranch.building_count = 0;
        ranch.character_count = 0;
        ranch.created_at = Clock::get()?.unix_timestamp;

        msg!("Ranch '{}' initialized for owner {}", ranch.name, ranch.owner);
        Ok(())
    }
}

#[derive(Accounts)]
#[instruction(ranch_name: String)]
pub struct InitializeRanch<'info> {
    #[account(
        init,
        payer = owner,
        space = 8 + Ranch::INIT_SPACE,
        // USER ADDS SEEDS AND BUMP HERE IN L6S3
        // seeds = [b"ranch", owner.key().as_ref()],
        // bump
    )]
    pub ranch: Account<'info, Ranch>,

    #[account(mut)]
    pub owner: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[account]
pub struct Ranch {
    // USER ADDS PUB OWNER: PUBKEY, HERE IN L6S1
    pub ranch_coin_balance: u64, // 8
    pub building_count: u8,     // 1
    pub character_count: u8,    // 1
    pub created_at: i64,        // 8
    pub name: String,           // 4 + 32
    pub level: u8,              // 1
    pub experience: u64,        // 8
}

impl Ranch {
    const INIT_SPACE: usize = 8 + 1 + 1 + 8 + 4 + 32 + 1 + 8; // Adjust space as fields are added
}

#[error_code]
pub enum ErrorCode {
    #[msg("Unauthorized access to ranch")]
    UnauthorizedAccess,
}
`,
          ranch_management_step1_complete: `use anchor_lang::prelude::*;

declare_id!("RanchManager111111111111111111111111111111");

#[program]
pub mod ranch_manager {
    use super::*;

    pub fn initialize_ranch(
        ctx: Context<InitializeRanch>,
        ranch_name: String,
    ) -> Result<()> {
        let ranch = &mut ctx.accounts.ranch;
        ranch.owner = ctx.accounts.owner.key(); // This line is added in L6S2
        ranch.name = ranch_name;
        ranch.level = 1;
        ranch.experience = 0;
        ranch.ranch_coin_balance = 500;
        ranch.building_count = 0;
        ranch.character_count = 0;
        ranch.created_at = Clock::get()?.unix_timestamp;

        msg!("Ranch '{}' initialized for owner {}", ranch.name, ranch.owner);
        Ok(())
    }
}

#[derive(Accounts)]
#[instruction(ranch_name: String)]
pub struct InitializeRanch<'info> {
    #[account(
        init,
        payer = owner,
        space = 8 + 32 + 4 + 32 + 1 + 8 + 8 + 1 + 1 + 8, // Adjusted space for 'owner: Pubkey'
        // USER ADDS SEEDS AND BUMP HERE IN L6S3
        // seeds = [b"ranch", owner.key().as_ref()],
        // bump
    )]
    pub ranch: Account<'info, Ranch>,

    #[account(mut)]
    pub owner: Signer<'info>,
    pub system_program: Program<'info, System>,
}

#[account]
pub struct Ranch {
    pub owner: Pubkey, // This line is added in L6S1
    pub ranch_coin_balance: u64,
    pub building_count: u8,
    pub character_count: u8,
    pub created_at: i64,
    pub name: String,
    pub level: u8,
    pub experience: u64,
}

impl Ranch {
    const INIT_SPACE: usize = 32 + 4 + 32 + 1 + 8 + 8 + 1 + 1 + 8; // Updated for Pubkey (32 bytes)
}

#[error_code]
pub enum ErrorCode {
    #[msg("Unauthorized access to ranch")]
    UnauthorizedAccess,
}
`,
        };

        export const pythonTemplates = {
          default: `import seahorse.prelude.*

declare_id('YourProgramID')

@instruction
def initialize(payer: Signer):
    """Initialize a new program"""
    # --- Your code goes here! ---
    # Example: print("Hello World!")
    # ----------------------------
    pass # Keep this line unless you replace it with actual code
`,
          // Ethos Lesson Templates (Non-coding)
          ethos_lesson0_1: `# Code for freedom, not control.\n# Welcome to the digital frontier.\n\n# History shows that control leads to oppression.\n# Our fight is for a decentralized future.\n`,
          ethos_lesson0_2: `# Privacy is power.\n# Cryptography is the shield.\n\n# Cypherpunks write code.\n# We are going to write it.\n`,
          ethos_lesson1_1: `# A Cypherpunk's Manifesto\n# by Eric Hughes\n\n# Privacy is necessary for an open society in the electronic age.\n# We cannot expect governments, corporations... to grant us privacy.\n`,
          ethos_lesson1_2: `# The Crypto Anarchist Manifesto\n# by Timothy C. May\n\n# Fully anonymous, untraceable transactions.\n# Strong cryptography will forever alter the nature of governments.\n`,
          ethos_lesson2_1: `# The Fiat Chains\n# 2008: A crisis of centralization.\n\n# Money supply controlled by a few.\n# Censorship, inflation, and lack of true ownership.\n`,
          ethos_lesson2_2: `# Bitcoin Whitepaper (Excerpt)\n# A Peer-to-Peer Electronic Cash System\n\n# "A purely peer-to-peer version of electronic cash would allow online payments\n# to be sent directly from one party to another without going through a financial institution."\n`,
          ethos_lesson2_3: `# The Blockchain\n# Immutability and Transparency.\n\n# "The network timestamps transactions by hashing them into an ongoing chain of hash-based\n# proof-of-work, forming a record that cannot be changed without redoing the proof-of-work."\n`,
          ethos_lesson3_1: `# Ethereum & Smart Contracts\n# Code is law, self-enforcing.\n\n# "A smart contract is a computer protocol intended to digitally facilitate, verify,\n# or enforce the negotiation or performance of a contract."\n`,
          ethos_lesson3_2: `# DeFi & NFTs: Promises and Perils\n# Innovation vs. Centralization's creeping threat.\n\n# Decentralized Finance aims to recreate traditional financial systems without intermediaries.\n# NFTs provide unique digital ownership.\n`,
          ethos_lesson3_3: `# The Path Forward\n# Realigning with the Ethos.\n\n# Question centralization.\n# Champion privacy.\n# Build for liberty.\n`,

          // Solana Programming Templates
          ranch_management_initial: `import seahorse.prelude.*

declare_id('RanchManager111111111111111111111111111111')

class Ranch(Account):
    # USER ADDS OWNER: PUBKEY HERE IN L6S1
    ranch_coin_balance: u64
    building_count: u8
    character_count: u8
    created_at: i64
    name: str
    level: u8
    experience: u64

@instruction
def initialize_ranch(
    ranch: Empty[Ranch],
    owner: Signer,
    ranch_name: str
):
    """Initialize a new ranch"""
    ranch = ranch.init(
        payer=owner,
        space=8 + 32 + 32 + 1 + 8 + 8 + 1 + 1 + 8, // Adjust space
        # USER ADDS SEEDS AND BUMP HERE IN L6S3
        # seeds=['ranch', owner],
        # bump
    )

    # TODO: Assign owner field here in a later step (L6S2)
    ranch.name = ranch_name
    ranch.level = 1
    ranch.experience = 0
    ranch.ranch_coin_balance = 500
    ranch.building_count = 0
    ranch.character_count = 0
    ranch.created_at = Clock.unix_timestamp()

    print(f"Ranch '{ranch_name}' initialized for owner {owner.key()}")
`,
          ranch_management_step1_complete: `import seahorse.prelude.*

declare_id('RanchManager111111111111111111111111111111')

class Ranch(Account):
    owner: Pubkey # This line is added in L6S1
    ranch_coin_balance: u64
    building_count: u8
    character_count: u8
    created_at: i64
    name: str
    level: u8
    experience: u64

@instruction
def initialize_ranch(
    ranch: Empty[Ranch],
    owner: Signer,
    ranch_name: str
):
    """Initialize a new ranch"""
    ranch = ranch.init(
        payer=owner,
        space=8 + 32 + 32 + 1 + 8 + 8 + 1 + 1 + 8, // Adjusted space
        # USER ADDS SEEDS AND BUMP HERE IN L6S3
        # seeds=['ranch', owner],
        // bump
    )

    ranch.owner = owner.key() // This line is added in L6S2
    ranch.name = ranch_name
    ranch.level = 1
    ranch.experience = 0
    ranch.ranch_coin_balance = 500
    ranch.building_count = 0
    ranch.character_count = 0
    ranch.created_at = Clock.unix_timestamp()

    print(f"Ranch '{ranch_name}' initialized for owner {owner.key()}")
`,
        };
        ```

**Phase 2: Add `react-player` Dependency & Necessary Files for Core Components**

1.  **Add `react-player` to `package.json`:**
    * **File:** `package.json` (root level)
    * **Action:** Add `react-player` to your `dependencies`.
    * **Implementation:**
        ```json
        {
          "dependencies": {
            // ... existing dependencies ...
            "react-player": "^2.16.0", // Add this line
            // ...
          }
        }
        ```

2.  **Create `client/src/components/game/ChallengeReward.tsx`:**
    * **File:** `client/src/components/game/ChallengeReward.tsx` (new file)
    * **Action:** Create the component for the full-screen reward animation.
    * **Implementation:**
        ```typescript
        // client/src/components/game/ChallengeReward.tsx - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
        'use client';
        import React, { useEffect, useState } from 'react';
        import { motion, AnimatePresence } from 'framer-motion';
        import { cn } from '@/lib/utils';

        interface ChallengeRewardProps {
          isVisible: boolean;
          nftImageUrl: string | null;
        }

        export const ChallengeReward: React.FC<ChallengeRewardProps> = ({ isVisible, nftImageUrl }) => {
          const [showContent, setShowContent] = useState(false);

          useEffect(() => {
            if (isVisible) {
              setShowContent(true);
              const timer = setTimeout(() => {
                setShowContent(false);
              }, 3500); // Display for 3.5 seconds
              return () => clearTimeout(timer);
            }
          }, [isVisible]);

          return (
            <AnimatePresence>
              {showContent && isVisible && (
                <motion.div
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  exit={{ opacity: 0 }}
                  transition={{ duration: 0.3 }}
                  className="fixed inset-0 z-[100] flex flex-col items-center justify-center pointer-events-none
                             bg-black/70 backdrop-blur-sm px-4 py-8"
                >
                  <motion.h1
                    initial={{ opacity: 0, scale: 0.5 }}
                    animate={{ opacity: 1, scale: 1 }}
                    exit={{ opacity: 0, scale: 0.5 }}
                    transition={{ duration: 0.5, ease: "easeOut" }}
                    className="text-8xl md:text-9xl font-titulo text-tech-cyan text-shadow-matrix mb-8 md:mb-12"
                  >
                    CORRECT
                  </motion.h1>

                  {nftImageUrl && (
                    <motion.div
                      initial={{ opacity: 0, y: 50, scale: 0.7 }}
                      animate={{ opacity: 1, y: 0, scale: 1 }}
                      exit={{ opacity: 0, y: -50, scale: 0.7 }}
                      transition={{ delay: 0.2, duration: 0.5, ease: "easeOut" }}
                      className="relative w-48 h-48 md:w-64 md:h-64 flex items-center justify-center p-4 rounded-xl shadow-lg glow-tech-cyan
                                 bg-gradient-to-br from-tech-purple/20 to-tech-pink/20 border-2 border-tech-cyan"
                    >
                      <img
                        src={nftImageUrl}
                        alt="Reward NFT"
                        className="w-full h-full object-contain rounded-md"
                        onError={(e) => { e.currentTarget.src = '[https://placehold.co/256x256/3a3340/99cccc?text=NFT+Error](https://placehold.co/256x256/3a3340/99cccc?text=NFT+Error)'; }}
                      />
                       <span className="absolute bottom-2 text-tech-cyan font-tech text-sm">Reward Unlocked!</span>
                    </motion.div>
                  )}
                </motion.div>
              )}
            </AnimatePresence>
          );
        };
        ```

3.  **Create `client/src/components/lessons/HintCharacter.tsx`:**
    * **File:** `client/src/components/lessons/HintCharacter.tsx` (new file)
    * **Action:** Create the component for character-based pop-up hints.
    * **Implementation:**
        ```typescript
        // client/src/components/lessons/HintCharacter.tsx - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
        'use client';
        import React, { useState, useEffect, forwardRef, useImperativeHandle } from 'react';
        import { motion, AnimatePresence } from 'framer-motion';
        import { cn } from '@/lib/utils';

        interface HintCharacterProps {
          characterImage?: string;
        }

        export interface HintCharacterRef {
          showHint: (message: string) => void;
        }

        export const HintCharacter = forwardRef<HintCharacterRef, HintCharacterProps>(
          ({ characterImage = '/assets/images/scientist-character.png' }, ref) => {
            const [isVisible, setIsVisible] = useState(false);
            const [message, setMessage] = useState('');
            const [timeoutId, setTimeoutId] = useState<NodeJS.Timeout | null>(null);

            useImperativeHandle(ref, () => ({
              showHint: (msg: string) => {
                if (timeoutId) clearTimeout(timeoutId); // Clear any existing hint
                setMessage(msg);
                setIsVisible(true);
                const id = setTimeout(() => {
                  setIsVisible(false);
                  setMessage('');
                }, 7000); // Hint displayed for 7 seconds
                setTimeoutId(id);
              },
            }));

            // Preload image
            useEffect(() => {
              const img = new Image();
              img.src = characterImage;
            }, [characterImage]);

            return (
              <AnimatePresence>
                {isVisible && (
                  <motion.div
                    initial={{ opacity: 0, x: -100 }}
                    animate={{ opacity: 1, x: 0 }}
                    exit={{ opacity: 0, x: -100 }}
                    transition={{ type: "spring", stiffness: 100, damping: 15 }}
                    className="fixed bottom-4 left-4 z-[90] flex items-end space-x-4 pointer-events-auto"
                  >
                    <motion.img
                      src={characterImage}
                      alt="AI Assistant"
                      className="w-28 h-28 object-contain"
                      initial={{ rotate: 0 }}
                      animate={{ rotate: [0, -5, 5, -5, 0] }} // Subtle idle animation
                      transition={{ repeat: Infinity, duration: 5, ease: "easeInOut" }}
                    />
                    <motion.div
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: 20 }}
                      transition={{ delay: 0.2, type: "spring", stiffness: 100, damping: 15 }}
                      className="relative bg-tech-cyan rounded-xl p-4 text-background font-tech text-base max-w-sm shadow-lg
                                 before:absolute before:bottom-0 before:left-[10px] before:w-0 before:h-0
                                 before:border-x-[15px] before:border-t-[15px] before:border-solid before:border-transparent
                                 before:border-t-tech-cyan before:transform before:translate-y-full"
                    >
                      {message}
                    </motion.div>
                  </motion.div>
                )}
              </AnimatePresence>
            );
          }
        );
        HintCharacter.displayName = 'HintCharacter';
        ```

**Phase 3: Update Main Application Components to Use New Components & Logic**

1.  **Completely REPLACE `client/src/App.tsx` Content:**
    * **File:** `client/src/App.tsx`
    * **Action:** Ensure correct imports and global rendering of `ChallengeReward`.
    * **Implementation:**
        ```typescript
        // client/src/App.tsx - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
        import { Switch, Route } from "wouter";
        import { queryClient } from "./lib/queryClient";
        import { QueryClientProvider } from "@tanstack/react-query";
        import { Toaster } from "@/components/ui/toaster";
        import { TooltipProvider } from "@/components/ui/tooltip";
        import { MainLayout } from "@/components/layout/MainLayout";
        import { HomePage } from "@/pages/HomePage";
        import { LessonsPage } from "@/pages/LessonsPage";
        import { LessonDetailPage } from "@/pages/LessonDetailPage";
        import { RanchPage } from "@/pages/RanchPage";
        import { PlaygroundPage } from "@/pages/PlaygroundPage";
        import NotFound from "@/pages/not-found";
        import { ChallengeReward } from "@/components/game/ChallengeReward";
        import { useGameStore } from "@/hooks/use-game-store";

        import './firebase-init'; // Ensure Firebase is initialized

        function Router() {
          return (
            <Switch>
              <Route path="/" component={HomePage} />
              <Route path="/lessons" component={LessonsPage} />
              <Route path="/lessons/:id">
                {(params) => <LessonDetailPage lessonId={parseInt(params.id)} />}
              </Route>
              <Route path="/ranch" component={RanchPage} />
              <Route path="/playground" component={PlaygroundPage} />
              <Route component={NotFound} />
            </Switch>
          );
        }

        function App() {
          const { showChallengeReward, currentRewardNftUrl } = useGameStore();

          return (
            <QueryClientProvider client={queryClient}>
              <TooltipProvider>
                <MainLayout>
                  <Toaster />
                  <Router />
                  <ChallengeReward
                    isVisible={showChallengeReward}
                    nftImageUrl={currentRewardNftUrl}
                  />
                </MainLayout>
              </TooltipProvider>
            </QueryClientProvider>
          );
        }

        export default App;
        ```

2.  **Completely REPLACE `client/src/pages/LessonDetailPage.tsx` Content:**
    * **File:** `client/src/pages/LessonDetailPage.tsx`
    * **Action:** Update `LessonDetailPage` to handle ethos lessons (non-coding, quiz, video), display hints, and manage progression.
    * **Implementation:**
        ```typescript
        // client/src/pages/LessonDetailPage.tsx - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
        import { useState, useEffect, useRef } from 'react';
        import { Link, useLocation } from 'wouter';
        import { lessons, type LessonData, LessonStep } from '@/data/lessons';
        import { rustTemplates, pythonTemplates } from '@/data/code-templates';
        import { useLessonStore } from '@/hooks/use-lesson-store';
        import { useGameStore } from '@/hooks/use-game-store';
        import { LessonLayout } from '@/components/lessons/LessonLayout';
        import { NarrativeBox } from '@/components/lessons/NarrativeBox';
        import { MonacoEditor } from '@/components/editor/MonacoEditor';
        import { LanguageSelector } from '@/components/editor/LanguageSelector';
        import { CodeValidator } from '@/components/editor/CodeValidator';
        import { TechButton } from '@/components/ui/TechButton'; // Use TechButton
        import { TechCard } from '@/components/ui/TechCard'; // Use TechCard
        import { CardContent, CardHeader, CardTitle } from '@/components/ui/card'; // Keep base Card elements
        import { Badge } from '@/components/ui/badge';
        import { Progress } from '@/components/ui/progress';
        import { HintCharacter, HintCharacterRef } from '@/components/lessons/HintCharacter'; // NEW HintCharacter import
        import { Input } from '@/components/ui/input'; // For quiz text input
        import ReactPlayer from 'react-player/youtube'; // NEW: For YouTube videos

        import {
          Clock,
          Code,
          Trophy,
          Target,
          CheckCircle,
          Zap,
          Coins,
          Lightbulb, // For Hint button
          Terminal, // Ensure Terminal icon is imported
          ChevronLeft, // For navigation buttons
          ChevronRight, // For navigation buttons
        } from 'lucide-react';
        import { cn } from '@/lib/utils';


        interface LessonDetailPageProps {
          lessonId: number;
        }

        export function LessonDetailPage({ lessonId }: LessonDetailPageProps) {
          const [, setLocation] = useLocation();
          const [language, setLanguage] = useState<'rust' | 'python'>('rust');
          const [code, setCode] = useState('');
          const [isValidating, setIsValidating] = useState(false);
          const [startTime] = useState(Date.now());
          const [attempts, setAttempts] = useState(0);
          const [consoleOutput, setConsoleOutput] = useState("Awaiting your command, recruit...");
          const [consoleOutputColor, setConsoleOutputColor] = useState("text-gray-500");
          const [currentStep, setCurrentStep] = useState(1); // NEW: Step tracking
          const [quizAnswer, setQuizAnswer] = useState(''); // NEW: State for quiz input


          const {
            completeLesson,
            updateLessonAttempt,
            getLessonProgress,
            isLessonUnlocked,
            userId: lessonStoreUserId,
            currentLesson: currentLessonFromStore, // Get currentLesson from store
            isStoreReady: isLessonStoreReady,
          } = useLessonStore();

          const {
            earnRanchCoin,
            addExperience,
            triggerChallengeReward,
            addRewardNft,
            userId: gameStoreUserId,
            isStoreReady: isGameStoreReady,
            triggerNetworkPingAnimation,
            triggerSparkleAnimation,
            triggerCoinFallAnimation,
            setLastStoredMessage,
            triggerTransactionAnimation,
            triggerDataStreamAnimation,
          } = useGameStore();

          const hintCharacterRef = useRef<HintCharacterRef>(null);

          const lesson = lessons.find(l => l.id === lessonId);
          const lessonProgress = getLessonProgress(lessonId);
          const unlocked = isLessonUnlocked(lessonId);

          const currentStepData: LessonStep | undefined = lesson?.content.steps[currentStep - 1];
          const totalStepsInCurrentLesson = lesson?.content.steps.length || 0;
          const isLastStepOfCurrentLesson = currentStep === totalStepsInCurrentLesson;
          const hasNextLessonContent = lessonId < lessons.length;

          const canGoToNextStep = currentStep < totalStepsInCurrentLesson;
          const canGoToNextLesson = isLastStepOfCurrentLesson && hasNextLessonContent && isLessonUnlocked(lessonId + 1);

          const nextButtonText = canGoToNextStep ? "Next Step" : (canGoToNextLesson ? "Next Lesson" : "Complete Lesson"); // Updated text
          const nextButtonDisabled = !canGoToNextStep && !canGoToNextLesson && isLastStepOfCurrentLesson;

          // Effect to load initial code template and trigger initial hint
          useEffect(() => {
            if (!lesson || !unlocked || !currentStepData) {
              if (isLessonStoreReady && isGameStoreReady) {
                  // Only redirect if lesson not found, locked, or initial setup is weird.
                  // For persistence, currentLesson from store should dictate starting step.
                  if (lessonId === currentLessonFromStore) { // Check if we are on the 'current' lesson from store
                      const progressForThisLesson = getLessonProgress(lessonId);
                      if (progressForThisLesson) {
                        const lastCompletedStep = progressForThisLesson.completed ? totalStepsInCurrentLesson : progressForThisLesson.attempts;
                        setCurrentStep(lastCompletedStep + 1 > totalStepsInCurrentLesson ? totalStepsInCurrentLesson : lastCompletedStep + 1);
                      } else {
                        setCurrentStep(1); // No progress for this lesson, start at step 1
                      }
                  } else if (lessonId < currentLessonFromStore) {
                      // If user is accessing an already completed lesson, default to last step for review
                      setCurrentStep(totalStepsInCurrentLesson);
                  } else {
                      // Lesson is locked
                      setLocation('/lessons');
                  }
              }
              return;
            }

            const template = language === 'rust'
              ? rustTemplates[currentStepData.initialCodeTemplateKey as keyof typeof rustTemplates] || rustTemplates.default
              : pythonTemplates[currentStepData.initialCodeTemplateKey as keyof typeof pythonTemplates] || pythonTemplates.default;
            setCode(template);

            if (currentStepData.hintMessage) {
              hintCharacterRef.current?.showHint(currentStepData.hintMessage);
            }

            setConsoleOutput("Awaiting your command, recruit...");
            setConsoleOutputColor("text-gray-500");
            setQuizAnswer(''); // Clear quiz answer on step change

          }, [lesson, unlocked, setLocation, language, lessonId, currentStep, currentStepData, isLessonStoreReady, isGameStoreReady, currentLessonFromStore, getLessonProgress, totalStepsInCurrentLesson, lessonProgress]);


          // Handle loading state while stores initialize or lesson is not found/unlocked
          if (!isLessonStoreReady || !isGameStoreReady || !lesson || !unlocked) {
            return (
              <div className="min-h-screen flex items-center justify-center text-tech-cyan">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-tech-cyan"></div>
                <span className="ml-4 font-tech">Loading Lesson...</span>
              </div>
            );
          }


          const handleValidate = async () => {
            if (!currentStepData) return;

            setIsValidating(true);
            setAttempts(prev => prev + 1); // Increment attempts for both coding and narrative

            try {
              const response = await fetch('/api/compile', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                  code: code, // Send code even for narrative, though it might be empty
                  language: language,
                  lessonId: lesson.id,
                  currentStep: currentStepData.id,
                  userAnswer: quizAnswer, // Pass quiz answer to backend
                }),
              });
              const data = await response.json();

              if (data.success && data.challenge_success) {
                setConsoleOutput(data.result.console_output);
                setConsoleOutputColor("text-green-400");
                setQuizAnswer(''); // Clear quiz answer on success

                // Trigger visual effect
                switch (currentStepData.visualEffectTrigger) {
                    case 'networkPing': triggerNetworkPingAnimation(); break;
                    case 'sparkle': triggerSparkleAnimation(); break;
                    case 'coinFall': triggerCoinFallAnimation(); break;
                    case 'messageBoard': setLastStoredMessage(data.result.messageStored); break;
                    case 'transaction': triggerTransactionAnimation(); break;
                    case 'dataStream': triggerDataStreamAnimation(); break;
                    case 'blueprint': triggerSparkleAnimation(); break; // Blueprint uses sparkle for now
                    // NEW: Ethos specific visual triggers (just log for now, actual PIXI.js implementation in GameCanvas)
                    case 'dystopianCity': console.log('Visual: Dystopian City'); break;
                    case 'cypherpunkSymbol': console.log('Visual: Cypherpunk Symbol'); break;
                    case 'codeShield': console.log('Visual: Code Shield'); break;
                    case 'digitalGhost': console.log('Visual: Digital Ghost'); break;
                    case 'bankBreaking': console.log('Visual: Bank Breaking'); break;
                    case 'decentralizedNodes': console.log('Visual: Decentralized Nodes'); break;
                    case 'blockchainBlocks': console.log('Visual: Blockchain Blocks'); break;
                    case 'smartContractGears': console.log('Visual: Smart Contract Gears'); break;
                    case 'digitalMarketplace': console.log('Visual: Digital Marketplace'); break;
                    case 'glowingPath': console.log('Visual: Glowing Path'); break;
                }

                // Trigger challenge reward (NFT) on success (only for coding challenges for now or specific ethos steps)
                if (currentStepData.isCodingChallenge || (lessonId >= 1 && lessonId <= 4 && isLastStepOfCurrentLesson)) { // Reward for completing a full ethos module
                    const rewardImageUrl = '/assets/images/brb-nft-ai-robot.png';
                    const rewardName = `Lesson ${lessonId} Completion Badge`;
                    // Ensure userId is valid before adding reward
                    if (lessonStoreUserId) {
                      await addRewardNft({
                        userId: lessonStoreUserId,
                        lessonId: lessonId,
                        nftImageUrl: rewardImageUrl,
                        rewardName: rewardName,
                      });
                    }
                    triggerChallengeReward(rewardImageUrl);
                }


                const feedbackTimeout = setTimeout(async () => { // Use async for await completeLesson
                    // Update user's progress for this specific step in Firestore
                    await updateLessonAttempt(lessonId, Math.floor((Date.now() - startTime) / 1000)); // update attempts for the step

                    if (canGoToNextStep) {
                        setCurrentStep(prev => prev + 1);
                    } else if (canGoToNextLesson) {
                        await completeLesson(lessonId, 100, Math.floor((Date.now() - startTime) / 1000)); // Mark lesson complete
                        setLocation(`/lessons/${lessonId + 1}`);
                    } else {
                        await completeLesson(lessonId, 100, Math.floor((Date.now() - startTime) / 1000)); // Mark lesson complete
                        setLocation('/lessons'); // Last lesson, last step
                    }
                }, 1500);
                return () => clearTimeout(feedbackTimeout);
              } else if (data.success && !data.challenge_success) {
                setConsoleOutput(`Verification Failed: ${data.result.console_output}`);
                setConsoleOutputColor("text-red-400");
                toast({ title: "Challenge Failed", description: data.result.console_output, variant: "destructive" });
              } else {
                const errorMessage = data.error || "Unknown compilation error.";
                const detailedErrors = data.result?.errors ? '\n' + data.result.errors.join('\n') : '';
                setConsoleOutput(`Error: ${errorMessage}${detailedErrors}`);
                setConsoleOutputColor("text-red-400");
                toast({ title: "Execution Failed", description: errorMessage, variant: "destructive" });
              }
            } catch (error) {
              setConsoleOutput(`API call failed: ${error instanceof Error ? error.message : String(error)}`);
              setConsoleOutputColor("text-red-400");
              toast({ title: "Network Error", description: "Failed to connect to backend.", variant: "destructive" });
            } finally {
              setIsValidating(false);
            }
          };

          const handlePrevious = () => {
            if (currentStep > 1) {
              setCurrentStep(prev => prev - 1);
            } else if (lessonId > 1) {
              setLocation(`/lessons/${lessonId - 1}`);
            } else {
              setLocation('/lessons');
            }
          };

          const handleNext = () => {
            if (canGoToNextStep) {
              setCurrentStep(prev => prev + 1);
            } else if (canGoToNextLesson) {
              setLocation(`/lessons/${lessonId + 1}`);
            } else {
              handleValidate(); // Call validate to complete lesson if it's the very last step.
            }
          };

          // Render only if lesson and step data are available
          if (!lesson || !currentStepData) {
            return (
              <div className="min-h-screen flex items-center justify-center text-tech-cyan">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-tech-cyan"></div>
                <span className="ml-4 font-tech">Loading Lesson Data...</span>
              </div>
            );
          }

          return (
            <LessonLayout
              lessonId={lessonId}
              title={`Chapter ${lesson.chapter}: ${lesson.title}`}
              description={`Step ${currentStepData.id} of ${totalStepsInCurrentLesson}: ${currentStepData.title}`}
              onPrevious={handlePrevious}
              onNext={handleNext}
              hasPrevious={currentStep > 1 || lessonId > 1}
              hasNext={!nextButtonDisabled}
              nextButtonText={nextButtonText}
            >
              <div className="py-8 px-4">
                <div className="container mx-auto">
                  <div className="grid grid-cols-1 xl:grid-cols-5 gap-8">
                    {/* Main Content */}
                    <div className="xl:col-span-3 space-y-8">
                      {/* Lesson Narrative & Quiz */}
                      <NarrativeBox
                        title={`Step ${currentStepData.id} of ${totalStepsInCurrentLesson}: ${currentStepData.title}`}
                        variant="story"
                        characterEmoji="⚡" // Use tech emoji
                      >
                        {currentStepData.videoUrl && (
                            <div className="mb-4 aspect-video w-full rounded-lg overflow-hidden">
                                <ReactPlayer
                                    url={currentStepData.videoUrl}
                                    controls={true}
                                    playing={false} // Autoplay might be too aggressive, let user control
                                    muted={false} // Not muted by default
                                    width="100%"
                                    height="100%"
                                    config={{
                                        youtube: {
                                            playerVars: {
                                                autoplay: 0, // Ensure not autoplaying by default in final version
                                                modestbranding: 1,
                                                rel: 0,
                                            },
                                        },
                                    }}
                                />
                            </div>
                        )}
                        <p className="whitespace-pre-wrap font-code text-tech-cyan text-base">
                            {currentStepData.challenge}
                        </p>

                        {currentStepData.quiz && (
                          <div className="space-y-4 mt-6 p-4 border border-tech-purple/30 rounded-lg bg-background/50">
                            <p className="font-tech text-tech-pink text-md">
                              **Question:** {currentStepData.quiz.question}
                            </p>
                            {currentStepData.quiz.type === 'text-input' && (
                              <Input
                                type="text"
                                value={quizAnswer}
                                onChange={(e) => setQuizAnswer(e.target.value)}
                                placeholder="Type your answer here..."
                                className="w-full tech-input bg-background/80 border-tech-cyan text-foreground focus:ring-tech-cyan"
                              />
                            )}
                            {(currentStepData.quiz.type === 'multiple-choice' || currentStepData.quiz.type === 'true-false') && (
                              <div className="flex flex-col space-y-2">
                                {currentStepData.quiz.options?.map((option, index) => (
                                  <TechButton
                                    key={index}
                                    variant={quizAnswer === option ? 'secondary' : 'outline'}
                                    onClick={() => setQuizAnswer(option)}
                                    className="w-full justify-start text-left"
                                  >
                                    {option}
                                  </TechButton>
                                ))}
                              </div>
                            )}
                          </div>
                        )}

                        {/* Button for narrative/quiz challenges */}
                        {!currentStepData.isCodingChallenge && (
                            <div className="text-center mt-6">
                              <TechButton
                                variant="primary"
                                glow
                                onClick={handleValidate}
                                className="text-lg px-8 py-4"
                              >
                                <CheckCircle className="w-5 h-5 mr-2" />
                                Confirm Understanding
                              </TechButton>
                            </div>
                        )}
                      </NarrativeBox>

                      {/* Code Editor (only for coding challenges) */}
                      {currentStepData.isCodingChallenge && (
                        <>
                          <LanguageSelector
                            selectedLanguage={language}
                            onLanguageChange={setLanguage}
                          />
                          <TechCard variant="default" className="overflow-hidden">
                            <MonacoEditor
                              value={code}
                              onChange={setCode}
                              language={language}
                              height={700}
                              onRun={handleValidate}
                              onValidate={handleValidate}
                              isReadOnly={!currentStepData.isCodingChallenge}
                            />
                          </TechCard>
                          <CodeValidator
                            code={code}
                            language={language}
                            isValidating={isValidating}
                          />
                        </>
                      )}

                      {/* Output Console */}
                      <TechCard variant="purple" className="p-6">
                        <CardHeader className="pb-4">
                          <CardTitle className="font-tech text-tech-purple flex items-center space-x-2">
                            <Terminal className="w-6 h-6" />
                            <span>Console Output</span>
                          </CardTitle>
                        </CardHeader>
                        <CardContent>
                          <div className={cn("bg-black/50 rounded-lg p-4 font-mono text-sm min-h-32 whitespace-pre-wrap", consoleOutputColor)}>
                            {consoleOutput}
                          </div>
                        </CardContent>
                      </TechCard>
                    </div>

                    {/* Sidebar */}
                    <div className="xl:col-span-2 space-y-6">
                      {/* Lesson Info */}
                      <TechCard variant="pink" className="p-6">
                        <CardHeader className="pb-4">
                          <CardTitle className="font-tech text-tech-pink flex items-center space-x-2">
                            <span>📚</span>
                            <span>Module Info</span>
                          </CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                          <div className="grid grid-cols-2 gap-4">
                            <div className="text-center p-3 bg-slate-800/50 rounded-lg">
                              <Clock className="w-5 h-5 text-tech-cyan mx-auto mb-1" />
                              <div className="text-sm font-bold text-tech-cyan">{lesson.estimatedTime}m</div>
                              <div className="text-xs text-muted-foreground">Duration</div>
                            </div>
                            <div className="text-center p-3 bg-slate-800/50 rounded-lg">
                              <Target className="w-5 h-5 text-tech-purple mx-auto mb-1" />
                              <div className="text-sm font-bold text-tech-purple capitalize">{lesson.difficulty}</div>
                              <div className="text-xs text-muted-foreground">Difficulty</div>
                            </div>
                          </div>

                          {lesson.isPremium && (
                            <Badge className="w-full justify-center bg-yellow-500/20 text-yellow-400 border-yellow-500/30">
                              👑 Premium Module
                            </Badge>
                          )}

                          <div className="space-y-2">
                            <h4 className="font-tech text-tech-pink">Rewards</h4>
                            <div className="space-y-1 text-sm">
                              <div className="flex items-center justify-between">
                                <span className="flex items-center space-x-1">
                                  <Coins className="w-4 h-4 text-tech-cyan" />
                                  <span>DevCoin</span>
                                </span>
                                <span className="text-tech-cyan font-bold">
                                  +{lesson.isPremium ? 200 : 100}
                                </span>
                              </div>
                              <div className="flex items-center justify-between">
                                <span className="flex items-center space-x-1">
                                  <Zap className="w-4 h-4 text-tech-purple" />
                                  <span>Experience</span>
                                </span>
                                <span className="text-tech-purple font-bold">
                                  +{lesson.isPremium ? 150 : 100}
                                </span>
                              </div>
                              <div className="flex items-center justify-between">
                                <span className="flex items-center space-x-1">
                                  <Trophy className="w-4 h-4 text-tech-pink" />
                                  <span>NFT Badge</span>
                                </span>
                                <span className="text-tech-pink font-bold">✓</span>
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </TechCard>

                      {/* Game Canvas */}
                      <TechCard variant="default" className="p-4">
                        <CardHeader className="pb-3">
                          <CardTitle className="font-tech text-tech-cyan text-lg">
                            🏠 Your Cypher-Ranch
                          </CardTitle>
                        </CardHeader>
                        <CardContent>
                          <GameCanvas
                            width={300}
                            height={200}
                            className="w-full"
                            networkPingActive={networkPingActive}
                            sparkleActive={sparkleActive}
                            coinFallActive={coinFallActive}
                            lastStoredMessage={lastStoredMessage}
                            transactionActive={transactionActive}
                            dataStreamActive={dataStreamActive}
                          />
                        </CardContent>
                      </TechCard>

                      {/* Session Stats */}
                      <TechCard variant="purple" className="p-6">
                        <CardHeader className="pb-4">
                          <CardTitle className="font-tech text-tech-purple flex items-center space-x-2">
                            <span>📊</span>
                            <span>Session Stats</span>
                          </CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                          <div className="space-y-3">
                            <div className="flex justify-between">
                              <span className="text-sm text-muted-foreground">Attempts</span>
                              <span className="font-bold text-tech-purple">{attempts}</span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-sm text-muted-foreground">Time Spent</span>
                              <span className="font-bold text-tech-purple">
                                {Math.floor((Date.now() - startTime) / 60000)}m
                              </span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-sm text-muted-foreground">Language</span>
                              <span className="font-bold text-tech-purple capitalize">
                                {language === 'rust' ? 'Rust/Anchor' : 'Python/Seahorse'}
                              </span>
                            </div>
                          </div>

                          {lessonProgress && (
                            <div className="pt-3 border-t border-tech-purple/30">
                              <div className="flex justify-between mb-2">
                                <span className="text-sm text-muted-foreground">Best Score</span>
                                <span className="font-bold text-green-400">{lessonProgress.score}%</span>
                              </div>
                              <Progress value={lessonProgress.score} className="h-2" />
                            </div>
                          )}
                        </CardContent>
                      </TechCard>

                      {/* Quick Actions */}
                      <div className="space-y-3">
                        <Link href="/lessons">
                          <TechButton variant="outline" className="w-full">
                            📚 All Modules
                          </TechButton>
                        </Link>
                        <Link href="/playground">
                          <TechButton variant="secondary" className="w-full">
                            🛠️ Open Playground
                          </TechButton>
                        </Link>
                        <Link href="/ranch">
                          <TechButton variant="primary" className="w-full">
                            🏡 Visit Cypher-Ranch
                          </TechButton>
                        </Link>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <HintCharacter ref={hintCharacterRef} characterImage="/assets/images/scientist-character.png" />
            </LessonLayout>
          );
        }
        ```

3.  **Completely REPLACE `client/src/components/layout/MainLayout.tsx` Content:**
    * **File:** `client/src/components/layout/MainLayout.tsx`
    * **Action:** Ensure correct flexbox layout for sticky footer and Firebase auth.
    * **Implementation:**
        ```typescript
        // client/src/components/layout/MainLayout.tsx - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
        import React, { ReactNode, useEffect, useState } from 'react';
        import { cn } from '@/lib/utils';
        import { useTheme } from 'next-themes'; // For dark/light mode
        import { Button } from '@/components/ui/button'; // Base button for theme toggle
        import { Moon, Sun } from 'lucide-react'; // Icons for theme toggle
        import { auth, db, appId, initialAuthToken } from '../firebase-init'; // Import from centralized init
        import { signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth'; // Specific auth imports
        import { doc, setDoc } from 'firebase/firestore'; // Firestore doc/setDoc for user profile

        interface MainLayoutProps {
          children: ReactNode;
          className?: string;
        }

        export function MainLayout({ children, className }: MainLayoutProps) {
          const [mounted, setMounted] = useState(false);
          const { theme, setTheme } = useTheme();
          const [isAuthReady, setIsAuthReady] = useState(false); // Auth state for rendering children

          // Particle animation state (re-used for tech theme)
          const [particles, setParticles] = useState<any[]>([]);

          useEffect(() => {
            setMounted(true);

            // Initialize Firebase Auth & DB (should already be done by firebase-init.ts)
            // Just need to set up auth state listener here.
            const unsubscribeAuth = onAuthStateChanged(auth, async (user) => {
              if (user) {
                // User is signed in. Ensure their basic profile exists in Firestore.
                const userProfileRef = doc(db, `artifacts/${appId}/users/${user.uid}/profile/data`);
                const userProfileSnap = await getDoc(userProfileRef); // Assuming getDoc is imported/available

                if (!userProfileSnap.exists()) {
                  // Create a basic profile if it doesn't exist
                  await setDoc(userProfileRef, {
                    userId: user.uid,
                    createdAt: new Date(),
                    lastLogin: new Date(),
                    // Default profile data:
                    username: `Player-${user.uid.slice(0, 6)}`,
                    walletAddress: "N/A", // Will be updated by wallet connect
                    pfpUrl: "[https://placehold.co/100x100/553c9a/c4b5fd?text=PFP](https://placehold.co/100x100/553c9a/c4b5fd?text=PFP)", // Default PFP
                  }, { merge: true });
                } else {
                  // Update last login
                  await setDoc(userProfileRef, { lastLogin: new Date() }, { merge: true });
                }
              } else {
                // No user signed in, attempt anonymous sign-in or use custom token
                if (initialAuthToken) {
                  try {
                    await signInWithCustomToken(auth, initialAuthToken);
                  } catch (error) {
                    console.error("Error signing in with custom token:", error);
                    await signInAnonymously(auth); // Fallback
                  }
                } else {
                  await signInAnonymously(auth);
                }
              }
              setIsAuthReady(true); // Auth state is now determined
            });

            // Particle effect initialization
            const newParticles = Array.from({ length: 50 }, () => ({
              id: Math.random(),
              x: Math.random() * window.innerWidth,
              y: Math.random() * window.innerHeight,
              size: Math.random() * 2 + 1,
              speedX: (Math.random() - 0.5) * 0.5,
              speedY: (Math.random() - 0.5) * 0.5,
              opacity: Math.random() * 0.7 + 0.3,
            }));
            setParticles(newParticles);

            const animateParticles = () => {
              setParticles(prevParticles =>
                prevParticles.map(p => {
                  let newX = p.x + p.speedX;
                  let newY = p.y + p.speedY;

                  // Wrap around screen
                  if (newX > window.innerWidth) newX = 0;
                  if (newX < 0) newX = window.innerWidth;
                  if (newY > window.innerHeight) newY = 0;
                  if (newY < 0) newY = window.innerHeight;

                  return { ...p, x: newX, y: newY };
                })
              );
              requestAnimationFrame(animateParticles);
            };

            const animFrame = requestAnimationFrame(animateParticles);

            return () => {
              unsubscribeAuth();
              cancelAnimationFrame(animFrame);
            };
          }, []); // Empty dependency array means this runs once on mount

          if (!mounted) {
            return null; // Or a loading spinner
          }

          return (
            <div className={cn(
              "min-h-screen flex flex-col font-sans antialiased",
              "bg-gradient-to-br from-background via-slate-900 to-background", // Use tech gradient
              className
            )}>
              {/* Particle Background */}
              <div className="fixed inset-0 z-0 pointer-events-none overflow-hidden">
                {particles.map(p => (
                  <div
                    key={p.id}
                    className="absolute bg-tech-cyan rounded-full animate-pulse-light" // Add pulse animation
                    style={{
                      left: p.x,
                      top: p.y,
                      width: p.size,
                      height: p.size,
                      opacity: p.opacity,
                    }}
                  />
                ))}
              </div>

              {/* Main Header (will be fixed top from its component) */}
              <Header />

              {/* Main Content Area - flex-grow pushes footer down */}
              <main className="relative z-10 flex-grow">
                {isAuthReady ? children : (
                  <div className="flex items-center justify-center min-h-[calc(100vh-200px)] text-tech-cyan text-xl font-tech">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-tech-cyan mr-3"></div>
                    Establishing Secure Connection...
                  </div>
                )}
              </main>

              {/* Footer */}
              <footer className="relative z-10 py-6 border-t border-border/20 backdrop-blur-sm bg-background/80 mt-10"> {/* Adjusted mt- */}
                <div className="container mx-auto px-4 text-center text-muted-foreground text-sm font-code">
                  <p>&copy; {new Date().getFullYear()} BRB: A Solana Adventure. All rights reserved.</p>
                  <p>Built with ⚡ Solana & Web3 Ethos</p>
                </div>
              </footer>
            </div>
          );
        }
        ```

4.  **Completely REPLACE `client/src/components/layout/Header.tsx` Content:**
    * **File:** `client/src/components/layout/Header.tsx`
    * **Action:** Fix `<a>` nesting warning and ensure styling.
    * **Implementation:**
        ```typescript
        // client/src/components/layout/Header.tsx - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
        import { Link, useLocation } from 'wouter';
        import { WalletButton } from '../wallet/WalletButton';
        import { cn } from '@/lib/utils';
        import { Button } from '@/components/ui/button'; // Ensure Button is imported
        import { Moon, Sun } from 'lucide-react'; // Ensure icons are imported
        import { useTheme } from 'next-themes';

        export function Header() {
          const [location] = useLocation();
          const { theme, setTheme } = useTheme();

          const navItems = [
            { href: '/', label: 'Home' },
            { href: '/lessons', label: 'Lessons' },
            { href: '/playground', label: 'Playground' },
            { href: '/ranch', label: 'My Ranch' },
          ];

          return (
            <header className="relative z-50 border-b border-border/20 backdrop-blur-sm bg-background/80">
              <div className="container mx-auto px-4 py-6">
                <div className="flex items-center justify-between">
                  {/* Logo & Title */}
                  <Link href="/">
                    {/* Direct child of wouter's Link should be the clickable element */}
                    <a className="flex items-center space-x-4 cursor-pointer">
                      <div className="w-12 h-12 bg-gradient-tech rounded-lg flex items-center justify-center glow-tech-cyan animate-glow">
                        <span className="text-2xl">⚡</span>
                      </div>
                      <div>
                        <h1 className="text-4xl font-titulo text-tech-cyan">
                          BRB: A Solana Adventure
                        </h1>
                        <p className="text-sm text-tech-cyan font-tech mt-1">
                          Learn Solana • Build dApps • Master Web3 Development
                        </p>
                      </div>
                    </a>
                  </Link>

                  {/* Navigation */}
                  <nav className="hidden lg:flex items-center space-x-6">
                    {navItems.map(({ href, label }) => (
                      <Link key={href} href={href}>
                        {/* Direct child of wouter's Link should be the clickable element */}
                        <a
                          className={cn(
                            'font-tech text-sm uppercase tracking-wider transition-all duration-300 px-3 py-2 rounded-md',
                            location === href
                              ? 'text-tech-cyan bg-tech-cyan/10 border border-tech-cyan/30'
                              : 'text-foreground hover:text-tech-cyan hover:bg-tech-cyan/5'
                          )}
                        >
                          {label}
                        </a>
                      </Link>
                    ))}
                  </nav>

                  {/* Wallet Connection & Theme Toggle */}
                  <div className="flex items-center space-x-4">
                    <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
                        className="text-tech-cyan hover:bg-tech-cyan/10"
                    >
                        <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
                        <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
                        <span className="sr-only">Toggle theme</span>
                    </Button>
                    <WalletButton />
                  </div>
                </div>
              </div>
            </header>
          );
        }
        ```

**Phase 4: Final Layout Overlap & Positioning Fixes (Re-application for the last time)**

* **Objective:** Ensure all UI elements are correctly spaced and positioned, preventing overlaps.

1.  **Completely REPLACE `client/src/components/lessons/LessonLayout.tsx` Content:**
    * **File:** `client/src/components/lessons/LessonLayout.tsx`
    * **Action:** DELETE ALL EXISTING CONTENT. PASTE THE ENTIRE BLOCK BELOW.
    * **Implementation:**
        ```typescript
        // client/src/components/lessons/LessonLayout.tsx - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
        import React, { ReactNode } from 'react';
        import { Progress } from '@/components/ui/progress';
        import { cn } from '@/lib/utils';
        import { Button } from '@/components/ui/button'; // Base Button component
        import { ChevronLeft, ChevronRight } from 'lucide-react'; // Icons

        // Props for LessonLayout
        interface LessonLayoutProps {
          children: ReactNode;
          lessonId: number;
          title: string;
          description: string;
          progressValue?: number; // e.g., 50 for 50%
          onPrevious: () => void;
          onNext: () => void;
          hasPrevious: boolean;
          hasNext: boolean;
          nextButtonText: string;
        }

        export function LessonLayout({
          children,
          lessonId,
          title,
          description,
          progressValue = 0,
          onPrevious,
          onNext,
          hasPrevious,
          hasNext,
          nextButtonText,
        }: LessonLayoutProps) {
          return (
            <div className="min-h-screen flex flex-col bg-gradient-to-br from-background via-slate-900 to-background text-foreground">
              {/* Fixed Header for Lesson Info */}
              <div className="fixed top-0 left-0 right-0 z-40 w-full
                              py-4 px-4 border-b border-border/20 backdrop-blur-sm bg-background/80">
                <div className="container mx-auto flex flex-col sm:flex-row items-center justify-between space-y-2 sm:space-y-0">
                  <div className="text-center sm:text-left">
                    <h2 className="font-titulo text-xl md:text-2xl text-tech-cyan">{title}</h2>
                    <p className="text-sm text-muted-foreground font-code">{description}</p>
                  </div>
                  <div className="w-full sm:w-48">
                    <Progress value={progressValue} className="h-2" />
                  </div>
                </div>
              </div>

              {/* Main Content Area - Pushed down by fixed header, grows to push footer/bottom-nav */}
              <main className="flex-grow pt-[120px] pb-[80px]"> {/* Account for header and bottom nav height */}
                {children}
              </main>

              {/* Fixed Bottom Navigation Bar */}
              <div className="fixed bottom-0 left-0 right-0 z-40 w-full
                              flex items-center justify-between px-4 py-4
                              bg-background/80 backdrop-blur-sm
                              border-t border-border/20">
                {/* Previous Button */}
                <Button
                  onClick={onPrevious}
                  disabled={!hasPrevious}
                  variant="outline"
                  size="sm"
                  className="text-xs"
                >
                  <ChevronLeft className="w-4 h-4 mr-1" />
                  Previous
                </Button>
                {/* Next Button */}
                <Button
                  onClick={onNext}
                  disabled={!hasNext}
                  variant="default"
                  size="sm"
                  className="tech-button tech-button-primary text-xs" // Ensure TechButton styles
                >
                  {nextButtonText}
                  <ChevronRight className="w-4 h-4 ml-1" />
                </Button>
              </div>
            </div>
          );
        }
        ```

**Phase 6: Update `server/routes.ts` for Ethos Lesson Verification**

* **File:** `server/routes.ts`
* **Action:** Update the `/api/compile` endpoint to accurately handle quiz-based verification for ethos lessons and integrate with `LessonStep` data.
* **Implementation:**
    ```typescript
    // server/routes.ts - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
    import type { Express } from "express";
    import { createServer, type Server } from "http";
    import { storage } from "./storage";
    import { z } from "zod";
    import { insertUserSchema, insertRanchSchema, insertLessonProgressSchema, insertCharacterSchema, insertBuildingSchema } from "@shared/schema";

    export async function registerRoutes(app: Express): Promise<Server> {
      // User routes
      app.post("/api/users", async (req, res) => {
        try {
          const userData = insertUserSchema.parse(req.body);
          const user = await storage.createUser(userData);
          res.json({ success: true, user });
        } catch (error) {
          res.status(400).json({ success: false, error: error instanceof Error ? error.message : "Invalid user data" });
        }
      });

      app.get("/api/users/:walletAddress", async (req, res) => {
        try {
          const { walletAddress } = req.params;
          const user = await storage.getUserByWalletAddress(walletAddress);
          if (!user) {
            return res.status(404).json({ success: false, error: "User not found" });
          }
          res.json({ success: true, user });
        } catch (error) {
          res.status(500).json({ success: false, error: "Failed to fetch user" });
        }
      });

      // Ranch routes
      app.post("/api/ranches", async (req, res) => {
        try {
          const ranchData = insertRanchSchema.parse(req.body);
          const ranch = await storage.createRanch(ranchData);
          res.json({ success: true, ranch });
        } catch (error) {
          res.status(400).json({ success: false, error: error instanceof Error ? error.message : "Invalid ranch data" });
        }
      });

      app.get("/api/ranches/user/:userId", async (req, res) => {
        try {
          const userId = req.params.userId; // userId is now string
          const ranch = await storage.getRanchByUserId(userId);
          if (!ranch) {
            return res.status(404).json({ success: false, error: "Ranch not found" });
          }
          res.json({ success: true, ranch });
        } catch (error) {
          res.status(500).json({ success: false, error: "Failed to fetch ranch" });
        }
      });

      app.put("/api/ranches/:id", async (req, res) => {
        try {
          const userId = req.params.id; // Assume this ID is actually the userId for updates
          const updateData = z.object({
            ranchCoinBalance: z.number().optional(),
            level: z.number().optional(),
            buildingCount: z.number().optional(),
            characterCount: z.number().optional(),
            metadata: z.any().optional(),
          }).parse(req.body);

          const ranch = await storage.updateRanch(userId, updateData);
          res.json({ success: true, ranch });
        } catch (error) {
          res.status(400).json({ success: false, error: error instanceof Error ? error.message : "Failed to update ranch" });
        }
      });

      // Lesson progress routes
      app.post("/api/lesson-progress", async (req, res) => {
        try {
          const progressData = insertLessonProgressSchema.parse(req.body);
          const progress = await storage.createLessonProgress(progressData);
          res.json({ success: true, progress });
        } catch (error) {
          res.status(400).json({ success: false, error: error instanceof Error ? error.message : "Invalid progress data" });
        }
      });

      app.get("/api/lesson-progress/user/:userId", async (req, res) => {
        try {
          const userId = req.params.userId;
          const progress = await storage.getLessonProgressByUserId(userId);
          res.json({ success: true, progress });
        } catch (error) {
          res.status(500).json({ success: false, error: "Failed to fetch lesson progress" });
        }
      });

      app.put("/api/lesson-progress/:id", async (req, res) => {
        try {
          const progressId = req.params.id;
          const updateData = z.object({
            completed: z.boolean().optional(),
            score: z.number().optional(),
            // completedAt: z.string().datetime().optional(), // Removed as Date is handled internally
            userId: z.string(), // Need userId to find correct doc
          }).parse(req.body);

          const progress = await storage.updateLessonProgress(progressId, updateData);
          res.json({ success: true, progress });
        } catch (error) {
          res.status(400).json({ success: false, error: error instanceof Error ? error.message : "Failed to update progress" });
        }
      });

      // Character routes
      app.post("/api/characters", async (req, res) => {
        try {
          const characterData = insertCharacterSchema.parse(req.body);
          const character = await storage.createCharacter(characterData);
          res.json({ success: true, character });
        } catch (error) {
          res.status(400).json({ success: false, error: error instanceof Error ? error.message : "Invalid character data" });
        }
      });

      app.get("/api/characters/user/:userId", async (req, res) => {
        try {
          const userId = req.params.userId;
          const characters = await storage.getCharactersByUserId(userId);
          res.json({ success: true, characters });
        } catch (error) {
          res.status(500).json({ success: false, error: "Failed to fetch characters" });
        }
      });

      app.put("/api/characters/:id", async (req, res) => {
        try {
          const characterId = req.params.id;
          const updateData = z.object({
            level: z.number().optional(),
            experience: z.number().optional(),
            mintAddress: z.string().optional(),
            ownerId: z.number(), // Need ownerId (userId) to find correct doc
          }).parse(req.body);

          const character = await storage.updateCharacter(characterId, updateData);
          res.json({ success: true, character });
        } catch (error) {
          res.status(400).json({ success: false, error: error instanceof Error ? error.message : "Failed to update character" });
        }
      });

      // Building routes
      app.post("/api/buildings", async (req, res) => {
        try {
          const buildingData = insertBuildingSchema.parse(req.body);
          const building = await storage.createBuilding(buildingData);
          res.json({ success: true, building });
        } catch (error) {
          res.status(400).json({ success: false, error: error instanceof Error ? error.message : "Invalid building data" });
        }
      });

      app.get("/api/buildings/ranch/:ranchId", async (req, res) => {
        try {
          const ranchId = req.params.ranchId; // This is actually userId for fetching buildings
          const buildings = await storage.getBuildingsByRanchId(ranchId);
          res.json({ success: true, buildings });
        } catch (error) {
          res.status(500).json({ success: false, error: "Failed to fetch buildings" });
        }
      });

      app.put("/api/buildings/:id", async (req, res) => {
        try {
          const buildingId = req.params.id;
          const updateData = z.object({
            level: z.number().optional(),
            metadata: z.any().optional(),
            ranchId: z.number(), // Need ranchId (userId) to find correct doc
          }).parse(req.body);

          const building = await storage.updateBuilding(buildingId, updateData);
          res.json({ success: true, building });
        } catch (error) {
          res.status(400).json({ success: false, error: error instanceof Error ? error.message : "Failed to update building" });
        }
      });

      // Code compilation and validation routes
      app.post("/api/compile", async (req, res) => {
        const { code, language, lessonId, currentStep, userAnswer } = req.body; // NEW: Receive userAnswer

        try {
          const lesson = await storage.getLessonById(lessonId);
          const currentStepData = lesson?.content.steps.find(step => step.id === currentStep);

          if (!lesson || !currentStepData) {
            return res.status(404).json({ success: false, error: "Lesson or step not found." });
          }

          // --- Handle non-coding/narrative challenges (Ethos lessons) ---
          if (!currentStepData.isCodingChallenge) {
            let challengeMet = false;
            let consoleOutput = currentStepData.failureMessage; // Default to failure

            if (currentStepData.quiz) {
                const correctAnswer = String(currentStepData.quiz.correctAnswer).toLowerCase().trim();
                const submittedAnswer = (userAnswer || '').toLowerCase().trim();

                if (currentStepData.quiz.type === 'text-input') {
                    challengeMet = submittedAnswer === correctAnswer;
                } else if (currentStepData.quiz.type === 'multiple-choice' || currentStepData.quiz.type === 'true-false') {
                    // Handle boolean correct answers for true-false
                    if (typeof currentStepData.quiz.correctAnswer === 'boolean') {
                        challengeMet = (userAnswer === 'true' && currentStepData.quiz.correctAnswer === true) ||
                                       (userAnswer === 'false' && currentStepData.quiz.correctAnswer === false);
                    } else { // Handle string correct answers for multiple choice
                        challengeMet = submittedAnswer === correctAnswer;
                    }
                }
                consoleOutput = challengeMet ? currentStepData.successMessage : currentStepData.failureMessage;

            } else {
                // For narrative steps without a quiz, simply assume success on "Deploy" click
                challengeMet = true;
                consoleOutput = currentStepData.successMessage;
            }

            res.json({
                success: true,
                challenge_id: `${lessonId}.${currentStep}`,
                challenge_success: challengeMet,
                result: {
                    compiled: true, // Simulate compilation success for narrative/quiz
                    programId: "N/A",
                    deploymentAddress: "N/A",
                    logs: [consoleOutput],
                    console_output: consoleOutput
                }
            });
            return; // IMPORTANT: Exit here for narrative/quiz lessons
          }

          // --- Handle specific CODING challenge steps (Solana Programming Modules) ---
          // Lesson 5 (Original L1): Solana Basics & Wallet Setup
          if (lessonId === 5 && currentStep === 1) { // Ping the Blockchain
            const expectedRustPattern = /get_network_status\(\)/;
            const expectedPythonPattern = /get_network_status\(\)/;

            let challengeMet = false;
            let feedbackMessage = currentStepData.failureMessage;
            let consoleOutput = "";

            if (language === 'rust' && expectedRustPattern.test(code)) {
                challengeMet = true;
            } else if (language === 'python' && expectedPythonPattern.test(code)) {
                challengeMet = true;
            }

            if (challengeMet) {
                const mockPing = Math.floor(Math.random() * 100) + 50;
                const mockSlot = Math.floor(Math.random() * 100000000) + 100000000;
                feedbackMessage = currentStepData.successMessage
                                    .replace('{ping}', mockPing.toString())
                                    .replace('{slot}', mockSlot.toLocaleString());
                consoleOutput = feedbackMessage;
            } else {
                consoleOutput = feedbackMessage;
            }

            res.json({
                success: true,
                challenge_id: `${lessonId}.${currentStep}`,
                challenge_success: challengeMet,
                result: {
                    compiled: true,
                    programId: "N/A",
                    deploymentAddress: "N/A",
                    logs: [feedbackMessage],
                    console_output: consoleOutput
                }
            });
            return;
          }

          // Lesson 6 (Original L2): Creating Your Ranch Account
          if (lessonId === 6) {
              if (currentStep === 1) { // Define Ranch Owner Field
                  const expectedRustPattern = /pub\s+owner:\s*Pubkey,/;
                  const expectedPythonPattern = /owner:\s*Pubkey/;

                  let challengeMet = false;
                  if (language === 'rust' && expectedRustPattern.test(code)) { challengeMet = true; }
                  else if (language === 'python' && expectedPythonPattern.test(code)) { challengeMet = true; }

                  res.json({
                      success: true,
                      challenge_id: `${lessonId}.${currentStep}`,
                      challenge_success: challengeMet,
                      result: {
                          compiled: true,
                          programId: "N/A", deploymentAddress: "N/A",
                          logs: [challengeMet ? currentStepData.successMessage : currentStepData.failureMessage],
                          console_output: challengeMet ? currentStepData.successMessage : currentStepData.failureMessage
                      }
                  });
                  return;
              } else if (currentStep === 2) { // Initialize Owner in initialize_ranch
                  const expectedRustPattern = /ranch\.owner\s*=\s*ctx\.accounts\.owner\.key\(\);/;
                  const expectedPythonPattern = /ranch\.owner\s*=\s*owner\.key\(\)/;

                  let challengeMet = false;
                  if (language === 'rust' && expectedRustPattern.test(code)) { challengeMet = true; }
                  else if (language === 'python' && expectedPythonPattern.test(code)) { challengeMet = true; }

                  res.json({
                      success: true,
                      challenge_id: `${lessonId}.${currentStep}`,
                      challenge_success: challengeMet,
                      result: {
                          compiled: true,
                          programId: "N/A", deploymentAddress: "N/A",
                          logs: [challengeMet ? currentStepData.successMessage : currentStepData.failureMessage],
                          console_output: challengeMet ? currentStepData.successMessage : currentStepData.failureMessage
                      }
                  });
                  return;
              } else if (currentStep === 3) { // Program Derived Address (PDA)
                  const expectedRustPattern = /seeds\s*=\s*\\[b"ranch",\s*owner\.key\(\)\.as_ref\(\)\],\s*bump/;
                  const expectedPythonPattern = /seeds=\['ranch',\s*owner\],\s*bump/;

                  let challengeMet = false;
                  if (language === 'rust' && expectedRustPattern.test(code)) { challengeMet = true; }
                  else if (language === 'python' && expectedPythonPattern.test(code)) { challengeMet = true; }

                  res.json({
                      success: true,
                      challenge_id: `${lessonId}.${currentStep}`,
                      challenge_success: challengeMet,
                      result: {
                          compiled: true,
                          programId: "PDAProgram", deploymentAddress: "N/A",
                          logs: [challengeMet ? currentStepData.successMessage : currentStepData.failureMessage],
                          console_output: challengeMet ? currentStepData.successMessage : currentStepData.failureMessage
                      }
                  });
                  return;
              }
          }

          // Fallback for other coding challenges (L7-L11) that are "Coming Soon" or not yet implemented
          await new Promise(resolve => setTimeout(resolve, 1500));

          const success = Math.random() > 0.5;

          if (success) {
            res.json({
              success: true,
              challenge_id: "generic_coding_success",
              challenge_success: true,
              result: {
                compiled: true,
                programId: `Program${Date.now()}`,
                deploymentAddress: `Deploy${Date.now()}`,
                logs: [
                  "✅ Code compiled successfully (generic simulation).",
                  "🚀 Program deployed to devnet (simulated).",
                  "💰 Transaction confirmed (simulated).",
                  "🎉 Program executed with no errors!"
                ],
                console_output: "Compilation & Deployment Successful! (Generic outcome for unverified challenges)"
              }
            });
          } else {
            res.json({
              success: false,
              challenge_id: "generic_coding_failure",
              challenge_success: false,
              error: "Compilation failed: Review your code for syntax and logic errors.",
              result: {
                compiled: false,
                errors: [
                  "Line X: Syntax Error: Review basic syntax and keyword usage.",
                  "Line Y: Semantic Error: Variable or account not defined correctly.",
                  "Line Z: Constraint Error: Account access or permissions may be incorrect.",
                  "This is a generic compilation error. For specific challenges, follow instructions carefully."
                ]
              }
            });
          }

        } catch (error) {
          console.error("API /api/compile error:", error);
          res.status(500).json({ success: false, error: error instanceof Error ? error.message : "An unexpected server error occurred." });
        }
      });


      app.post("/api/validate", async (req, res) => {
        try {
          const { code, language } = z.object({
            code: z.string(),
            language: z.enum(['rust', 'python']),
          }).parse(req.body);

          await new Promise(resolve => setTimeout(resolve, 1000));

          const hasErrors = code.length < 50;

          if (hasErrors) {
            res.json({
              success: false,
              errors: [
                {
                  line: 1,
                  message: "Code too short for a valid program",
                  severity: "error"
                }
              ]
            });
          } else {
            res.json({
              success: true,
              warnings: [
                {
                  line: 10,
                  message: "Consider adding error handling",
                  severity: "warning"
                }
              ]
            });
          }
        } catch (error) {
          res.status(400).json({ success: false, error: "Invalid validation request" });
        }
      });

      // Lessons route (public, does not need auth)
      app.get("/api/lessons", async (req, res) => {
        try {
          const lessons = await storage.getAllLessons();
          res.json({ success: true, lessons });
        } catch (error) {
          res.status(500).json({ success: false, error: "Failed to fetch lessons" });
        }
      });

      app.get("/api/lessons/:id", async (req, res) => {
        try {
          const lessonId = parseInt(req.params.id);
          if (isNaN(lessonId)) {
            return res.status(400).json({ success: false, error: "Invalid lesson ID" });
          }
          const lesson = await storage.getLessonById(lessonId);
          if (!lesson) {
            return res.status(404).json({ success: false, error: "Lesson not found" });
          }
          res.json({ success: true, lesson });
        } catch (error) {
          res.status(500).json({ success: false, error: "Failed to fetch lesson" });
        }
      });


      const httpServer = createServer(app);
      return httpServer;
    }
    