Agent, your task is to create and implement a loading splash screen to prevent a blank screen from showing when users transition between coding challenges. The splash screen will feature a "Matrix-style" binary rain animation.

Please implement the following features:

1. Create a New SplashScreen.tsx Component:
* In the client/src/components/ui directory (or a similar shared components folder), create a new file named SplashScreen.tsx.
* This component will render a full-screen <div> with a black background that contains an HTML <canvas> element.
* Use the provided JavaScript code to create a "binary rain" animation on the canvas.
* After a few seconds, the rain animation should fade out, and a centered Solana logo (SVG) should fade in and pulse gently.

2. Integrate the Splash Screen into CodingChallengePage.tsx:
* Add a Loading State: In your main CodingChallengePage.tsx component, add a new state variable to manage the loading screen's visibility:
javascript const [isLoading, setIsLoading] = useState(false); 
* Conditionally Render the Component: At the top level of the CodingChallengePage.tsx's return statement, add the following line to render the splash screen when isLoading is true:
javascript {isLoading && <SplashScreen />} 
* Modify the handleNextChallenge Function: Update your existing function that transitions between challenges. You must set isLoading to true immediately at the beginning of this function, before any other logic runs.
* Use useEffect to Hide the Splash Screen: Add a useEffect hook that runs whenever the currentChallengeIndex changes. Inside this effect, use a setTimeout to set isLoading to false after a short delay (e.g., 1500 milliseconds). This ensures the splash screen is visible long enough to cover the component re-render.
```javascript
useEffect(() => {
// This runs after the new challenge content has started to load
const timer = setTimeout(() => {
setIsLoading(false);
}, 1500); // Keep splash screen visible for 1.5 seconds

      return () => clearTimeout(timer);
  }, [currentChallengeIndex]);
  ```
3. Code for SplashScreen.tsx:
* Use the following complete code for the SplashScreen.tsx component. It contains all the necessary logic for the canvas animation and the Solana logo reveal.

```typescript
import React, { useEffect, useRef } from 'react';

const SolanaLogo = () => (
    <svg role="img" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" className="w-24 h-24 text-green-400">
        <title>Solana</title>
        <path d="M6.44 18.32l-2.32 1.34a.5.5 0 0 1-.75-.43V4.77a.5.5 0 0 1 .75-.43l2.32 1.34a.5.5 0 0 1 .25.43v11.78a.5.5 0 0 1-.25.43zM12.44 20.23L10.12 21.57a.5.5 0 0 1-.75-.43V6.86a.5.5 0 0 1 .75-.43l2.32 1.34a.5.5 0 0 1 .25.43v11.54a.5.5 0 0 1-.25.43zM18.44 15.77l-2.32 1.34a.5.5 0 0 1-.75-.43V2.87a.5.5 0 0 1 .75-.43l2.32 1.34a.5.5 0 0 1 .25.43v11.13a.5.5 0 0 1-.25.43z" />
    </svg>
);

export const SplashScreen = () => {
    const canvasRef = useRef<HTMLCanvasElement>(null);
    const [showLogo, setShowLogo] = useState(false);

    useEffect(() => {
        const canvas = canvasRef.current;
        if (!canvas) return;
        const ctx = canvas.getContext('2d');
        if (!ctx) return;

        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        const katakana = 'アァカサタナハマヤャラワガザダバパイィキシチニヒミリヰギジヂビピウゥクスツヌフムユュルグズブプエェケセテネヘメレヱゲゼデベペオォコソトノホモヨョロヲゴゾドボポヴッン';
        const latin = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        const nums = '0123456789';
        const alphabet = katakana + latin + nums;

        const fontSize = 16;
        const columns = canvas.width / fontSize;
        const rainDrops: number[] = [];

        for (let x = 0; x < columns; x++) {
            rainDrops[x] = 1;
        }

        let animationFrameId: number;
        const draw = () => {
            ctx.fillStyle = 'rgba(17, 24, 39, 0.05)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = '#4ade80'; // theme.colors.green[400]
            ctx.font = `${fontSize}px monospace`;

            for (let i = 0; i < rainDrops.length; i++) {
                const text = alphabet.charAt(Math.floor(Math.random() * alphabet.length));
                ctx.fillText(text, i * fontSize, rainDrops[i] * fontSize);

                if (rainDrops[i] * fontSize > canvas.height && Math.random() > 0.975) {
                    rainDrops[i] = 0;
                }
                rainDrops[i]++;
            }
            animationFrameId = window.requestAnimationFrame(draw);
        };

        draw();

        const fadeTimer = setTimeout(() => {
            setShowLogo(true);
        }, 1000);

        return () => {
            window.cancelAnimationFrame(animationFrameId);
            clearTimeout(fadeTimer);
        };
    }, []);

    return (
        <div className="fixed inset-0 bg-gray-900 z-50 flex items-center justify-center">
            <canvas ref={canvasRef} className={`absolute inset-0 transition-opacity duration-500 ${showLogo ? 'opacity-0' : 'opacity-100'}`}></canvas>
            <div className={`transition-opacity duration-500 ${showLogo ? 'opacity-100' : 'opacity-0'} animate-pulse`}>
                <SolanaLogo />
            </div>
        </div>
    );
};
```

Sources






