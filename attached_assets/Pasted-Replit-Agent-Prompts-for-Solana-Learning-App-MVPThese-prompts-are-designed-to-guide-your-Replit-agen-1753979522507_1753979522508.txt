Replit Agent Prompts for Solana Learning App MVPThese prompts are designed to guide your Replit agent in building the core components of your gamified Solana learning application. Remember to provide your specific design guidelines (e.g., color palette, font choices, component spacing, button styles) to the agent when it's generating the code. The prompts assume a React application with Tailwind CSS for styling.Overall Application Structure & SetupPrompt 1: Initial React App Setup with Tailwind CSS"Create a new React application. Configure it to use Tailwind CSS for styling. The main App.js or App.tsx component should set up a basic layout with a header, a main content area, and a footer. Ensure the index.html includes the necessary viewport meta tag for responsiveness. Use the Inter font family globally. All elements should have rounded corners. The application should be fully responsive across mobile, tablet, and desktop views."Solana Wallet Connection IntegrationPrompt 2: Solana Wallet Connection Component"Create a React component named WalletConnectButton.js (or .tsx). This component should integrate the @solana/wallet-adapter-react and @solana/wallet-adapter-wallets libraries to allow users to connect their Solana wallets.Requirements:Dependencies: Ensure the necessary wallet adapter dependencies are imported and configured.WalletProvider: Set up the WalletProvider at the root level of the application (e.g., in App.js or a wrapper component) to make wallet context available. Include common wallets like Phantom, Solflare, and Ledger.Button: The WalletConnectButton component should display a clear button (e.g., 'Connect Wallet' or 'Disconnect').Conditional Rendering: If a wallet is connected, display the truncated public key of the connected wallet and a 'Disconnect' button. If no wallet is connected, display a 'Connect Wallet' button.Styling: Apply Tailwind CSS classes for a modern, rounded, and visually appealing button. Ensure it's responsive and has good touch target size.Error Handling: Include basic error handling for connection failures (e.g., a simple message if a wallet connection fails).User Experience: When connecting, display a list of available wallets in a user-friendly modal or dropdown.No alert(): Do not use alert() for any messages; use a custom message box or toast notification if needed.Reference: https://solana.com/developers/cookbook/wallets/connect-wallet-react"Learning Track Layout & NavigationPrompt 3: Main Learning Layout and Module Navigation"Create a React component, LearningLayout.js (or .tsx), that will serve as the main container for the learning track.Requirements:Sidebar Navigation: Implement a responsive sidebar navigation on the left side that lists the learning modules (e.g., 'Module 1: Cypherpunk Ethos', 'Module 2: Solana Architecture', etc.). This sidebar should be collapsible on smaller screens.Main Content Area: The main content area on the right should display the content of the currently selected module.Module Progression: Implement a state management system (e.g., React Context or useState in App.js) to track the active module. Clicking a module in the sidebar should update the active module.Styling: Use Tailwind CSS for a clean, modern layout. Ensure the sidebar and content area are well-proportioned and responsive. Use flexbox or grid for layout.Visual Cues: Highlight the currently active module in the sidebar.Prompt 4: Module Content Display Component"Create a React component, ModuleContent.js (or .tsx), responsible for rendering the content of each learning module.Requirements:Props: It should accept a moduleData prop which contains the title, learning objectives, key concepts, and exercise details for the current module.Markdown Rendering: Use a library like react-markdown to render the module's text content (objectives, concepts) from Markdown strings.Monaco Editor Integration: Integrate the Monaco Editor within this component for each exercise.For each exercise, display a clear title and instructions.The Monaco Editor should be pre-populated with the exercise's starting code snippet.Provide a 'Run Code' button that simulates execution (e.g., logs the code to the console, or for specific exercises, performs basic string manipulation/dummy calculations). Note: Actual Solana program execution will be more complex and is beyond this MVP prompt.Styling: Apply Tailwind CSS for clear headings, bullet points, and a well-defined container for the Monaco Editor. Ensure the editor scales responsively.NFT Achievement Placeholder: Include a placeholder section at the end of each module's content that indicates where the NFT achievement will be displayed upon successful completion.Monaco Editor Integration DetailsPrompt 5: Monaco Editor Wrapper Component"Create a dedicated React component, CodeEditor.js (or .tsx), to wrap and manage the Monaco Editor.Requirements:Props: It should accept initialCode (string), language (string, e.g., 'javascript', 'rust'), and onCodeChange (callback function).Editor Initialization: Initialize the Monaco Editor within a useEffect hook. Ensure proper cleanup on component unmount.Theming: Set a dark theme for the editor.Basic Functionality: Allow users to type and edit code.Run Button: Provide a 'Run Code' button below the editor. When clicked, it should trigger the onCodeChange callback with the current editor content.Styling: Use Tailwind CSS to give the editor a clean border, rounded corners, and appropriate height/width. Ensure it's responsive.Dependencies: Mention that react-monaco-editor or direct Monaco integration will be needed.NFT Achievement Display (Placeholder)Prompt 6: NFT Achievement Display Component"Create a simple React component, AchievementNFT.js (or .tsx), to display the NFT achievement for a completed module.Requirements:Props: It should accept nftTitle (string) and nftImageSrc (string, for a placeholder image or a generated SVG/emoji).Display: Show the NFT title and the image.Conditional Visibility: This component will initially be hidden and only displayed when a module is marked as complete.Styling: Use Tailwind CSS for a visually appealing card-like display for the NFT, with rounded corners and a subtle shadow. Use a placeholder image URL like https://placehold.co/200x200/000000/FFFFFF?text=NFT for the image source initially.Data Management (for Learning Track Content)Prompt 7: Learning Track Data Structure"Define a JavaScript/TypeScript object or array that represents the entire learning track content. Each element in the array should correspond to a module and include:id: Unique identifier (e.g., 'module1').title: Module title (e.g., 'Module 1: Cypherpunk Ethos & Web3 Foundations').nftAchievement: Object with title and imageSrc for the NFT.objectives: Array of strings.keyConcepts: Array of objects with title and description (Markdown string).exercises: Array of objects, each with:title: Exercise title.instructions: Markdown string.initialCode: Code string for the Monaco editor.language: 'javascript', 'python', or 'rust'."By providing these detailed prompts, your Replit agent should be able to scaffold a robust MVP for your Solana learning application. Remember to iterate with the agent, providing feedback and your specific design guidelines as it generates the code.