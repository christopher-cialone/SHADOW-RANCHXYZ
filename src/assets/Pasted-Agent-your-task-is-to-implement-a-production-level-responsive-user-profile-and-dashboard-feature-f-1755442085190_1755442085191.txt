Agent, your task is to implement a production-level, responsive user profile and dashboard feature for the Shadow Ranch application. All user data must be persistently stored and linked to their connected Solana wallet address.

Follow these detailed instructions precisely:

1. Architecture for Data Persistence:
* You will use Firebase Firestore to store user profile data.
* The unique identifier for each user's profile document will be their Solana wallet public key.
* When a user connects their wallet, fetch their profile document from Firestore using their public key. If no document exists, create a new one with default values.
* User profile pictures will be uploaded to Firebase Storage. The public URL generated by Firebase Storage will then be saved as a field in the user's Firestore document.

2. Create New Responsive Page and Components:
* New Page: In client/src/pages, create ProfilePage.tsx. This page must be fully responsive.
* New Components: In a new client/src/components/profile directory, create:
* ProfileHeader.tsx: A responsive component for the user's avatar, address, and bio.
* AchievementGallery.tsx: A responsive grid for displaying NFT badges.
* ProfileEditorModal.tsx: A modal component for editing profile details.

3. Implement Feature Logic and UI (Mobile-First):

* **`ProfilePage.tsx`:**
    * On component mount, use the connected wallet's public key to fetch the user's profile data from Firestore.
    * Use a loading state while data is being fetched.
    * The layout should be a single column on mobile and expand to a more complex layout on larger screens (e.g., profile info on the left, achievements on the right).
    * Render `ProfileHeader` and `AchievementGallery`, passing the fetched data as props.

* **`ProfileHeader.tsx`:**
    * **Layout:** On mobile, stack the profile picture, username, wallet address, and bio vertically. On desktop (`md:` and up), display them in a more horizontal, spacious layout.
    * **Profile Picture:** Display the user's image from the Firestore URL. If none exists, show a default SVG avatar.
    * **Wallet Address:** Display a shortened version of the user's public key (e.g., `5h...k9Z`) with a "copy to clipboard" button.
    * **Edit Button:** An "Edit Profile" button should open the `ProfileEditorModal`.

* **`AchievementGallery.tsx`:**
    * **Layout:** Use a responsive CSS grid. It should be 2 columns on mobile (`grid-cols-2`), 3 on tablets (`md:grid-cols-3`), and 4 or 5 on larger desktops (`lg:grid-cols-4 xl:grid-cols-5`).
    * **Data:** Use a placeholder array of NFT badge data. Each badge should have an `unlocked` boolean property.
    * **Styling:** Unlocked badges should be full color. Locked badges must be grayscale (`filter grayscale`) with a lock icon overlay. Add a tooltip on hover/tap to show the badge name.

* **`ProfileEditorModal.tsx`:**
    * **Functionality:** This modal should contain a form with:
        * An image uploader that triggers the Firebase Storage upload flow. Show an upload progress indicator.
        * A text input for `username`.
        * A `textarea` for `bio`.
    * **Actions:** The "Save" button will trigger a `setDoc` or `updateDoc` Firestore function to update the user's profile document with the new data (including the new image URL from storage).
4. Styling and Design:
* Responsiveness is Mandatory: Use Tailwind CSS's responsive prefixes (sm:, md:, lg:) extensively for all layout, typography, and spacing to ensure a flawless experience on all devices.
* Theme Consistency: All new components must strictly adhere to the established dark theme with cyan accents, monospace fonts for titles, and glowing effects for interactive elements.

Please generate the necessary code for these new files and show the required modifications to existing files to integrate this production-level, mobile-first feature set.