BRB: The Cypherpunk Ethos & History Curriculum (Code Implementation)Project Goal: To create a foundational curriculum module focused on the cypherpunk ethos and crypto history. These lessons will precede the technical Solana programming challenges, providing a thematic and philosophical grounding for new users. This involves updating lesson data, adapting frontend rendering for non-coding lessons, integrating new visuals, and ensuring seamless progression.Instructions for Replit Agent (Comprehensive Implementation):Phase 1: Update Lesson Data and Code Templates (CRITICAL FOUNDATION)Objective: Define the new "Ethos" lessons (Module 0, 1, 2, 3) and shift existing Solana lessons to higher IDs. Create non-interactive code templates for the ethos lessons.Completely REPLACE client/src/data/lessons.ts Content:File: client/src/data/lessons.tsAction: DELETE ALL EXISTING CONTENT in this file. Then, PASTE THE ENTIRE BLOCK BELOW as its new content. This defines all Ethos lessons (ID 1-4) and re-indexes the original Solana lessons (ID 5-11).Implementation:// client/src/data/lessons.ts - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
export interface LessonData {
    id: number;
    title: string;
    description: string;
    chapter: number;
    difficulty: 'beginner' | 'intermediate' | 'advanced';
    estimatedTime: number; // in minutes
    isPremium: boolean;
    content: {
        steps: LessonStep[];
    };
    codeTemplate?: string; // Optional: for general lesson, specific templates in steps
}

export interface LessonStep {
    id: number;
    title: string;
    challenge: string;
    expectedCodePattern?: { rust?: string; python?: string; }; // Made optional for narrative lessons
    successMessage: string;
    failureMessage: string;
    initialCodeTemplateKey: string; // Key from code-templates.ts
    visualEffectTrigger?: 'networkPing' | 'sparkle' | 'coinFall' | 'messageBoard' | 'transaction' | 'dataStream' | 'blueprint' | 'dystopianCity' | 'cypherpunkSymbol' | 'codeShield' | 'digitalGhost' | 'bankBreaking' | 'decentralizedNodes' | 'blockchainBlocks' | 'smartContractGears' | 'digitalMarketplace' | 'glowingPath'; // New visual triggers
    hintMessage?: string;
    isCodingChallenge: boolean; // NEW: Flag to indicate if this step requires coding
}

export const lessons: LessonData[] = [
    // --- NEW: Module 0: Prologue - The Digital Frontier's Code of Honor (Lesson ID 1) ---
    {
        id: 1,
        title: "Prologue: The Digital Frontier's Code of Honor",
        description: "Uncover the forgotten history of digital freedom.",
        chapter: 0,
        difficulty: 'beginner',
        estimatedTime: 20,
        isPremium: false,
        content: {
            steps: [
                {
                    id: 1,
                    title: "Echoes from the Old World",
                    challenge: `Before the blockchain sun rose over this digital frontier, the Old World suffered under the thumb of centralized powers. Data was spied on, money controlled, and freedom often felt like a myth whispered in hushed tones. But some dreamed of a new kind of freedom – built not with guns, but with **code**.

                    **Reflection:** What aspects of the 'Old World' (digital or otherwise) make you value privacy and control over your own data?`,
                    successMessage: "Understood. The seeds of rebellion are often sown in the shadows of control. Click 'Next Step' to continue.",
                    failureMessage: "Please take a moment to reflect on the prompt. Click 'Deploy' to confirm understanding.", // Simplified failure for narrative steps
                    initialCodeTemplateKey: 'ethos_lesson0_1',
                    visualEffectTrigger: 'dystopianCity',
                    hintMessage: "This step is about setting the stage. Read the narrative, think about the question, and click 'Deploy' when you're ready to proceed.",
                    isCodingChallenge: false,
                },
                {
                    id: 2,
                    title: "The Whispers of Rebellion - Rise of the Cypherpunks",
                    challenge: `In the shadows of early digital networks, a band of rebels emerged – the **Cypherpunks**. They weren't outlaws in the traditional sense, but digital freedom fighters who believed that cryptography, not legislation, was the key to true liberty. They met not in saloons, but in email lists, forging their manifestos in lines of encrypted text.

                    **Reflection:** If code is a form of speech, and privacy is essential for free speech, how does strong encryption become a tool for freedom?`,
                    successMessage: "Confirmed. The digital whispers grew into a chorus. Click 'Next Step' to continue.",
                    failureMessage: "Please reflect on the concept of code and freedom. Click 'Deploy' to confirm understanding.",
                    initialCodeTemplateKey: 'ethos_lesson0_2',
                    visualEffectTrigger: 'cypherpunkSymbol',
                    hintMessage: "The Cypherpunks believed that privacy could only be guaranteed by mathematics, not by human promises. Think about how unbreakable math gives you control.",
                    isCodingChallenge: false,
                },
            ]
        },
    },
    // --- NEW: Module 1: The Manifestos - Code is Law, Privacy is Power (Lesson ID 2) ---
    {
        id: 2,
        title: "The Manifestos: Code is Law, Privacy is Power",
        description: "Dive into the founding texts of the digital freedom movement.",
        chapter: 1,
        difficulty: 'beginner',
        estimatedTime: 25,
        isPremium: false,
        content: {
            steps: [
                {
                    id: 1,
                    title: "The Cypherpunk Manifesto: Code, Not Trust",
                    challenge: `Eric Hughes, a quiet frontier coder, penned the words that became our first law: 'Cypherpunks write code.' He argued that laws and regulations could never truly protect our freedom in the digital realm. Only **unbreakable code** could truly guarantee privacy and liberty. Our very first step in this adventure is to understand this fundamental truth.

                    **Reflection:** Why do cypherpunks believe that code is a stronger guarantee of privacy than laws or policies?`,
                    successMessage: "Manifesto understood. Trust in code is the first principle. Click 'Next Step' to continue.",
                    failureMessage: "Consider the inherent limitations of human promises versus mathematical guarantees. Click 'Deploy' to confirm understanding.",
                    initialCodeTemplateKey: 'ethos_lesson1_1',
                    visualEffectTrigger: 'codeShield',
                    hintMessage: "Laws can be broken or changed by people. Code, if written correctly, executes exactly as intended, every time.",
                    isCodingChallenge: false,
                },
                {
                    id: 2,
                    title: "The Crypto Anarchist Manifesto: Unstoppable Liberty",
                    challenge: `Timothy C. May, a figure shrouded in digital mist, took the vision even further. His 'Crypto Anarchist Manifesto' painted a future where cryptography would dissolve the very power of the state, creating truly free and anonymous markets. This vision of an unstoppable, censorship-resistant digital realm is where the true heart of Web3 beats.

                    **Reflection:** How does an 'anonymous, distributed digital cash system' fulfill the vision of a truly free and unstoppable market?`,
                    successMessage: "Vision embraced. A future without central gatekeepers. Click 'Next Step' to continue.",
                    failureMessage: "Think about how intermediaries can stop or control transactions. Click 'Deploy' to confirm understanding.",
                    initialCodeTemplateKey: 'ethos_lesson1_2',
                    visualEffectTrigger: 'digitalGhost',
                    hintMessage: "If no single person or company can control the money, then no one can stop you from using it. That's true freedom in action."
                },
            ]
        },
    },
    // --- NEW: Module 2: The Genesis Block - Bitcoin's Cypherpunk Legacy (Lesson ID 3) ---
    {
        id: 3,
        title: "The Genesis Block: Bitcoin's Cypherpunk Legacy",
        description: "Explore how Bitcoin brought cypherpunk ideals to life.",
        chapter: 2,
        difficulty: 'beginner',
        estimatedTime: 30,
        isPremium: false,
        content: {
            steps: [
                {
                    id: 1,
                    title: "The Fiat Chains - Why Bitcoin Was Born",
                    challenge: `The old world's money, 'fiat currency,' was controlled by central banks and governments. It could be printed out of thin air, censored, or inflated away. This system felt like digital chains to those who valued financial freedom. The 2008 financial crisis exposed these flaws, and in the digital dust, a new idea was born.

                    **Reflection:** How can a system where money supply is controlled by a single entity undermine individual freedom?`,
                    successMessage: "Chains identified. The need for a new path. Click 'Next Step' to continue.",
                    failureMessage: "Reflect on the power a centralized financial system holds over individuals. Click 'Deploy' to confirm understanding.",
                    initialCodeTemplateKey: 'ethos_lesson2_1',
                    visualEffectTrigger: 'bankBreaking',
                    hintMessage: "Think about inflation, censorship, and access to funds. What happens when someone else has ultimate control over your money?"
                },
                {
                    id: 2,
                    title: "Bitcoin: A Peer-to-Peer Electronic Cash System",
                    challenge: `From the shadows, an anonymous figure, Satoshi Nakamoto, rode into the digital frontier with a revolutionary proposal: **Bitcoin**. It was the first true 'electronic cash' that didn't need a bank, a government, or any trusted middleman. It was a digital currency for the people, by the people, secured by pure cryptography.

                    **Reflection:** How does eliminating the 'trusted third party' in financial transactions enhance privacy and decentralization?`,
                    successMessage: "Bitcoin's core principle absorbed. Trustless transactions for a new age. Click 'Next Step' to continue.",
                    failureMessage: "Focus on the 'peer-to-peer' aspect. What does that remove from the equation? Click 'Deploy' to confirm understanding.",
                    initialCodeTemplateKey: 'ethos_lesson2_2',
                    visualEffectTrigger: 'decentralizedNodes',
                    hintMessage: "When you send money directly to someone else, without a bank in the middle, who can stop it? No one."
                },
                {
                    id: 3,
                    title: "The Blockchain: A Public, Immutable Ledger",
                    challenge: `At the heart of Bitcoin was the **blockchain** – a revolutionary 'digital ledger' that recorded every transaction not in a bank's secret book, but openly and immutably across a vast network of computers. Once a transaction was carved into this digital stone, it couldn't be changed. This public, decentralized truth became the backbone of our new digital world.

                    **Reflection:** How does a public and immutable ledger contribute to a more transparent and fair financial system, even if the users are pseudonymous?`,
                    successMessage: "Blockchain principles secured. The unchangeable truth. Click 'Next Step' to continue.",
                    failureMessage: "Consider what 'public' and 'immutable' mean for accountability. Click 'Deploy' to confirm understanding.",
                    initialCodeTemplateKey: 'ethos_lesson2_3',
                    visualEffectTrigger: 'blockchainBlocks',
                    hintMessage: "Even if you don't know *who* did something, you know *what* happened, and that it can't be covered up."
                },
            ]
        },
    },
    // --- NEW: Module 3: The Crossroads - Web3's Path and Future (Lesson ID 4) ---
    {
        id: 4,
        title: "The Crossroads: Web3's Path and Future",
        description: "Understand the evolution of Web3 and re-align with core ideals.",
        chapter: 3,
        difficulty: 'beginner',
        estimatedTime: 30,
        isPremium: false,
        content: {
            steps: [
                {
                    id: 1,
                    title: "Ethereum & Smart Contracts: Expanding the Vision",
                    challenge: `Bitcoin proved that decentralized money was possible. But soon, new pioneers arrived, pushing the frontier further. Ethereum, with its 'smart contracts,' allowed not just money, but **any kind of digital agreement** to be executed automatically and transparently on the blockchain. The digital Wild West just got a lot more sophisticated.

                    **Reflection:** How do smart contracts enhance the idea of 'code is law' by making agreements self-enforcing without human intervention?`,
                    successMessage: "Smart Contracts understood. Code as unstoppable agreement. Click 'Next Step' to continue.",
                    failureMessage: "Think about what 'self-enforcing' means for trust and intermediaries. Click 'Deploy' to confirm understanding.",
                    initialCodeTemplateKey: 'ethos_lesson3_1',
                    visualEffectTrigger: 'smartContractGears',
                    hintMessage: "If the rules are written in code, and that code runs automatically, you don't need a judge or lawyer to enforce it."
                },
                {
                    id: 2,
                    title: "The Rise of DeFi & NFTs: Promises and Perils",
                    challenge: `The frontier exploded with innovation: Decentralized Finance (DeFi) offered banks made of code, and Non-Fungible Tokens (NFTs) gave us true digital ownership of art, collectibles, and even virtual land. But with this rapid growth came new challenges – the lure of easy riches, scams lurking in the shadows, and the constant threat of centralization creeping back into the decentralized dream.

                    **Reflection:** How can we, as builders and users, ensure that the growth of Web3 (like DeFi and NFTs) remains true to the original cypherpunk ideals of decentralization and individual control?`,
                    successMessage: "Perils recognized, vigilance heightened. The fight for true decentralization continues. Click 'Next Step' to continue.",
                    failureMessage: "Consider where power can accumulate in new systems. How can we prevent that? Click 'Deploy' to confirm understanding.",
                    initialCodeTemplateKey: 'ethos_lesson3_2',
                    visualEffectTrigger: 'digitalMarketplace',
                    hintMessage: "Even in Web3, some services become very popular and centralize power. We need to actively choose decentralized alternatives and build them robustly."
                },
                {
                    id: 3,
                    title: "The Path Forward: Realigning with the Ethos",
                    challenge: `The digital frontier is vast and ever-changing. As new builders like you join the ranks, it's crucial to remember the code of honor established by the original cypherpunks. To truly build a decentralized future, we must constantly question centralization, champion privacy, and ensure that our innovations serve liberty, not control. Your journey is not just about writing code; it's about building a better digital world.

                    **Reflection:** As a future Solana developer, how will you incorporate the principles of privacy, decentralization, and censorship resistance into the applications you build?`,
                    successMessage: "Ethos embraced! Your journey as a builder aligned with the true spirit of Web3 begins now. Click 'Next' to move to your first coding challenge!",
                    failureMessage: "Reflect on your role in shaping the decentralized future. What principles will guide your work? Click 'Deploy' to confirm understanding.",
                    initialCodeTemplateKey: 'ethos_lesson3_3',
                    visualEffectTrigger: 'glowingPath',
                    hintMessage: "Every piece of code you write, every decision you make, can either reinforce centralization or push towards more freedom and privacy."
                },
            ]
        },
    },
    // --- ORIGINAL Solana Lessons (IDs SHIFTED) ---
    {
        id: 5, // Original Lesson 1 (Solana Basics & Wallet Setup)
        title: "Solana Basics & Wallet Setup",
        description: "Learn the fundamentals of Solana and set up your Web3 wallet",
        chapter: 4, // Chapter adjusted
        difficulty: 'beginner',
        estimatedTime: 30,
        isPremium: false,
        content: {
            steps: [
                {
                    id: 1,
                    title: "Ping the Blockchain: Your First Transmission",
                    challenge: `Welcome, new recruit! Your mission begins now. This isn't just a game; it's a training simulation in the digital frontier. Your first task is to establish a connection with the Solana Devnet – think of it as sending a tiny digital "ping" to see if the network is alive and responding.

                    Below, you'll see your **Code Terminal**, a powerful tool for writing Solana programs. It starts with some basic program structure. Don't worry about understanding all of it yet! We'll guide you.

                    **Your Task:**
                    1.  Find the special area in your **Code Terminal** marked with comments like \`// Your code goes here\` or \`# Your code goes here\`.
                    2.  Type the following command into that area: \`get_network_status()\`
                    3.  Click the **"Deploy"** button to send your command.

                    Watch the "Console Output" below your code for a response! This is how your program communicates with the Solana network.`,
                    expectedCodePattern: { rust: 'get_network_status\\(\\)', python: 'get_network_status\\(\\)' },
                    successMessage: "Transmission received! Network Status: Connected! Ping: {ping}ms | Current Slot: {slot}. You've made your first connection!",
                    failureMessage: "Transmission failed. The `get_network_status()` command was not found or is misspelled. Please ensure you typed it exactly as shown in the designated area. Double-check for typos!",
                    initialCodeTemplateKey: 'default',
                    visualEffectTrigger: 'networkPing',
                    hintMessage: "Hey there! To complete this first step, type `get_network_status()` exactly as you see it into the designated section of your Code Terminal. Then, click the 'Deploy' button. This function call is like pressing a big red button to check the network!"
                },
            ]
        },
    },
    {
        id: 6, // Original Lesson 2
        title: "Creating Your Ranch Account",
        description: "Build your first Solana program to manage ranch data",
        chapter: 5, // Chapter adjusted
        difficulty: 'beginner',
        estimatedTime: 45,
        isPremium: false,
        content: {
            steps: [
                {
                    id: 1,
                    title: "Define Ranch Owner Field",
                    challenge: "Your ranch needs an owner! In the `Ranch` struct (Rust) or `Ranch` class (Python), add a `pubkey` field named `owner`. This will identify who controls the ranch. Don't forget the comma for Rust!",
                    expectedCodePattern: { rust: 'pub\\s+owner:\\s*Pubkey,', python: 'owner:\\s*Pubkey' },
                    successMessage: "Excellent! The `owner` field has been added. Your ranch now knows who its rightful owner is!",
                    failureMessage: "Not quite. Make sure you've added 'pub owner: Pubkey,' (Rust) or 'owner: Pubkey' (Python) exactly inside the Ranch definition. Check for typos and correct capitalization!",
                    initialCodeTemplateKey: 'ranch_management_initial',
                    visualEffectTrigger: 'blueprint',
                    hintMessage: "Think about Rust structs or Python classes. You need to add a line that declares a public key variable named 'owner' within your 'Ranch' data structure."
                },
                {
                    id: 2,
                    title: "Initialize Owner in `initialize_ranch`",
                    challenge: "Now, inside the `initialize_ranch` function, assign the `owner` field of your `ranch` account to the `ctx.accounts.owner.key()` (Rust) or `owner.key()` (Python). Remember `ranch.owner = ctx.accounts.owner.key();` or `ranch.owner = owner.key()`.",
                    expectedCodePattern: { rust: 'ranch\\.owner\\s*=\\s*ctx\\.accounts\\.owner\\.key\\(\\);', python: 'ranch\\.owner\\s*=\\s*owner\\.key\\(\\)' },
                    successMessage: "Owner successfully initialized! Your ranch deed is now registered to you!",
                    failureMessage: "The owner assignment is incorrect. Double-check the syntax for assigning the owner's key to the ranch account. Hint: Look at the `ctx.accounts.owner` context in Rust or `owner` parameter in Python.",
                    initialCodeTemplateKey: 'ranch_management_step1_complete',
                    visualEffectTrigger: 'sparkle',
                    hintMessage: "You need to set the 'owner' field of your 'ranch' variable to the public key of the user who's calling this program. In Rust, you'll use `ctx.accounts.owner.key()`; in Python, `owner.key()`."
                },
                {
                    id: 3,
                    title: "Programmatic Ownership: Securing Your Ranch with a Program Derived Address (PDA)",
                    challenge: `Welcome, digital homesteader! In this decentralized frontier, we value true ownership and privacy. Unlike the old world where deeds were on paper in a dusty office, here, your ranch deed can be controlled by pure code! This is the essence of **cypher-punk** – using cryptography and decentralized tech to protect privacy and freedom.
                    Today, we're diving into **Program Derived Addresses (PDAs)**. Imagine your ranch deed isn't owned by a specific wallet with a private key, but by a special, unhackable 'strongbox' that *only your ranch program can open*. This strongbox address is *derived* from your program's ID and some unique 'seeds' (like a secret password) and a 'bump' (a special number to make sure it's valid). This makes your ranch truly **decentralized** and secure, giving control to the smart contract itself, not a person's key.

                    **Your Task:**
                    1.  In the \`InitializeRanch\` struct (Rust) or function definition (Python), locate the \`#[account(...)]\` attribute for your \`ranch\` account.
                    2.  **Add a \`seeds\` argument** to this attribute. For the ranch, the seeds will be the byte literal \`b"ranch"\` and the owner's public key (\`owner.key().as_ref()\` in Rust, \`owner\` in Python).
                    3.  **Add a \`bump\` argument** to this attribute. This is a special nonce that ensures the PDA is valid.`,
                    expectedCodePattern: {
                        rust: 'seeds\\s*=\\s*\\[b"ranch",\\s*owner\\.key\\(\\)\\.as_ref\\(\\)\\]\\s*,\\s*bump',
                        python: 'seeds=\\[\'ranch\',\\s*owner\\]\\s*,\\s*bump'
                    },
                    successMessage: "Fantastic! Your ranch account is now a true Program Derived Address (PDA)! Its deed is safely locked away, controlled by your program, not a private key. You've embraced programmatic ownership!",
                    failureMessage: "Not quite. Double-check your PDA syntax. Did you add `seeds` and `bump` correctly within the `#[account(...)]` attribute (Rust) or `init` arguments (Python)? Remember the exact values for the seeds (`b\"ranch\"` and the owner's key) and that `bump` is also required!",
                    initialCodeTemplateKey: 'ranch_management_step2_complete',
                    visualEffectTrigger: 'dataStream',
                    hintMessage: `Okay, digital prospector! Think of PDAs like a magic lockbox only your program can open. You need to tell Solana:
                    1.  What 'words' (seeds) make this lockbox unique (e.g., the word "ranch" and the owner's special key).
                    2.  A special number (the 'bump') that makes sure the lockbox address is perfect and unhackable.
                    Look at the \`#[account(...)]\` line for the \`ranch\` in Rust, or the \`.init()\` call in Python, and add the \`seeds\` and \`bump\` keywords!`
                },
            ]
        },
    },
    {
        id: 7, // Original Lesson 3
        title: "Minting Character NFTs",
        description: "Create unique cowboy and outlaw NFTs with custom traits",
        chapter: 6, // Chapter adjusted
        difficulty: 'intermediate',
        estimatedTime: 60,
        isPremium: false,
        content: {
            steps: [
                { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
            ]
        }
    },
    {
        id: 8, // Original Lesson 4
        title: "RanchCoin Token Creation",
        description: "Deploy your own SPL token for in-game economy",
        chapter: 7, // Chapter adjusted
        difficulty: 'intermediate',
        estimatedTime: 50,
        isPremium: true,
        content: {
            steps: [
                { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
            ]
        }
    },
    {
        id: 9, // Original Lesson 5
        title: "Saloon Dueling System",
        description: "Program interactive duels and betting mechanics",
        chapter: 8, // Chapter adjusted
        difficulty: 'advanced',
        estimatedTime: 75,
        isPremium: true,
        content: {
            steps: [
                { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
            ]
        }
    },
    {
        id: 10, // Original Lesson 6
        title: "Security & Ranch Defense",
        description: "Implement security measures against shadow beasts",
        chapter: 9, // Chapter adjusted
        difficulty: 'advanced',
        estimatedTime: 90,
        isPremium: true,
        content: {
            steps: [
                { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
            ]
        }
    },
    {
        id: 11, // Original Lesson 7
        title: "Ether Range Expeditions",
        description: "Master cross-program invocations and external integrations",
        chapter: 10, // Chapter adjusted
        difficulty: 'advanced',
        estimatedTime: 120,
        isPremium: true,
        content: {
            steps: [
                { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
            ]
        }
    }
];
Completely REPLACE client/src/data/code-templates.ts Content:File: client/src/data/code-templates.tsAction: DELETE ALL EXISTING CONTENT in this file. Then, PASTE THE ENTIRE BLOCK BELOW as its new content. This ensures templates for all new ethos lessons and the existing Solana programming lessons are correct.Implementation:// client/src/data/code-templates.ts - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
export const rustTemplates = {
  default: `use anchor_lang::prelude::*;\n\ndeclare_id!("YourProgramID");\n\n#[program]\npub mod my_program {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {\n        // --- Your code goes here! ---\n        // Example: msg!("Hello World!");\n        // -----------------------------\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(mut)]\n    pub payer: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n`,
  // Ethos Lesson Templates (Non-coding)
  ethos_lesson0_1: `// Code for freedom, not control.\n// Welcome to the digital frontier.\n\n/*\nHistory shows that control leads to oppression.\nOur fight is for a decentralized future.\n*/\n`,
  ethos_lesson0_2: `// Privacy is power.\n// Cryptography is the shield.\n\n/*\nCypherpunks write code.\nWe are going to write it.\n*/\n`,
  ethos_lesson1_1: `// A Cypherpunk's Manifesto\n// by Eric Hughes\n\n/*\nPrivacy is necessary for an open society in the electronic age.\n... We cannot expect governments, corporations, or any other large, faceless organizations to grant us privacy.\n*/\n`,
  ethos_lesson1_2: `// The Crypto Anarchist Manifesto\n// by Timothy C. May\n\n/*\nFully anonymous, untraceable transactions.\nStrong cryptography will forever alter the nature of governments.\n*/\n`,
  ethos_lesson2_1: `// The Fiat Chains\n// 2008: A crisis of centralization.\n\n/*\nMoney supply controlled by a few.\nCensorship, inflation, and lack of true ownership.\n*/\n`,
  ethos_lesson2_2: `// Bitcoin Whitepaper (Excerpt)\n// A Peer-to-Peer Electronic Cash System\n\n/*\n"A purely peer-to-peer version of electronic cash would allow online payments\nto be sent directly from one party to another without going through a financial institution."\n*/\n`,
  ethos_lesson2_3: `// The Blockchain\n// Immutability and Transparency.\n\n/*\n"The network timestamps transactions by hashing them into an ongoing chain of hash-based\nproof-of-work, forming a record that cannot be changed without redoing the proof-of-work."\n*/\n`,
  ethos_lesson3_1: `// Ethereum & Smart Contracts\n// Code is law, self-enforcing.\n\n/*\n"A smart contract is a computer protocol intended to digitally facilitate, verify,\nor enforce the negotiation or performance of a contract."\n*/\n`,
  ethos_lesson3_2: `// DeFi & NFTs: Promises and Perils\n// Innovation vs. Centralization's creeping threat.\n\n/*\nDecentralized Finance aims to recreate traditional financial systems without intermediaries.\nNFTs provide unique digital ownership.\n*/\n`,
  ethos_lesson3_3: `// The Path Forward\n// Realigning with the Ethos.\n\n/*\nQuestion centralization.\nChampion privacy.\nBuild for liberty.\n*/\n`,

  // Solana Programming Templates
  ranch_management_initial: `use anchor_lang::prelude::*;

declare_id!("RanchManager111111111111111111111111111111");#[program]pub mod ranch_manager {use super::*;pub fn initialize_ranch(
    ctx: Context<InitializeRanch>,
    ranch_name: String,
) -> Result<()> {
    let ranch = &mut ctx.accounts.ranch;
    // TODO: Assign owner field here in a later step (L6S2)
    ranch.name = ranch_name;
    ranch.level = 1;
    ranch.experience = 0;
    ranch.ranch_coin_balance = 500;
    ranch.building_count = 0;
    ranch.character_count = 0;
    ranch.created_at = Clock::get()?.unix_timestamp;

    msg!("Ranch '{}' initialized for owner {}", ranch.name, ranch.owner);
    Ok(())
}
}#[derive(Accounts)]#[instruction(ranch_name: String)]pub struct InitializeRanch<'info> {#[account(init,payer = owner,space = 8 + Ranch::INIT_SPACE,// USER ADDS SEEDS AND BUMP HERE IN L6S3// seeds = [b"ranch", owner.key().as_ref()],// bump)]pub ranch: Account<'info, Ranch>,#[account(mut)]
pub owner: Signer<'info>,
pub system_program: Program<'info, System>,
}#[account]pub struct Ranch {// USER ADDS PUB OWNER: PUBKEY, HERE IN L6S1pub ranch_coin_balance: u64, // 8pub building_count: u8,     // 1pub character_count: u8,    // 1pub created_at: i64,        // 8pub name: String,           // 4 + 32pub level: u8,              // 1pub experience: u64,        // 8}impl Ranch {const INIT_SPACE: usize = 8 + 1 + 1 + 8 + 4 + 32 + 1 + 8; // Adjust space as fields are added}#[error_code]pub enum ErrorCode {#[msg("Unauthorized access to ranch")]UnauthorizedAccess,}, ranch_management_step1_complete: use anchor_lang::prelude::*;declare_id!("RanchManager111111111111111111111111111111");#[program]pub mod ranch_manager {use super::*;pub fn initialize_ranch(
    ctx: Context<InitializeRanch>,
    ranch_name: String,
) -> Result<()> {
    let ranch = &mut ctx.accounts.ranch;
    ranch.owner = ctx.accounts.owner.key(); // This line is added in L6S2
    ranch.name = ranch_name;
    ranch.level = 1;
    ranch.experience = 0;
    ranch.ranch_coin_balance = 500;
    ranch.building_count = 0;
    ranch.character_count = 0;
    ranch.created_at = Clock::get()?.unix_timestamp;

    msg!("Ranch '{}' initialized for owner {}", ranch.name, ranch.owner);
    Ok(())
}
}#[derive(Accounts)]#[instruction(ranch_name: String)]pub struct InitializeRanch<'info> {#[account(init,payer = owner,space = 8 + 32 + 4 + 32 + 1 + 8 + 8 + 1 + 1 + 8, // Adjusted space for 'owner: Pubkey'// USER ADDS SEEDS AND BUMP HERE IN L6S3// seeds = [b"ranch", owner.key().as_ref()],// bump)]pub ranch: Account<'info, Ranch>,#[account(mut)]
pub owner: Signer<'info>,
pub system_program: Program<'info, System>,
}#[account]pub struct Ranch {pub owner: Pubkey, // This line is added in L6S1pub ranch_coin_balance: u64,pub building_count: u8,pub character_count: u8,pub created_at: i64,pub name: String,pub level: u8,pub experience: u64,}impl Ranch {const INIT_SPACE: usize = 32 + 4 + 32 + 1 + 8 + 8 + 1 + 1 + 8; // Updated for Pubkey (32 bytes)}#[error_code]pub enum ErrorCode {#[msg("Unauthorized access to ranch")]UnauthorizedAccess,}`,};    export const pythonTemplates = {
      default: `import seahorse.prelude.*
declare_id('YourProgramID')@instructiondef initialize(payer: Signer):"""Initialize a new program"""# --- Your code goes here! ---# Example: print("Hello World!")# ----------------------------pass # Keep this line unless you replace it with actual code, // Ethos Lesson Templates (Non-coding) ethos_lesson0_1: # Code for freedom, not control.\n# Welcome to the digital frontier.\n\n# History shows that control leads to oppression.\n# Our fight is for a decentralized future.\n, ethos_lesson0_2: # Privacy is power.\n# Cryptography is the shield.\n\n# Cypherpunks write code.\n# We are going to write it.\n, ethos_lesson1_1: # A Cypherpunk's Manifesto\n# by Eric Hughes\n\n# Privacy is necessary for an open society in the electronic age.\n# We cannot expect governments, corporations... to grant us privacy.\n, ethos_lesson1_2: # The Crypto Anarchist Manifesto\n# by Timothy C. May\n\n# Fully anonymous, untraceable transactions.\n# Strong cryptography will forever alter the nature of governments.\n, ethos_lesson2_1: # The Fiat Chains\n# 2008: A crisis of centralization.\n\n# Money supply controlled by a few.\n# Censorship, inflation, and lack of true ownership.\n, ethos_lesson2_2: # Bitcoin Whitepaper (Excerpt)\n# A Peer-to-Peer Electronic Cash System\n\n# "A purely peer-to-peer version of electronic cash would allow online payments\n# to be sent directly from one party to another without going through a financial institution."\n, ethos_lesson2_3: # The Blockchain\n# Immutability and Transparency.\n\n# "The network timestamps transactions by hashing them into an ongoing chain of hash-based\n# proof-of-work, forming a record that cannot be changed without redoing the proof-of-work."\n, ethos_lesson3_1: # Ethereum & Smart Contracts\n# Code is law, self-enforcing.\n\n# "A smart contract is a computer protocol intended to digitally facilitate, verify,\n# or enforce the negotiation or performance of a contract."\n, ethos_lesson3_2: # DeFi & NFTs: Promises and Perils\n# Innovation vs. Centralization's creeping threat.\n\n# Decentralized Finance aims to recreate traditional financial systems without intermediaries.\n# NFTs provide unique digital ownership.\n, ethos_lesson3_3: # The Path Forward\n# Realigning with the Ethos.\n\n# Question centralization.\n# Champion privacy.\n# Build for liberty.\n`,      // Solana Programming Templates
      ranch_management_initial: `import seahorse.prelude.*
declare_id('RanchManager111111111111111111111111111111')class Ranch(Account):# USER ADDS OWNER: PUBKEY HERE IN L6S1ranch_coin_balance: u64building_count: u8character_count: u8created_at: i64name: strlevel: u8experience: u64@instructiondef initialize_ranch(ranch: Empty[Ranch],owner: Signer,ranch_name: str):"""Initialize a new ranch"""ranch = ranch.init(payer=owner,space=8 + 32 + 32 + 1 + 8 + 8 + 1 + 1 + 8, # Adjust space# USER ADDS SEEDS AND BUMP HERE IN L6S3# seeds=['ranch', owner],# bump)# TODO: Assign owner field here in a later step (L6S2)
ranch.name = ranch_name
ranch.level = 1
ranch.experience = 0
ranch.ranch_coin_balance = 500
ranch.building_count = 0
ranch.character_count = 0
ranch.created_at = Clock.unix_timestamp()

print(f"Ranch '{ranch_name}' initialized for owner {owner.key()}")
, ranch_management_step1_complete: import seahorse.prelude.*declare_id('RanchManager111111111111111111111111111111')class Ranch(Account):owner: Pubkey # This line is added in L6S1ranch_coin_balance: u64building_count: u8character_count: u8created_at: i64name: strlevel: u8experience: u64@instructiondef initialize_ranch(ranch: Empty[Ranch],owner: Signer,ranch_name: str):"""Initialize a new ranch"""ranch = ranch.init(payer=owner,space=8 + 32 + 32 + 1 + 8 + 8 + 1 + 1 + 8, # Adjusted space# USER ADDS SEEDS AND BUMP HERE IN L6S3# seeds=['ranch', owner],# bump)ranch.owner = owner.key() # This line is added in L6S2
ranch.name = ranch_name
ranch.level = 1
ranch.experience = 0
ranch.ranch_coin_balance = 500
ranch.building_count = 0
ranch.character_count = 0
ranch.created_at = Clock.unix_timestamp()

print(f"Ranch '{ranch_name}' initialized for owner {owner.key()}")
`,};```Create client/public/assets/images/scientist-character.png:Action: This is the image for the AI Assistant. Ensure this image file (the one you provided earlier, the running scientist with purple hair) is uploaded to client/public/assets/images/ and named scientist-character.png. (The prompt can't do this, but it's vital for HintCharacter.tsx to work).Create client/public/assets/images/brb-nft-ai-robot.png:Action: This is the reward NFT image. Ensure this image file (the robot with coffee mug) is uploaded to client/public/assets/images/ and named brb-nft-ai-robot.png. (Vital for ChallengeReward.tsx).Create client/src/firebase-init.ts:File: client/src/firebase-init.tsAction: Create this file to centralize Firebase initialization.Implementation:// client/src/firebase-init.ts - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore } from 'firebase/firestore';

declare const __app_id: string;
declare const __firebase_config: string;
declare const __initial_auth_token: string;

let firebaseConfigParsed = {};
try {
  if (typeof __firebase_config !== 'undefined' && __firebase_config) {
    firebaseConfigParsed = JSON.parse(__firebase_config);
  } else {
    console.warn("__firebase_config not found. Using default empty config. Firebase features might not work.");
  }
} catch (e) {
  console.error("Failed to parse __firebase_config:", e);
  firebaseConfigParsed = {};
}

export const app = initializeApp(firebaseConfigParsed);
export const auth = getAuth(app);
export const db = getFirestore(app);
export const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
export const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : '';
Completely REPLACE server/storage.ts Content:File: server/storage.tsAction: DELETE ALL EXISTING CONTENT in this file. Then, PASTE THE ENTIRE BLOCK BELOW. This implements FirestoreStorage and replaces MemStorage.Implementation:// server/storage.ts - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
import {
  users, ranches, lessons, userProgress, characters, buildings, rewardNfts,
  type User, type InsertUser, type Ranch, type InsertRanch, type Lesson,
  type UserProgress, type InsertUserProgress, type Character, type InsertCharacter,
  type Building, type InsertBuilding, type RewardNft, type InsertRewardNft
} from "@shared/schema";
import { getFirestore, doc, getDoc, setDoc, addDoc, updateDoc, deleteDoc, collection, query, where, getDocs } from "firebase/firestore";
import { initializeApp } from "firebase/app";

declare const __app_id: string;
declare const __firebase_config: string;

let firebaseAppInstance: any;
let firestoreDbInstance: any;

try {
  const config = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
  if (Object.keys(config).length > 0) {
    firebaseAppInstance = initializeApp(config, "server-side-app");
    firestoreDbInstance = getFirestore(firebaseAppInstance);
  } else {
    console.warn("Firebase config not found or empty on server. Firestore storage will be mocked or non-functional.");
  }
} catch (e) {
  console.error("Failed to parse __firebase_config on server:", e);
}

const ARTIFACTS_PATH = `artifacts/${typeof __app_id !== 'undefined' ? __app_id : 'default-app-id'}`;

export interface IStorage {
    getUser(id: string): Promise<User | undefined>;
    getUserByUsername(username: string): Promise<User | undefined>;
    getUserByWalletAddress(walletAddress: string): Promise<User | undefined>;
    createUser(user: InsertUser): Promise<User>;

    getRanch(id: string): Promise<Ranch | undefined>;
    getRanchByUserId(userId: string): Promise<Ranch | undefined>;
    createRanch(ranch: InsertRanch): Promise<Ranch>;
    updateRanch(userId: string, updates: Partial<Omit<Ranch, 'id' | 'ownerId' | 'createdAt'>>): Promise<Ranch>;

    getAllLessons(): Promise<Lesson[]>;
    getLessonById(id: number): Promise<Lesson | undefined>;
    createLesson(lesson: Omit<Lesson, 'id' | 'createdAt'>): Promise<Lesson>;

    getLessonProgress(id: string): Promise<UserProgress | undefined>;
    getLessonProgressByUserId(userId: string): Promise<UserProgress[]>;
    getLessonProgressByUserAndLesson(userId: string, lessonId: number): Promise<UserProgress | undefined>;
    createLessonProgress(progress: InsertUserProgress): Promise<UserProgress>;
    updateLessonProgress(id: string, updates: Partial<Omit<UserProgress, 'id' | 'userId' | 'lessonId' | 'createdAt'>>): Promise<UserProgress>;

    getCharacter(id: string): Promise<Character | undefined>;
    getCharactersByUserId(userId: string): Promise<Character[]>;
    createCharacter(character: InsertCharacter): Promise<Character>;
    updateCharacter(id: string, updates: Partial<Omit<Character, 'id' | 'ownerId' | 'createdAt'>>): Promise<Character>;

    getBuilding(id: string): Promise<Building | undefined>;
    getBuildingsByRanchId(ranchId: string): Promise<Building[]>; // Changed to string for user ID context
    createBuilding(building: InsertBuilding): Promise<Building>;
    updateBuilding(id: string, updates: Partial<Omit<Building, 'id' | 'ranchId' | 'createdAt'>>): Promise<Building>;

    getRewardNftsByUserId(userId: string): Promise<RewardNft[]>;
    createRewardNft(insertReward: InsertRewardNft): Promise<RewardNft>;
}

export class FirestoreStorage implements IStorage {
  private db: any;

  constructor() {
    if (!firestoreDbInstance) {
      console.error("Firestore DB instance not available in FirestoreStorage constructor. Using dummy storage.");
      this.db = null; // Set to null if not initialized
    } else {
      this.db = firestoreDbInstance;
      this.initializeLessons(); // Ensure default lessons are in Firestore
    }
  }

  private getUserCollectionRef(userId: string, collectionName: string) {
    if (!this.db) throw new Error("Firestore DB not initialized.");
    return collection(this.db, `${ARTIFACTS_PATH}/users/${userId}/${collectionName}`);
  }

  private getPublicCollectionRef(collectionName: string) {
    if (!this.db) throw new Error("Firestore DB not initialized.");
    return collection(this.db, `${ARTIFACTS_PATH}/public/data/${collectionName}`);
  }

  private async initializeLessons() {
    if (!this.db) return;
    const lessonsRef = this.getPublicCollectionRef('lessons');
    const snapshot = await getDocs(lessonsRef);
    if (snapshot.empty) {
      // Lessons data structure needs to match the new client/src/data/lessons.ts
      // The 'id' property here is used to set the Firestore document ID.
      const defaultLessons: (Omit<Lesson, 'createdAt'> & { id: number })[] = [
        // Lesson 1
        {
          id: 1,
          title: "Prologue: The Digital Frontier's Code of Honor",
          description: "Uncover the forgotten history of digital freedom.",
          chapter: 0,
          difficulty: 'beginner',
          estimatedTime: 20,
          isPremium: false,
          content: {
            steps: [
              {
                id: 1,
                title: "Echoes from the Old World",
                challenge: `Before the blockchain sun rose over this digital frontier, the Old World suffered under the thumb of centralized powers. Data was spied on, money controlled, and freedom often felt like a myth whispered in hushed tones. But some dreamed of a new kind of freedom – built not with guns, but with **code**.

                **Reflection:** What aspects of the 'Old World' (digital or otherwise) make you value privacy and control over your own data?`,
                successMessage: "Understood. The seeds of rebellion are often sown in the shadows of control. Click 'Next Step' to continue.",
                failureMessage: "Please take a moment to reflect on the prompt. Click 'Deploy' to confirm understanding.",
                initialCodeTemplateKey: 'ethos_lesson0_1',
                visualEffectTrigger: 'dystopianCity',
                hintMessage: "This step is about setting the stage. Read the narrative, think about the question, and click 'Deploy' when you're ready to proceed.",
                isCodingChallenge: false,
              },
              {
                id: 2,
                title: "The Whispers of Rebellion - Rise of the Cypherpunks",
                challenge: `In the shadows of early digital networks, a band of rebels emerged – the **Cypherpunks**. They weren't outlaws in the traditional sense, but digital freedom fighters who believed that cryptography, not legislation, was the key to true liberty. They met not in saloons, but in email lists, forging their manifestos in lines of encrypted text.

                **Reflection:** If code is a form of speech, and privacy is essential for free speech, how does strong encryption become a tool for freedom?`,
                successMessage: "Confirmed. The digital whispers grew into a chorus. Click 'Next Step' to continue.",
                failureMessage: "Please reflect on the concept of code and freedom. Click 'Deploy' to confirm understanding.",
                initialCodeTemplateKey: 'ethos_lesson0_2',
                visualEffectTrigger: 'cypherpunkSymbol',
                hintMessage: "The Cypherpunks believed that privacy could only be guaranteed by mathematics, not by human promises. Think about how unbreakable math gives you control.",
                isCodingChallenge: false,
              },
            ]
          },
        },
        // Lesson 2
        {
          id: 2,
          title: "The Manifestos: Code is Law, Privacy is Power",
          description: "Dive into the founding texts of the digital freedom movement.",
          chapter: 1,
          difficulty: 'beginner',
          estimatedTime: 25,
          isPremium: false,
          content: {
            steps: [
              {
                id: 1,
                title: "The Cypherpunk Manifesto: Code, Not Trust",
                challenge: `Eric Hughes, a quiet frontier coder, penned the words that became our first law: 'Cypherpunks write code.' He argued that laws and regulations could never truly protect our freedom in the digital realm. Only **unbreakable code** could truly guarantee privacy and liberty. Our very first step in this adventure is to understand this fundamental truth.

                **Reflection:** Why do cypherpunks believe that code is a stronger guarantee of privacy than laws or policies?`,
                successMessage: "Manifesto understood. Trust in code is the first principle. Click 'Next Step' to continue.",
                failureMessage: "Consider the inherent limitations of human promises versus mathematical guarantees. Click 'Deploy' to confirm understanding.",
                initialCodeTemplateKey: 'ethos_lesson1_1',
                visualEffectTrigger: 'codeShield',
                hintMessage: "Laws can be broken or changed by people. Code, if written correctly, executes exactly as intended, every time.",
                isCodingChallenge: false,
              },
              {
                id: 2,
                title: "The Crypto Anarchist Manifesto: Unstoppable Liberty",
                challenge: `Timothy C. May, a figure shrouded in digital mist, took the vision even further. His 'Crypto Anarchist Manifesto' painted a future where cryptography would dissolve the very power of the state, creating truly free and anonymous markets. This vision of an unstoppable, censorship-resistant digital realm is where the true heart of Web3 beats.

                **Reflection:** How does an 'anonymous, distributed digital cash system' fulfill the vision of a truly free and unstoppable market?`,
                successMessage: "Vision embraced. A future without central gatekeepers. Click 'Next Step' to continue.",
                failureMessage: "Think about how intermediaries can stop or control transactions. Click 'Deploy' to confirm understanding.",
                initialCodeTemplateKey: 'ethos_lesson1_2',
                visualEffectTrigger: 'digitalGhost',
                hintMessage: "If no single person or company can control the money, then no one can stop you from using it. That's true freedom in action.",
                isCodingChallenge: false,
              },
            ]
          },
        },
        // Lesson 3
        {
          id: 3,
          title: "The Genesis Block: Bitcoin's Cypherpunk Legacy",
          description: "Explore how Bitcoin brought cypherpunk ideals to life.",
          chapter: 2,
          difficulty: 'beginner',
          estimatedTime: 30,
          isPremium: false,
          content: {
            steps: [
              {
                id: 1,
                title: "The Fiat Chains - Why Bitcoin Was Born",
                challenge: `The old world's money, 'fiat currency,' was controlled by central banks and governments. It could be printed out of thin air, censored, or inflated away. This system felt like digital chains to those who valued financial freedom. The 2008 financial crisis exposed these flaws, and in the digital dust, a new idea was born.

                **Reflection:** How can a system where money supply is controlled by a single entity undermine individual freedom?`,
                successMessage: "Chains identified. The need for a new path. Click 'Next Step' to continue.",
                failureMessage: "Reflect on the power a centralized financial system holds over individuals. Click 'Deploy' to confirm understanding.",
                initialCodeTemplateKey: 'ethos_lesson2_1',
                visualEffectTrigger: 'bankBreaking',
                hintMessage: "Think about inflation, censorship, and access to funds. What happens when someone else has ultimate control over your money?",
                isCodingChallenge: false,
              },
              {
                id: 2,
                title: "Bitcoin: A Peer-to-Peer Electronic Cash System",
                challenge: `From the shadows, an anonymous figure, Satoshi Nakamoto, rode into the digital frontier with a revolutionary proposal: **Bitcoin**. It was the first true 'electronic cash' that didn't need a bank, a government, or any trusted middleman. It was a digital currency for the people, by the people, secured by pure cryptography.

                **Reflection:** How does eliminating the 'trusted third party' in financial transactions enhance privacy and decentralization?`,
                successMessage: "Bitcoin's core principle absorbed. Trustless transactions for a new new age. Click 'Next Step' to continue.",
                failureMessage: "Focus on the 'peer-to-peer' aspect. What does that remove from the equation? Click 'Deploy' to confirm understanding.",
                initialCodeTemplateKey: 'ethos_lesson2_2',
                visualEffectTrigger: 'decentralizedNodes',
                hintMessage: "When you send money directly to someone else, without a bank in the middle, who can stop it? No one.",
                isCodingChallenge: false,
              },
              {
                id: 3,
                title: "The Blockchain: A Public, Immutable Ledger",
                challenge: `At the heart of Bitcoin was the **blockchain** – a revolutionary 'digital ledger' that recorded every transaction not in a bank's secret book, but openly and immutably across a vast network of computers. Once a transaction was carved into this digital stone, it couldn't be changed. This public, decentralized truth became the backbone of our new digital world.

                **Reflection:** How does a public and immutable ledger contribute to a more transparent and fair financial system, even if the users are pseudonymous?`,
                successMessage: "Blockchain principles secured. The unchangeable truth. Click 'Next Step' to continue.",
                failureMessage: "Consider what 'public' and 'immutable' mean for accountability. Click 'Deploy' to confirm understanding.",
                initialCodeTemplateKey: 'ethos_lesson2_3',
                visualEffectTrigger: 'blockchainBlocks',
                hintMessage: "Even if you don't know *who* did something, you know *what* happened, and that it can't be covered up.",
                isCodingChallenge: false,
              },
            ]
          },
        },
        // Lesson 4
        {
          id: 4,
          title: "The Crossroads: Web3's Path and Future",
          description: "Understand the evolution of Web3 and re-align with core ideals.",
          chapter: 3,
          difficulty: 'beginner',
          estimatedTime: 30,
          isPremium: false,
          content: {
            steps: [
              {
                id: 1,
                title: "Ethereum & Smart Contracts: Expanding the Vision",
                challenge: `Bitcoin proved that decentralized money was possible. But soon, new pioneers arrived, pushing the frontier further. Ethereum, with its 'smart contracts,' allowed not just money, but **any kind of digital agreement** to be executed automatically and transparently on the blockchain. The digital Wild West just got a lot more sophisticated.

                **Reflection:** How do smart contracts enhance the idea of 'code is law' by making agreements self-enforcing without human intervention?`,
                successMessage: "Smart Contracts understood. Code as unstoppable agreement. Click 'Next Step' to continue.",
                failureMessage: "Think about what 'self-enforcing' means for trust and intermediaries. Click 'Deploy' to confirm understanding.",
                initialCodeTemplateKey: 'ethos_lesson3_1',
                visualEffectTrigger: 'smartContractGears',
                hintMessage: "If the rules are written in code, and that code runs automatically, you don't need a judge or lawyer to enforce it.",
                isCodingChallenge: false,
              },
              {
                id: 2,
                title: "The Rise of DeFi & NFTs: Promises and Perils",
                challenge: `The frontier exploded with innovation: Decentralized Finance (DeFi) offered banks made of code, and Non-Fungible Tokens (NFTs) gave us true digital ownership of art, collectibles, and even virtual land. But with this rapid growth came new challenges – the lure of easy riches, scams lurking in the shadows, and the constant threat of centralization creeping back into the decentralized dream.

                **Reflection:** How can we, as builders and users, ensure that the growth of Web3 (like DeFi and NFTs) remains true to the original cypherpunk ideals of decentralization and individual control?`,
                successMessage: "Perils recognized, vigilance heightened. The fight for true decentralization continues. Click 'Next Step' to continue.",
                failureMessage: "Consider where power can accumulate in new systems. How can we prevent that? Click 'Deploy' to confirm understanding.",
                initialCodeTemplateKey: 'ethos_lesson3_2',
                visualEffectTrigger: 'digitalMarketplace',
                hintMessage: "Even in Web3, some services become very popular and centralize power. We need to actively choose decentralized alternatives and build them robustly.",
                isCodingChallenge: false,
              },
              {
                id: 3,
                title: "The Path Forward: Realigning with the Ethos",
                challenge: `The digital frontier is vast and ever-changing. As new builders like you join the ranks, it's crucial to remember the code of honor established by the original cypherpunks. To truly build a decentralized future, we must constantly question centralization, champion privacy, and ensure that our innovations serve liberty, not control. Your journey is not just about writing code; it's about building a better digital world.

                **Reflection:** As a future Solana developer, how will you incorporate the principles of privacy, decentralization, and censorship resistance into the applications you build?`,
                successMessage: "Ethos embraced! Your journey as a builder aligned with the true spirit of Web3 begins now. Click 'Next' to move to your first coding challenge!",
                failureMessage: "Reflect on your role in shaping the decentralized future. What principles will guide your work? Click 'Deploy' to confirm understanding.",
                initialCodeTemplateKey: 'ethos_lesson3_3',
                visualEffectTrigger: 'glowingPath',
                hintMessage: "Every piece of code you write, every decision you make, can either reinforce centralization or push towards more freedom and privacy.",
                isCodingChallenge: false,
              },
            ]
          },
        },
    // --- ORIGINAL Solana Lessons (IDs SHIFTED and chapter updated) ---
    {
        id: 5, // Original Lesson 1 (Solana Basics & Wallet Setup)
        title: "Solana Basics & Wallet Setup",
        description: "Learn the fundamentals of Solana and set up your Web3 wallet",
        chapter: 4, // Chapter adjusted
        difficulty: 'beginner',
        estimatedTime: 30,
        isPremium: false,
        content: {
            steps: [
                {
                    id: 1,
                    title: "Ping the Blockchain: Your First Transmission",
                    challenge: `Welcome, new recruit! Your mission begins now. This isn't just a game; it's a training simulation in the digital frontier. Your first task is to establish a connection with the Solana Devnet – think of it as sending a tiny digital "ping" to see if the network is alive and responding.

                    Below, you'll see your **Code Terminal**, a powerful tool for writing Solana programs. It starts with some basic program structure. Don't worry about understanding all of it yet! We'll guide you.

                    **Your Task:**
                    1.  Find the special area in your **Code Terminal** marked with comments like \`// Your code goes here\` or \`# Your code goes here\`.
                    2.  Type the following command into that area: \`get_network_status()\`
                    3.  Click the **"Deploy"** button to send your command.

                    Watch the "Console Output" below your code for a response! This is how your program communicates with the Solana network.`,
                    expectedCodePattern: { rust: 'get_network_status\\(\\)', python: 'get_network_status\\(\\)' },
                    successMessage: "Transmission received! Network Status: Connected! Ping: {ping}ms | Current Slot: {slot}. You've made your first connection!",
                    failureMessage: "Transmission failed. The `get_network_status()` command was not found or is misspelled. Please ensure you typed it exactly as shown in the designated area. Double-check for typos!",
                    initialCodeTemplateKey: 'default',
                    visualEffectTrigger: 'networkPing',
                    hintMessage: "Hey there! To complete this first step, type `get_network_status()` exactly as you see it into the designated section of your Code Terminal. Then, click the 'Deploy' button. This function call is like pressing a big red button to check the network!",
                    isCodingChallenge: true, // Mark as coding challenge
                },
            ]
        },
    },
    {
        id: 6, // Original Lesson 2
        title: "Creating Your Ranch Account",
        description: "Build your first Solana program to manage ranch data",
        chapter: 5, // Chapter adjusted
        difficulty: 'beginner',
        estimatedTime: 45,
        isPremium: false,
        content: {
            steps: [
                {
                    id: 1,
                    title: "Define Ranch Owner Field",
                    challenge: "Your ranch needs an owner! In the `Ranch` struct (Rust) or `Ranch` class (Python), add a `pubkey` field named `owner`. This will identify who controls the ranch. Don't forget the comma for Rust!",
                    expectedCodePattern: { rust: 'pub\\s+owner:\\s*Pubkey,', python: 'owner:\\s*Pubkey' },
                    successMessage: "Excellent! The `owner` field has been added. Your ranch now knows who its rightful owner is!",
                    failureMessage: "Not quite. Make sure you've added 'pub owner: Pubkey,' (Rust) or 'owner: Pubkey' (Python) exactly inside the Ranch definition. Check for typos and correct capitalization!",
                    initialCodeTemplateKey: 'ranch_management_initial',
                    visualEffectTrigger: 'blueprint',
                    hintMessage: "Think about Rust structs or Python classes. You need to add a line that declares a public key variable named 'owner' within your 'Ranch' data structure.",
                    isCodingChallenge: true,
                },
                {
                    id: 2,
                    title: "Initialize Owner in `initialize_ranch`",
                    challenge: "Now, inside the `initialize_ranch` function, assign the `owner` field of your `ranch` account to the `ctx.accounts.owner.key()` (Rust) or `owner.key()` (Python). Remember `ranch.owner = ctx.accounts.owner.key();` or `ranch.owner = owner.key()`.",
                    expectedCodePattern: { rust: 'ranch\\.owner\\s*=\\s*ctx\\.accounts\\.owner\\.key\\(\\);', python: 'ranch\\.owner\\s*=\\s*owner\\.key\\(\\)' },
                    successMessage: "Owner successfully initialized! Your ranch deed is now registered to you!",
                    failureMessage: "The owner assignment is incorrect. Double-check the syntax for assigning the owner's key to the ranch account. Hint: Look at the `ctx.accounts.owner` context in Rust or `owner` parameter in Python.",
                    initialCodeTemplateKey: 'ranch_management_step1_complete',
                    visualEffectTrigger: 'sparkle',
                    hintMessage: "You need to set the 'owner' field of your 'ranch' variable to the public key of the user who's calling this program. In Rust, you'll use `ctx.accounts.owner.key()`; in Python, `owner.key()`.",
                    isCodingChallenge: true,
                },
                {
                    id: 3,
                    title: "Programmatic Ownership: Securing Your Ranch with a Program Derived Address (PDA)",
                    challenge: `Welcome, digital homesteader! In this decentralized frontier, we value true ownership and privacy. Unlike the old world where deeds were on paper in a dusty office, here, your ranch deed can be controlled by pure code! This is the essence of **cypher-punk** – using cryptography and decentralized tech to protect privacy and freedom.
                    Today, we're diving into **Program Derived Addresses (PDAs)**. Imagine your ranch deed isn't owned by a specific wallet with a private key, but by a special, unhackable 'strongbox' that *only your ranch program can open*. This strongbox address is *derived* from your program's ID and some unique 'seeds' (like a secret password) and a 'bump' (a special number to make sure it's valid). This makes your ranch truly **decentralized** and secure, giving control to the smart contract itself, not a person's key.

                    **Your Task:**
                    1.  In the \`InitializeRanch\` struct (Rust) or function definition (Python), locate the \`#[account(...)]\` attribute for your \`ranch\` account.
                    2.  **Add a \`seeds\` argument** to this attribute. For the ranch, the seeds will be the byte literal \`b"ranch"\` and the owner's public key (\`owner.key().as_ref()\` in Rust, \`owner\` in Python).
                    3.  **Add a \`bump\` argument** to this attribute. This is a special nonce that ensures the PDA is valid.`,
                    expectedCodePattern: {
                        rust: 'seeds\\s*=\\s*\\[b"ranch",\\s*owner\\.key\\(\\)\\.as_ref\\(\\)\\]\\s*,\\s*bump',
                        python: 'seeds=\\[\'ranch\',\\s*owner\\]\\s*,\\s*bump'
                    },
                    successMessage: "Fantastic! Your ranch account is now a true Program Derived Address (PDA)! Its deed is safely locked away, controlled by your program, not a private key. You've embraced programmatic ownership!",
                    failureMessage: "Not quite. Double-check your PDA syntax. Did you add `seeds` and `bump` correctly within the `#[account(...)]` attribute (Rust) or `init` arguments (Python)? Remember the exact values for the seeds (`b\"ranch\"` and the owner's key) and that `bump` is also required!",
                    initialCodeTemplateKey: 'ranch_management_step2_complete',
                    visualEffectTrigger: 'dataStream',
                    hintMessage: `Okay, digital prospector! Think of PDAs like a magic lockbox only your program can open. You need to tell Solana:
                    1.  What 'words' (seeds) make this lockbox unique (e.g., the word "ranch" and the owner's special key).
                    2.  A special number (the 'bump') that makes sure the lockbox address is perfect and unhackable.
                    Look at the \`#[account(...)]\` line for the \`ranch\` in Rust, or the \`.init()\` call in Python, and add the \`seeds\` and \`bump\` keywords!`,
                    isCodingChallenge: true,
                },
            ]
        },
    },
    {
        id: 7, // Original Lesson 3
        title: "Minting Character NFTs",
        description: "Create unique cowboy and outlaw NFTs with custom traits",
        chapter: 6, // Chapter adjusted
        difficulty: 'intermediate',
        estimatedTime: 60,
        isPremium: false,
        content: {
            steps: [
                { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
            ]
        }
    },
    {
        id: 8, // Original Lesson 4
        title: "RanchCoin Token Creation",
        description: "Deploy your own SPL token for in-game economy",
        chapter: 7, // Chapter adjusted
        difficulty: 'intermediate',
        estimatedTime: 50,
        isPremium: true,
        content: {
            steps: [
                { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
            ]
        }
    },
    {
        id: 9, // Original Lesson 5
        title: "Saloon Dueling System",
        description: "Program interactive duels and betting mechanics",
        chapter: 8, // Chapter adjusted
        difficulty: 'advanced',
        estimatedTime: 75,
        isPremium: true,
        content: {
            steps: [
                { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
            ]
        }
    },
    {
        id: 10, // Original Lesson 6
        title: "Security & Ranch Defense",
        description: "Implement security measures against shadow beasts",
        chapter: 9, // Chapter adjusted
        difficulty: 'advanced',
        estimatedTime: 90,
        isPremium: true,
        content: {
            steps: [
                { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
            ]
        }
    },
    {
        id: 11, // Original Lesson 7
        title: "Ether Range Expeditions",
        description: "Master cross-program invocations and external integrations",
        chapter: 10, // Chapter adjusted
        difficulty: 'advanced',
        estimatedTime: 120,
        isPremium: true,
        content: {
            steps: [
                { id: 1, title: "Coming Soon...", challenge: "This lesson is under development.", expectedCodePattern: {}, successMessage: "", failureMessage: "", initialCodeTemplateKey: 'default', isCodingChallenge: true }
            ]
        }
    }
];
Phase 2: Update Code Templates for Ethos LessonsObjective: Provide static code snippets or thematic ASCII art for the new ethos lessons, and adjust comments in existing templates.Completely REPLACE client/src/data/code-templates.ts Content:File: client/src/data/code-templates.tsAction: DELETE ALL EXISTING CONTENT in this file. Then, PASTE THE ENTIRE BLOCK BELOW.Implementation:// client/src/data/code-templates.ts - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
export const rustTemplates = {
  default: `use anchor_lang::prelude::*;\n\ndeclare_id!("YourProgramID");\n\n#[program]\npub mod my_program {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {\n        // --- Your code goes here! ---\n        // Type: get_network_status()\n        // Example: msg!("Hello World!");\n        // -----------------------------\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(mut)]\n    pub payer: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n`,
  // Ethos Lesson Templates (Non-coding)
  ethos_lesson0_1: `// Code for freedom, not control.\n// Welcome to the digital frontier.\n\n/*\nHistory shows that control leads to oppression.\nOur fight is for a decentralized future.\n*/\n`,
  ethos_lesson0_2: `// Privacy is power.\n// Cryptography is the shield.\n\n/*\nCypherpunks write code.\nWe are going to write it.\n*/\n`,
  ethos_lesson1_1: `// A Cypherpunk's Manifesto\n// by Eric Hughes\n\n/*\nPrivacy is necessary for an open society in the electronic age.\n... We cannot expect governments, corporations... to grant us privacy.\n*/\n`,
  ethos_lesson1_2: `// The Crypto Anarchist Manifesto\n// by Timothy C. May\n\n/*\nFully anonymous, untraceable transactions.\nStrong cryptography will forever alter the nature of governments.\n*/\n`,
  ethos_lesson2_1: `// The Fiat Chains\n// 2008: A crisis of centralization.\n\n/*\nMoney supply controlled by a few.\nCensorship, inflation, and lack of true ownership.\n*/\n`,
  ethos_lesson2_2: `// Bitcoin Whitepaper (Excerpt)\n// A Peer-to-Peer Electronic Cash System\n\n/*\n"A purely peer-to-peer version of electronic cash would allow online payments\nto be sent directly from one party to another without going through a financial institution."\n*/\n`,
  ethos_lesson2_3: `// The Blockchain\n// Immutability and Transparency.\n\n/*\n"The network timestamps transactions by hashing them into an ongoing chain of hash-based\nproof-of-work, forming a record that cannot be changed without redoing the proof-of-work."\n*/\n`,
  ethos_lesson3_1: `// Ethereum & Smart Contracts\n// Code is law, self-enforcing.\n\n/*\n"A smart contract is a computer protocol intended to digitally facilitate, verify,\nor enforce the negotiation or performance of a contract."\n*/\n`,
  ethos_lesson3_2: `// DeFi & NFTs: Promises and Perils\n// Innovation vs. Centralization's creeping threat.\n\n/*\nDecentralized Finance aims to recreate traditional financial systems without intermediaries.\nNFTs provide unique digital ownership.\n*/\n`,
  ethos_lesson3_3: `// The Path Forward\n// Realigning with the Ethos.\n\n/*\nQuestion centralization.\nChampion privacy.\nBuild for liberty.\n*/\n`,

  // Solana Programming Templates
  ranch_management_initial: `use anchor_lang::prelude::*;

declare_id!("RanchManager111111111111111111111111111111");#[program]pub mod ranch_manager {use super::*;pub fn initialize_ranch(
    ctx: Context<InitializeRanch>,
    ranch_name: String,
) -> Result<()> {
    let ranch = &mut ctx.accounts.ranch;
    // TODO: Assign owner field here in a later step (L6S2)
    ranch.name = ranch_name;
    ranch.level = 1;
    ranch.experience = 0;
    ranch.ranch_coin_balance = 500;
    ranch.building_count = 0;
    ranch.character_count = 0;
    ranch.created_at = Clock::get()?.unix_timestamp;

    msg!("Ranch '{}' initialized for owner {}", ranch.name, ranch.owner);
    Ok(())
}
}#[derive(Accounts)]#[instruction(ranch_name: String)]pub struct InitializeRanch<'info> {#[account(init,payer = owner,space = 8 + Ranch::INIT_SPACE,// USER ADDS SEEDS AND BUMP HERE IN L6S3// seeds = [b"ranch", owner.key().as_ref()],// bump)]pub ranch: Account<'info, Ranch>,#[account(mut)]
pub owner: Signer<'info>,
pub system_program: Program<'info, System>,
}#[account]pub struct Ranch {// USER ADDS PUB OWNER: PUBKEY, HERE IN L6S1pub ranch_coin_balance: u64, // 8pub building_count: u8,     // 1pub character_count: u8,    // 1pub created_at: i64,        // 8pub name: String,           // 4 + 32pub level: u8,              // 1pub experience: u64,        // 8}impl Ranch {const INIT_SPACE: usize = 8 + 1 + 1 + 8 + 4 + 32 + 1 + 8; // Adjust space as fields are added}#[error_code]pub enum ErrorCode {#[msg("Unauthorized access to ranch")]UnauthorizedAccess,}, ranch_management_step1_complete: use anchor_lang::prelude::*;declare_id!("RanchManager111111111111111111111111111111");#[program]pub mod ranch_manager {use super::*;pub fn initialize_ranch(
    ctx: Context<InitializeRanch>,
    ranch_name: String,
) -> Result<()> {
    let ranch = &mut ctx.accounts.ranch;
    ranch.owner = ctx.accounts.owner.key(); // This line is added in L6S2
    ranch.name = ranch_name;
    ranch.level = 1;
    ranch.experience = 0;
    ranch.ranch_coin_balance = 500;
    ranch.building_count = 0;
    ranch.character_count = 0;
    ranch.created_at = Clock::get()?.unix_timestamp;

    msg!("Ranch '{}' initialized for owner {}", ranch.name, ranch.owner);
    Ok(())
}
}#[derive(Accounts)]#[instruction(ranch_name: String)]pub struct InitializeRanch<'info> {#[account(init,payer = owner,space = 8 + 32 + 4 + 32 + 1 + 8 + 8 + 1 + 1 + 8, // Adjusted space for 'owner: Pubkey'// USER ADDS SEEDS AND BUMP HERE IN L6S3// seeds = [b"ranch", owner.key().as_ref()],// bump)]pub ranch: Account<'info, Ranch>,#[account(mut)]
pub owner: Signer<'info>,
pub system_program: Program<'info, System>,
}#[account]pub struct Ranch {pub owner: Pubkey, // This line is added in L6S1pub ranch_coin_balance: u64,pub building_count: u8,pub character_count: u8,pub created_at: i64,pub name: String,pub level: u8,pub experience: u64,}impl Ranch {const INIT_SPACE: usize = 32 + 4 + 32 + 1 + 8 + 8 + 1 + 1 + 8; // Updated for Pubkey (32 bytes)}#[error_code]pub enum ErrorCode {#[msg("Unauthorized access to ranch")]UnauthorizedAccess,}`,};    export const pythonTemplates = {
      default: `import seahorse.prelude.*
declare_id('YourProgramID')@instructiondef initialize(payer: Signer):"""Initialize a new program"""# --- Your code goes here! ---# Example: print("Hello World!")# ----------------------------pass # Keep this line unless you replace it with actual code, // Ethos Lesson Templates (Non-coding) ethos_lesson0_1: # Code for freedom, not control.\n# Welcome to the digital frontier.\n\n# History shows that control leads to oppression.\n# Our fight is for a decentralized future.\n, ethos_lesson0_2: # Privacy is power.\n# Cryptography is the shield.\n\n# Cypherpunks write code.\n# We are going to write it.\n, ethos_lesson1_1: # A Cypherpunk's Manifesto\n# by Eric Hughes\n\n# Privacy is necessary for an open society in the electronic age.\n# We cannot expect governments, corporations... to grant us privacy.\n, ethos_lesson1_2: # The Crypto Anarchist Manifesto\n# by Timothy C. May\n\n# Fully anonymous, untraceable transactions.\n# Strong cryptography will forever alter the nature of governments.\n, ethos_lesson2_1: # The Fiat Chains\n# 2008: A crisis of centralization.\n\n# Money supply controlled by a few.\n# Censorship, inflation, and lack of true ownership.\n, ethos_lesson2_2: # Bitcoin Whitepaper (Excerpt)\n# A Peer-to-Peer Electronic Cash System\n\n# "A purely peer-to-peer version of electronic cash would allow online payments\n# to be sent directly from one party to another without going through a financial institution."\n, ethos_lesson2_3: # The Blockchain\n# Immutability and Transparency.\n\n# "The network timestamps transactions by hashing them into an ongoing chain of hash-based\n# proof-of-work, forming a record that cannot be changed without redoing the proof-of-work."\n, ethos_lesson3_1: # Ethereum & Smart Contracts\n# Code is law, self-enforcing.\n\n# "A smart contract is a computer protocol intended to digitally facilitate, verify,\n# or enforce the negotiation or performance of a contract."\n, ethos_lesson3_2: # DeFi & NFTs: Promises and Perils\n# Innovation vs. Centralization's creeping threat.\n\n# Decentralized Finance aims to recreate traditional financial systems without intermediaries.\n# NFTs provide unique digital ownership.\n, ethos_lesson3_3: # The Path Forward\n# Realigning with the Ethos.\n\n# Question centralization.\n# Champion privacy.\n# Build for liberty.\n`,      // Solana Programming Templates
      ranch_management_initial: `import seahorse.prelude.*
declare_id('RanchManager111111111111111111111111111111')class Ranch(Account):# USER ADDS OWNER: PUBKEY HERE IN L6S1ranch_coin_balance: u64building_count: u8character_count: u8created_at: i64name: strlevel: u8experience: u64@instructiondef initialize_ranch(ranch: Empty[Ranch],owner: Signer,ranch_name: str):"""Initialize a new ranch"""ranch = ranch.init(payer=owner,space=8 + 32 + 32 + 1 + 8 + 8 + 1 + 1 + 8, // Adjust space# USER ADDS SEEDS AND BUMP HERE IN L6S3# seeds=['ranch', owner],# bump)# TODO: Assign owner field here in a later step (L6S2)
ranch.name = ranch_name
ranch.level = 1
ranch.experience = 0
ranch.ranch_coin_balance = 500
ranch.building_count = 0
ranch.character_count = 0
ranch.created_at = Clock.unix_timestamp()

print(f"Ranch '{ranch_name}' initialized for owner {owner.key()}")
, ranch_management_step1_complete: import seahorse.prelude.*declare_id('RanchManager111111111111111111111111111111')class Ranch(Account):owner: Pubkey # This line is added in L6S1ranch_coin_balance: u64building_count: u8character_count: u8created_at: i64name: strlevel: u8experience: u64@instructiondef initialize_ranch(ranch: Empty[Ranch],owner: Signer,ranch_name: str):"""Initialize a new ranch"""ranch = ranch.init(payer=owner,space=8 + 32 + 32 + 1 + 8 + 8 + 1 + 1 + 8, // Adjusted space# USER ADDS SEEDS AND BUMP HERE IN L6S3# seeds=['ranch', owner],# bump)ranch.owner = owner.key() // This line is added in L6S2
ranch.name = ranch_name
ranch.level = 1
ranch.experience = 0
ranch.ranch_coin_balance = 500
ranch.building_count = 0
ranch.character_count = 0
ranch.created_at = Clock.unix_timestamp()

print(f"Ranch '{ranch_name}' initialized for owner {owner.key()}")
`,};```Phase 2: Fix <a> Nesting Warning in Header.tsx (CRITICAL HTML FIX)Objective: Resolve the <a> cannot appear as a descendant of <a> warning by ensuring Link components from wouter are not nested.Refactor Header.tsx Navigation:File: client/src/components/layout/Header.tsxAction: Modify how navigation links are rendered to avoid nesting <a> tags.Implementation:// client/src/components/layout/Header.tsx - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
import { Link, useLocation } from 'wouter';
import { WalletButton } from '../wallet/WalletButton';
import { cn } from '@/lib/utils';

export function Header() {
  const [location] = useLocation();

  const navItems = [
    { href: '/', label: 'Home' },
    { href: '/lessons', label: 'Lessons' },
    { href: '/playground', label: 'Playground' },
    { href: '/ranch', label: 'My Ranch' },
  ];

  return (
    <header className="relative z-50 border-b border-border/20 backdrop-blur-sm bg-background/80">
      <div className="container mx-auto px-4 py-6">
        <div className="flex items-center justify-between">
          {/* Logo & Title */}
          <Link href="/">
            {/* Direct child of wouter's Link should be the clickable element */}
            <a className="flex items-center space-x-4 cursor-pointer">
              <div className="w-12 h-12 bg-gradient-tech rounded-lg flex items-center justify-center glow-tech-cyan animate-glow">
                <span className="text-2xl">⚡</span>
              </div>
              <div>
                <h1 className="text-4xl font-titulo text-tech-cyan">
                  BRB: A Solana Adventure
                </h1>
                <p className="text-sm text-tech-cyan font-tech mt-1">
                  Learn Solana • Build dApps • Master Web3 Development
                </p>
              </div>
            </a>
          </Link>

          {/* Navigation */}
          <nav className="hidden lg:flex items-center space-x-6">
            {navItems.map(({ href, label }) => (
              <Link key={href} href={href}>
                {/* Direct child of wouter's Link should be the clickable element */}
                <a
                  className={cn(
                    'font-tech text-sm uppercase tracking-wider transition-all duration-300 px-3 py-2 rounded-md',
                    location === href
                      ? 'text-tech-cyan bg-tech-cyan/10 border border-tech-cyan/30'
                      : 'text-foreground hover:text-tech-cyan hover:bg-tech-cyan/5'
                  )}
                >
                  {label}
                </a>
              </Link>
            ))}
          </nav>

          {/* Wallet Connection */}
          <div className="flex items-center space-x-4">
            <WalletButton />
          </div>
        </div>
      </div>
    </header>
  );
}
Phase 3: Finalize Layout Overlap & Positioning Fixes (Re-application)Objective: Ensure all UI elements are correctly spaced and positioned, preventing overlaps.Refine LessonLayout.tsx Header & Main Content Flow (CRITICAL FIX):File: client/src/components/lessons/LessonLayout.tsxAction: Ensure the fixed header pushes content down correctly and the layout is a proper flex column.Implementation:On the outermost div of LessonLayout (which currently has min-h-screen bg-gradient-to-br ...), ensure it has the Tailwind classes flex flex-col.The div containing the Progress Header (border-b border-border/20 ... sticky top-0 z-40) must be changed from sticky top-0 z-40 to fixed top-0 left-0 right-0 z-40 w-full. This will make it consistently fixed at the top and prevent content from scrolling under it.Determine the actual height of this fixed header. Inspect the element in the browser's developer tools. Let's assume its height is 120px (including padding/margins).Apply padding-top to the <main> element to push its content below the fixed header:<main className="flex-grow pt-[120px] pb-[80px]"> {/* Add padding-bottom for fixed bottom nav */}
  {children}
</main>
Note: The pb-[80px] is for the fixed bottom navigation bar (defined below).Relocate Navigation Buttons to Bottom in LessonLayout.tsx (CRITICAL FIX):File: client/src/components/lessons/LessonLayout.tsxAction: Move the "Previous" and "Next" buttons from the top header to a new fixed navigation bar at the bottom of the lesson content.Implementation:Remove the div containing the "Previous" and "Next" buttons from the Progress Header section at the top.Create a new div at the very bottom of the LessonLayout.tsx component, just before its closing </div> tag. This div will serve as the bottom navigation bar.Give this new div the following classes:{/* NEW: Fixed Bottom Navigation Bar (COPY THIS ENTIRE BLOCK) */}
<div className="fixed bottom-0 left-0 right-0 z-40 w-full
                flex items-center justify-between px-4 py-4
                bg-background/80 backdrop-blur-sm
                border-t border-border/20">
  {/* Previous Button */}
  <Button
    onClick={onPrevious}
    disabled={!hasPrevious}
    variant="outline"
    size="sm"
    className="text-xs"
  >
    <ChevronLeft className="w-4 h-4 mr-1" />
    Previous
  </Button>
  {/* Next Button */}
  <Button
    onClick={onNext}
    disabled={nextButtonDisabled} {/* Use the disabled state calculated in LDP */}
    variant="default"
    size="sm"
    className="tech-button tech-button-primary text-xs"
  >
    {nextButtonText || 'Next'} {/* Use the new prop */}
    <ChevronRight className="w-4 h-4 ml-1" />
  </Button>
</div>
Ensure TechButton and Button imports are correct.Verify MainLayout.tsx Footer Positioning (CRITICAL FIX):File: client/src/components/layout/MainLayout.tsxAction: Confirm the "sticky footer" pattern is correctly implemented.Implementation:Ensure the outermost div (min-h-screen bg-gradient-to-br ...) definitively has the Tailwind classes flex flex-col.Ensure the <main> element (relative z-10) definitively has flex-grow.The footer should now automatically be pushed to the bottom. Review the mt- (margin-top) class on the <footer> element. If it's mt-20, try reducing it to mt-10 or mt-8 for a more compact appearance.Phase 4: Implement Missing Components & Logic (Reward, Hint, PIXI.js, Console Polish)Objective: Implement the visual reward system, the interactive hint character, begin PIXI.js refactoring for GameCanvas, and finalize console output improvements.Implement ChallengeReward.tsx Component:File: client/src/components/game/ChallengeReward.tsx (new file)Action: Create a full-screen overlay component for "CORRECT" text and animated NFT.Implementation:// client/src/components/game/ChallengeReward.tsx - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
'use client';
import React, { useEffect, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { cn } from '@/lib/utils'; // Assuming cn utility is available

interface ChallengeRewardProps {
  isVisible: boolean;
  nftImageUrl: string | null;
}

export const ChallengeReward: React.FC<ChallengeRewardProps> = ({ isVisible, nftImageUrl }) => {
  const [showContent, setShowContent] = useState(false);

  useEffect(() => {
    if (isVisible) {
      setShowContent(true);
      const timer = setTimeout(() => {
        setShowContent(false);
      }, 3500); // Display for 3.5 seconds
      return () => clearTimeout(timer);
    }
  }, [isVisible]);

  return (
    <AnimatePresence>
      {showContent && isVisible && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{ duration: 0.3 }}
          className="fixed inset-0 z-[100] flex flex-col items-center justify-center pointer-events-none
                     bg-black/70 backdrop-blur-sm px-4 py-8"
        >
          <motion.h1
            initial={{ opacity: 0, scale: 0.5 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.5 }}
            transition={{ duration: 0.5, ease: "easeOut" }}
            className="text-8xl md:text-9xl font-titulo text-tech-cyan text-shadow-matrix mb-8 md:mb-12"
          >
            CORRECT
          </motion.h1>

          {nftImageUrl && (
            <motion.div
              initial={{ opacity: 0, y: 50, scale: 0.7 }}
              animate={{ opacity: 1, y: 0, scale: 1 }}
              exit={{ opacity: 0, y: -50, scale: 0.7 }}
              transition={{ delay: 0.2, duration: 0.5, ease: "easeOut" }}
              className="relative w-48 h-48 md:w-64 md:h-64 flex items-center justify-center p-4 rounded-xl shadow-lg glow-tech-cyan
                         bg-gradient-to-br from-tech-purple/20 to-tech-pink/20 border-2 border-tech-cyan"
            >
              <img
                src={nftImageUrl}
                alt="Reward NFT"
                className="w-full h-full object-contain rounded-md"
                onError={(e) => { e.currentTarget.src = '[https://placehold.co/256x256/3a3340/99cccc?text=NFT+Error](https://placehold.co/256x256/3a3340/99cccc?text=NFT+Error)'; }}
              />
               <span className="absolute bottom-2 text-tech-cyan font-tech text-sm">Reward Unlocked!</span>
            </motion.div>
          )}
        </motion.div>
      )}
    </AnimatePresence>
  );
};
Implement HintCharacter.tsx Component:File: client/src/components/lessons/HintCharacter.tsx (new file)Action: Create a reusable component for character-based pop-up hints.Implementation:// client/src/components/lessons/HintCharacter.tsx - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
'use client';
import React, { useState, useEffect, forwardRef, useImperativeHandle } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { cn } from '@/lib/utils'; // Assuming cn utility is available

interface HintCharacterProps {
  characterImage?: string;
}

export interface HintCharacterRef {
  showHint: (message: string) => void;
}

export const HintCharacter = forwardRef<HintCharacterRef, HintCharacterProps>(
  ({ characterImage = '/assets/images/scientist-character.png' }, ref) => {
    const [isVisible, setIsVisible] = useState(false);
    const [message, setMessage] = useState('');
    const [timeoutId, setTimeoutId] = useState<NodeJS.Timeout | null>(null);

    useImperativeHandle(ref, () => ({
      showHint: (msg: string) => {
        if (timeoutId) clearTimeout(timeoutId); // Clear any existing hint
        setMessage(msg);
        setIsVisible(true);
        const id = setTimeout(() => {
          setIsVisible(false);
          setMessage('');
        }, 7000); // Hint displayed for 7 seconds
        setTimeoutId(id);
      },
    }));

    // Preload image
    useEffect(() => {
      const img = new Image();
      img.src = characterImage;
    }, [characterImage]);

    return (
      <AnimatePresence>
        {isVisible && (
          <motion.div
            initial={{ opacity: 0, x: -100 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -100 }}
            transition={{ type: "spring", stiffness: 100, damping: 15 }}
            className="fixed bottom-4 left-4 z-[90] flex items-end space-x-4 pointer-events-auto"
          >
            <motion.img
              src={characterImage}
              alt="AI Assistant"
              className="w-28 h-28 object-contain"
              initial={{ rotate: 0 }}
              animate={{ rotate: [0, -5, 5, -5, 0] }} // Subtle idle animation
              transition={{ repeat: Infinity, duration: 5, ease: "easeInOut" }}
            />
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
              transition={{ delay: 0.2, type: "spring", stiffness: 100, damping: 15 }}
              className="relative bg-tech-cyan rounded-xl p-4 text-background font-tech text-base max-w-sm shadow-lg
                         before:absolute before:bottom-0 before:left-[10px] before:w-0 before:h-0
                         before:border-x-[15px] before:border-t-[15px] before:border-solid before:border-transparent
                         before:border-t-tech-cyan before:transform before:translate-y-full"
            >
              {message}
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    );
  }
);
HintCharacter.displayName = 'HintCharacter';
Refactor GameCanvas.tsx to use PIXI.js (CRITICAL VISUAL UPGRADE):File: client/src/components/game/GameCanvas.tsxAction: Replace all raw Canvas2D drawing (ctx.fillRect, ctx.arc, ctx.fillText) with PIXI.js objects. Implement PIXI.js rendering for all static and dynamic elements, and add dataStream visual effect.Implementation:// client/src/components/game/GameCanvas.tsx - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
'use client';
import React, { useRef, useEffect, useState } from 'react';
import * as PIXI from 'pixi.js';
import { useGameStore } from '@/hooks/use-game-store'; // Ensure correct path
import { cn } from '@/lib/utils';

// Interface for GameCanvas props
interface GameCanvasProps {
  width?: number;
  height?: number;
  className?: string;
  // Visual effect flags passed from useGameStore
  networkPingActive?: boolean;
  sparkleActive?: boolean;
  coinFallActive?: boolean;
  lastStoredMessage?: string | null;
  transactionActive?: boolean;
  dataStreamActive?: boolean; // For PDA challenge
}

// Main GameCanvas component
export function GameCanvas({
  width = 800,
  height = 400,
  className,
  networkPingActive,
  sparkleActive,
  coinFallActive,
  lastStoredMessage,
  transactionActive,
  dataStreamActive,
}: GameCanvasProps) {
  const canvasRef = useRef<HTMLDivElement>(null); // Ref for the container div
  const appRef = useRef<PIXI.Application | null>(null); // Ref for the PIXI Application
  const [isLoaded, setIsLoaded] = useState(false);
  const { ranchData, characters, buildings } = useGameStore(); // Game state from Zustand

  // Master useEffect for PIXI application lifecycle
  useEffect(() => {
    if (!canvasRef.current) return;

    // Initialize PIXI application
    const app = new PIXI.Application({
      width,
      height,
      backgroundColor: 0x1A237E, // Dark tech blue from theme (mystic-900)
      antialias: true,
      autoDensity: true, // For high DPI screens
      resolution: window.devicePixelRatio || 1,
    });

    appRef.current = app; // Store app instance in ref
    canvasRef.current.appendChild(app.view as HTMLCanvasElement); // Append PIXI canvas to the div

    // Load assets and set up initial scene
    const setupScene = async () => {
      // Preload assets (e.g., character sprites, building textures)
      // For now, using simple shapes/emojis as placeholders, but this is where real assets would load.
      // Example for future: await PIXI.Assets.load('path/to/character.png');

      // Create background layers
      createBackground(app);

      // Create static ranch elements
      createRanchBase(app);

      // Add UI elements that are part of the PIXI scene (if any, like resource counters)
      // For now, resource counters are HTML overlay.

      setIsLoaded(true);
    };

    setupScene();

    // Cleanup function: destroy PIXI app on component unmount
    return () => {
      if (appRef.current) {
        appRef.current.destroy(true); // Destroy PIXI app and its view
        appRef.current = null;
      }
    };
  }, [width, height]); // Re-run if canvas dimensions change

  // Effect for updating scene based on game state and visual effect flags
  useEffect(() => {
    if (!appRef.current || !isLoaded) return;
    const app = appRef.current;

    // Clear previous dynamic elements (e.g., characters, temporary effects)
    app.stage.children.forEach(child => {
        if (child.name && (child.name.startsWith('character_') || child.name.startsWith('building_dynamic_') || child.name.startsWith('effect_'))) {
            app.stage.removeChild(child);
            child.destroy();
        }
    });

    // Re-draw dynamic elements based on current game state
    updateRanchElements(app);

    // Trigger and manage transient visual effects
    manageVisualEffects(app, {
      networkPingActive, sparkleActive, coinFallActive,
      lastStoredMessage, transactionActive, dataStreamActive,
    });

  }, [ranchData, characters, buildings, isLoaded,
      networkPingActive, sparkleActive, coinFallActive,
      lastStoredMessage, transactionActive, dataStreamActive]); // Depend on relevant states/props


  // --- PIXI.js Scene Creation Functions ---

  const createBackground = (app: PIXI.Application) => {
    // Sky Gradient
    const sky = new PIXI.Graphics();
    sky.beginFill(0x303F9F); // Darker tech blue (mystic-700)
    sky.drawRect(0, 0, app.screen.width, app.screen.height * 0.7);
    sky.endFill();
    app.stage.addChild(sky);

    // Ground/Horizon
    const ground = new PIXI.Graphics();
    ground.beginFill(0x4E342E); // Dark leather brown
    ground.drawRect(0, app.screen.height * 0.7, app.screen.width, app.screen.height * 0.3);
    ground.endFill();
    app.stage.addChild(ground);

    // Distant Cypher-Punk Cityscape (using Graphics for simplicity)
    const cityscape = new PIXI.Graphics();
    cityscape.beginFill(0x882895, 0.4); // Tech purple with transparency
    cityscape.moveTo(0, app.screen.height * 0.6);
    cityscape.lineTo(app.screen.width * 0.1, app.screen.height * 0.4);
    cityscape.lineTo(app.screen.width * 0.2, app.screen.height * 0.5);
    cityscape.lineTo(app.screen.width * 0.3, app.screen.height * 0.35);
    cityscape.lineTo(app.screen.width * 0.4, app.screen.height * 0.55);
    cityscape.lineTo(app.screen.width * 0.5, app.screen.height * 0.4);
    cityscape.lineTo(app.screen.width * 0.6, app.screen.height * 0.5);
    cityscape.lineTo(app.screen.width * 0.7, app.screen.height * 0.3);
    cityscape.lineTo(app.screen.width * 0.8, app.screen.height * 0.5);
    cityscape.lineTo(app.screen.width * 0.9, app.screen.height * 0.4);
    cityscape.lineTo(app.screen.width, app.screen.height * 0.55);
    cityscape.lineTo(app.screen.width, app.screen.height * 0.7);
    cityscape.lineTo(0, app.screen.height * 0.7);
    cityscape.closePath();
    cityscape.endFill();
    app.stage.addChild(cityscape);
  };

  const createRanchBase = (app: PIXI.Application) => {
    // Static ranch elements like main entrance, fences that are always there
    const fence = new PIXI.Graphics();
    fence.lineStyle(4, 0x5D4037); // Darker leather brown
    fence.moveTo(50, app.screen.height * 0.85);
    fence.lineTo(app.screen.width - 50, app.screen.height * 0.85);
    for (let x = 50; x < app.screen.width - 50; x += 100) {
      fence.moveTo(x, app.screen.height * 0.85 - 30);
      fence.lineTo(x, app.screen.height * 0.85 + 10);
    }
    app.stage.addChild(fence);

    // Ranch Sign
    const signContainer = new PIXI.Container();
    const post = new PIXI.Graphics();
    post.beginFill(0x5D4037);
    post.drawRect(-5, 0, 10, 80);
    post.endFill();
    const board = new PIXI.Graphics();
    board.beginFill(0x161020); // Dark tech card background
    board.lineStyle(2, 0x08ddb8); // Tech cyan border
    board.drawRoundedRect(-60, -20, 120, 40, 5);
    board.endFill();
    const text = new PIXI.Text('SHADOW RANCH', {
      fontFamily: 'Orbitron', // Tech font
      fontSize: 12,
      fill: 0x08ddb8, // Tech cyan
      fontWeight: 'bold',
    });
    text.anchor.set(0.5);
    signContainer.addChild(post);
    signContainer.addChild(board);
    signContainer.addChild(text);
    signContainer.x = 120;
    signContainer.y = app.screen.height * 0.75;
    app.stage.addChild(signContainer);
  };

  const updateRanchElements = (app: PIXI.Application) => {
    // Render collected buildings (use actual sprites for each type later)
    buildings.forEach((building, index) => {
      const buildingSprite = new PIXI.Graphics();
      buildingSprite.beginFill(0x882895); // Tech purple
      buildingSprite.drawRect(0, 0, 80, 60); // Simple rectangle for now
      buildingSprite.endFill();
      buildingSprite.x = 200 + index * 100;
      buildingSprite.y = app.screen.height * 0.6 - 60;
      buildingSprite.name = `building_dynamic_${building.id}`; // Give it a unique name
      app.stage.addChild(buildingSprite);

      const roof = new PIXI.Graphics();
      roof.beginFill(0x654321); // Dark brown for contrast, can be changed to tech
      roof.moveTo(0, 0);
      roof.lineTo(40, -20);
      roof.lineTo(80, 0);
      roof.closePath();
      roof.endFill();
      roof.x = buildingSprite.x;
      roof.y = buildingSprite.y;
      buildingSprite.addChild(roof); // Add roof to building sprite/container
    });

    // Render characters (use actual sprites for each type later)
    characters.slice(0, 3).forEach((character, index) => { // Limit for performance if many
      const characterText = new PIXI.Text('🧑‍💻', { // Cypher-punk character emoji
        fontFamily: 'Arial',
        fontSize: 30,
        fill: 0x2ae6c4, // Light tech cyan
      });
      characterText.anchor.set(0.5);
      characterText.x = 350 + index * 80 + Math.sin(Date.now() * 0.005 + index) * 10; // Simple idle animation
      characterText.y = app.screen.height * 0.75;
      characterText.name = `character_${character.id}`;
      app.stage.addChild(characterText);
    });

    // Render last stored message (if active)
    if (lastStoredMessage) {
      const messageBoardContainer = new PIXI.Container();
      messageBoardContainer.name = 'effect_messageBoard';
      const boardX = 50;
      const boardY = app.screen.height * 0.5;
      const boardWidth = 150;
      const boardHeight = 60;

      const post = new PIXI.Graphics();
      post.beginFill(0x5D4037);
      post.drawRect(boardWidth / 2 - 5, 0, 10, 40);
      post.endFill();

      const board = new PIXI.Graphics();
      board.beginFill(0x161020); // Dark tech background
      board.lineStyle(2, 0x08ddb8); // Tech cyan border
      board.drawRoundedRect(0, 0, boardWidth, boardHeight, 5);
      board.endFill();

      const messageText = new PIXI.Text(lastStoredMessage, {
        fontFamily: 'Fira Code', // Monospace for code/data
        fontSize: 10,
        fill: 0x2ae6c4, // Light tech cyan
        wordWrap: true,
        wordWrapWidth: boardWidth - 10,
        align: 'center',
      });
      messageText.anchor.set(0.5);
      messageText.x = boardWidth / 2;
      messageText.y = boardHeight / 2;

      messageBoardContainer.addChild(post);
      messageBoardContainer.addChild(board);
      messageBoardContainer.addChild(messageText);
      messageBoardContainer.x = boardX;
      messageBoardContainer.y = boardY;
      app.stage.addChild(messageBoardContainer);
    }
  };

  // --- Transient Visual Effects Management ---
  const manageVisualEffects = (app: PIXI.Application, effects: any) => {
    // Remove previous transient effects
    app.stage.children.forEach(child => {
        if (child.name && child.name.startsWith('transient_effect_')) {
            app.stage.removeChild(child);
            child.destroy();
        }
    });

    if (effects.networkPingActive) {
        // Network Ping Effect (pulsing circle)
        const ping = new PIXI.Graphics();
        ping.name = 'transient_effect_networkPing';
        ping.x = app.screen.width / 2;
        ping.y = app.screen.height * 0.4;
        app.stage.addChild(ping);

        let radius = 0;
        let alpha = 1;
        app.ticker.add(() => {
            if (!effects.networkPingActive) { app.ticker.remove(this); return; }
            radius += 1;
            alpha -= 0.01;
            ping.clear();
            ping.lineStyle(3, 0x00FF00, alpha); // Green, fading
            ping.drawCircle(0, 0, radius);
            if (alpha <= 0) {
                ping.destroy();
                app.ticker.remove(this); // Remove self from ticker
            }
        });
    }

    if (effects.sparkleActive) {
        // Sparkle Effect (random small dots)
        const sparkleContainer = new PIXI.Container();
        sparkleContainer.name = 'transient_effect_sparkle';
        app.stage.addChild(sparkleContainer);

        for (let i = 0; i < 20; i++) {
            const s = new PIXI.Graphics();
            s.beginFill(0xFFFFCC, Math.random()); // Light yellow, random alpha
            s.drawCircle(0, 0, Math.random() * 3 + 1);
            s.endFill();
            s.x = Math.random() * app.screen.width;
            s.y = Math.random() * app.screen.height * 0.7;
            sparkleContainer.addChild(s);

            // Animate sparkle fading and shrinking
            app.ticker.add(() => {
                if (!effects.sparkleActive) { sparkleContainer.destroy(); app.ticker.remove(this); return; }
                s.alpha -= 0.05;
                s.scale.x = s.scale.y = s.alpha;
                if (s.alpha <= 0) { s.destroy(); }
            });
        }
    }

    if (effects.coinFallActive) {
        // Coin Fall Effect
        const coinContainer = new PIXI.Container();
        coinContainer.name = 'transient_effect_coinFall';
        app.stage.addChild(coinContainer);

        for (let i = 0; i < 15; i++) {
            const coin = new PIXI.Text('💎', { // Diamond emoji for cypher-punk coin
                fontFamily: 'Arial',
                fontSize: 20,
            });
            coin.anchor.set(0.5);
            coin.x = Math.random() * app.screen.width;
            coin.y = -coin.height - (Math.random() * 100); // Start above canvas
            coinContainer.addChild(coin);

            app.ticker.add(() => {
                if (!effects.coinFallActive) { coinContainer.destroy(); app.ticker.remove(this); return; }
                coin.y += 5; // Fall speed
                if (coin.y > app.screen.height * 0.75) {
                    coin.alpha -= 0.1; // Fade out upon landing
                }
                if (coin.alpha <= 0) { coin.destroy(); }
            });
        }
    }

    if (effects.transactionActive) {
        // Transaction Animation (bounty bag/data packet)
        const packet = new PIXI.Text('📦', { // Package emoji
            fontFamily: 'Arial',
            fontSize: 30,
        });
        packet.name = 'transient_effect_transaction';
        packet.anchor.set(0.5);
        packet.x = app.screen.width * 0.2; // Start from ranch
        packet.y = app.screen.height * 0.7;
        app.stage.addChild(packet);

        let progress = 0;
        app.ticker.add((delta) => {
            if (!effects.transactionActive) { packet.destroy(); app.ticker.remove(this); return; }
            progress += 0.005 * delta; // Speed of travel
            packet.x = app.screen.width * 0.2 + (app.screen.width * 0.6) * progress;
            packet.y = app.screen.height * 0.7 - Math.sin(progress * Math.PI) * 50; // Arc movement
            packet.alpha = 1 - progress; // Fade out

            if (progress >= 1) {
                packet.destroy();
                app.ticker.remove(this);
            }
        });
    }

    if (effects.dataStreamActive) {
        // Data Stream Effect (for PDA success)
        const streamContainer = new PIXI.Container();
        streamContainer.name = 'transient_effect_dataStream';
        app.stage.addChild(streamContainer);

        for (let i = 0; i < 40; i++) {
            const dataBit = new PIXI.Graphics();
            dataBit.beginFill(0x08DDB8, Math.random()); // Tech cyan, random alpha
            dataBit.drawRect(0, 0, 3, 3); // Small square data bit
            dataBit.endFill();

            // Random start position near top of ranch, subtle movement
            dataBit.x = Math.random() * (app.screen.width * 0.6) + app.screen.width * 0.2;
            dataBit.y = Math.random() * (app.screen.height * 0.2) + app.screen.height * 0.5;
            dataBit.speedY = Math.random() * 2 + 0.5; // Varying fall speed
            dataBit.alpha = Math.random();
            streamContainer.addChild(dataBit);
        }

        app.ticker.add(() => {
            if (!effects.dataStreamActive) { streamContainer.destroy(); app.ticker.remove(this); return; }
            streamContainer.children.forEach((bit: any) => {
                bit.y += bit.speedY; // Move downwards
                bit.alpha -= 0.005; // Slowly fade out

                if (bit.y > app.screen.height || bit.alpha <= 0) {
                    bit.x = Math.random() * (app.screen.width * 0.6) + app.screen.width * 0.2;
                    bit.y = Math.random() * (app.screen.height * 0.1) + app.screen.height * 0.5; // Reset to top
                    bit.alpha = 1;
                    bit.speedY = Math.random() * 2 + 0.5;
                }
            });
        });
    }
  };

  return (
    <div className={cn('relative ranch-canvas overflow-hidden', className)}>
      <div ref={canvasRef} className="w-full h-full" />
      {!isLoaded && (
        <div className="absolute inset-0 flex items-center justify-center bg-background">
          <div className="text-tech-cyan font-tech">Loading Cypher-Ranch...</div>
        </div>
      )}

      {/* UI Overlay for Ranch Info (kept as HTML for easy styling) */}
      <div className="absolute top-4 right-4 space-y-2">
        <div className="bg-black/70 backdrop-blur-sm px-3 py-1 rounded-full text-tech-cyan text-sm font-code border border-tech-cyan/30">
          💎 {ranchData.ranchCoinBalance} DevCoin
        </div>
        <div className="bg-black/70 backdrop-blur-sm px-3 py-1 rounded-full text-tech-cyan text-sm font-code border border-tech-cyan/30">
          🧑‍💻 {characters.length} Agents
        </div>
        <div className="bg-black/70 backdrop-blur-sm px-3 py-1 rounded-full text-tech-cyan text-sm font-code border border-tech-cyan/30">
          🏛️ {buildings.length} Structures
        </div>
      </div>

      {/* Progress Bar (kept as HTML overlay) */}
      <div className="absolute bottom-4 left-4 right-4">
        <div className="bg-black/70 backdrop-blur-sm px-4 py-2 rounded-lg border border-tech-purple/30">
          <div className="flex items-center justify-between text-tech-cyan text-sm font-tech mb-2">
            <span>Ranch Progress</span>
            <span>Level {ranchData.level}</span>
          </div>
          <div className="w-full bg-gray-700 rounded-full h-2">
            <div
              className="bg-gradient-to-r from-tech-purple to-tech-pink h-2 rounded-full transition-all duration-500"
              style={{ width: `${(ranchData.experience % 500) / 5}%` }}
            />
          </div>
        </div>
      </div>
    </div>
  );
}
Completely REPLACE client/src/hooks/use-lesson-store.ts Content:File: client/src/hooks/use-lesson-store.tsAction: Replace localStorage with Firestore operations.Implementation:// client/src/hooks/use-lesson-store.ts - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
import { useState, useEffect } from 'react';
import { lessons, type LessonData, LessonStep } from '../data/lessons'; // Import LessonStep
import { getFirestore, collection, query, where, onSnapshot, doc, setDoc, addDoc, getDoc } from 'firebase/firestore';
import { getAuth, onAuthStateChanged } from 'firebase/auth'; // Ensure onAuthStateChanged is imported
import { appId } from '../firebase-init';

export interface LessonProgress {
  lessonId: number;
  completed: boolean;
  score: number;
  timeSpent: number;
  attempts: number;
  completedAt?: Date;
  userId: string;
  id?: string; // Firestore uses string IDs
}

export function useLessonStore() {
  const [progress, setProgress] = useState<LessonProgress[]>([]);
  const [currentLesson, setCurrentLesson] = useState<number>(1);
  const [userId, setUserId] = useState<string | null>(null);
  const [isStoreReady, setIsStoreReady] = useState(false);

  useEffect(() => {
    const auth = getAuth();
    const firestoreDb = getFirestore();

    const unsubscribeAuth = onAuthStateChanged(auth, async (user) => {
      const currentUid = user?.uid;
      if (!currentUid) {
        // If no authenticated user UID, return early or handle (e.g., anonymous sign-in in MainLayout)
        console.warn("No authenticated user UID available in useLessonStore. Data might not persist.");
        setIsStoreReady(true); // Still set ready to not block app, but indicate no persistence
        return;
      }
      setUserId(currentUid);

      if (firestoreDb && currentUid) {
        // Fetch current_lesson from Firestore or default to 1
        const userDocRef = doc(firestoreDb, `artifacts/${appId}/users/${currentUid}/profile/data`);
        const userDocSnap = await getDoc(userDocRef);
        if (userDocSnap.exists()) {
          const userData = userDocSnap.data();
          setCurrentLesson(userData.currentLesson || 1);
        } else {
          await setDoc(userDocRef, { currentLesson: 1, createdAt: new Date() }, { merge: true });
          setCurrentLesson(1);
        }

        const q = query(collection(firestoreDb, `artifacts/${appId}/users/${currentUid}/userProgress`));
        const unsubscribeProgress = onSnapshot(q, (snapshot) => {
          const fetchedProgress: LessonProgress[] = snapshot.docs.map(doc => ({
            id: doc.id,
            ...doc.data() as Omit<LessonProgress, 'id'>,
            completedAt: doc.data().completedAt?.toDate(),
          }));
          setProgress(fetchedProgress);
          setIsStoreReady(true);
        });

        return () => unsubscribeProgress();
      }
    });

    return () => unsubscribeAuth();
  }, []);

  const getLessonProgress = (lessonId: number): LessonProgress | undefined => {
    return progress.find(p => p.lessonId === lessonId);
  };

  const completeLesson = async (lessonId: number, score: number, timeSpent: number) => {
    if (!userId || !db) return;
    const existingProgress = progress.find(p => p.lessonId === lessonId);
    const progressRef = collection(db, `artifacts/${appId}/users/${userId}/userProgress`);

    const newProgressData: Omit<LessonProgress, 'id'> = {
      lessonId,
      completed: true,
      score: Math.max(score, existingProgress?.score || 0),
      timeSpent: (existingProgress?.timeSpent || 0) + timeSpent,
      attempts: (existingProgress?.attempts || 0) + 1,
      completedAt: new Date(),
      userId: userId,
    };

    if (existingProgress?.id) {
      await setDoc(doc(progressRef, existingProgress.id), newProgressData, { merge: true });
    } else {
      await addDoc(progressRef, newProgressData);
    }

    const userDocRef = doc(db, `artifacts/${appId}/users/${userId}/profile/data`);
    const nextLesson = lessonId + 1;
    await setDoc(userDocRef, { currentLesson: nextLesson }, { merge: true });
    setCurrentLesson(nextLesson);
  };

  const updateLessonAttempt = async (lessonId: number, timeSpent: number) => {
    if (!userId || !db) return;
    const existingProgress = progress.find(p => p.lessonId === lessonId);
    const progressRef = collection(db, `artifacts/${appId}/users/${userId}/userProgress`);

    const newProgressData: Omit<LessonProgress, 'id'> = {
      lessonId,
      completed: false,
      score: existingProgress?.score || 0,
      timeSpent: (existingProgress?.timeSpent || 0) + timeSpent,
      attempts: (existingProgress?.attempts || 0) + 1,
      userId: userId,
    };

    if (existingProgress?.id) {
      await setDoc(doc(progressRef, existingProgress.id), newProgressData, { merge: true });
    } else {
      await addDoc(progressRef, newProgressData);
    }
  };

  const getOverallProgress = () => {
    const totalLessons = lessons.length;
    const completedLessons = progress.filter(p => p.completed).length;
    const averageScore = progress.length > 0
      ? progress.reduce((sum, p) => sum + p.score, 0) / progress.length
      : 0;

    return {
      totalLessons,
      completedLessons,
      completionPercentage: (completedLessons / totalLessons) * 100,
      averageScore,
    };
  };

  const isLessonUnlocked = (lessonIdToCheck: number): boolean => {
    if (lessonIdToCheck <= currentLesson) return true;
    return false;
  };

  const getCompletedLessonsCount = (): number => {
    return progress.filter(p => p.completed).length;
  };

  return {
    progress,
    currentLesson,
    getLessonProgress,
    completeLesson,
    updateLessonAttempt,
    getOverallProgress,
    isLessonUnlocked,
    getCompletedLessonsCount,
    isStoreReady,
    userId,
  };
}
Completely REPLACE client/src/hooks/use-game-store.ts Content:File: client/src/hooks/use-game-store.tsAction: Update to use Firestore listeners and operations for all game data.Implementation:// client/src/hooks/use-game-store.ts - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
import { useState, useEffect } from 'react';
import { getFirestore, collection, query, onSnapshot, doc, setDoc, addDoc, updateDoc, getDoc } from 'firebase/firestore';
import { getAuth, onAuthStateChanged } from 'firebase/auth'; // Ensure onAuthStateChanged is imported
import { appId, db } from '../firebase-init'; // Import db from centralized init

export interface Character {
  id?: string;
  name: string;
  type: 'cowboy' | 'outlaw' | 'sheriff' | 'mystic';
  rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';
  level: number;
  experience: number;
  traits: {
    combat: number;
    wisdom: number;
    speed: number;
  };
  imageUrl?: string;
}

export interface Building {
  id?: string;
  type: 'house' | 'barn' | 'saloon' | 'watchtower' | 'blacksmith';
  level: number;
  position: { x: number; y: number };
}

export interface RanchData {
  ranchName: string;
  level: number;
  ranchCoinBalance: number;
  buildingCount: number;
  characterCount: number;
  experience: number;
}

export interface RewardNftData {
  id?: string;
  lessonId: number;
  nftImageUrl: string;
  rewardName: string;
  awardedAt: Date;
  userId: string;
}

export function useGameStore() {
  const [ranchData, setRanchData] = useState<RanchData>({
    ranchName: 'Shadow Ranch', level: 1, ranchCoinBalance: 500,
    buildingCount: 0, characterCount: 0, experience: 0,
  });
  const [characters, setCharacters] = useState<Character[]>([]);
  const [buildings, setBuildings] = useState<Building[]>([]);
  const [rewardNfts, setRewardNfts] = useState<RewardNftData[]>([]);
  const [userId, setUserId] = useState<string | null>(null);
  const [isStoreReady, setIsStoreReady] = useState(false);

  // Transient visual states
  const [showChallengeReward, setShowChallengeReward] = useState(false);
  const [currentRewardNftUrl, setCurrentRewardNftUrl] = useState<string | null>(null);
  const [networkPingActive, setNetworkPingActive] = useState(false);
  const [sparkleActive, setSparkleActive] = useState(false);
  const [coinFallActive, setCoinFallActive] = useState(false);
  const [lastStoredMessage, setLastStoredMessage] = useState<string | null>(null);
  const [transactionActive, setTransactionActive] = useState(false);
  const [dataStreamActive, setDataStreamActive] = useState(false);


  useEffect(() => {
    const auth = getAuth();
    const firestoreDb = getFirestore();

    const unsubscribeAuth = onAuthStateChanged(auth, async (user) => {
      const currentUid = user?.uid;
      if (!currentUid) {
        console.warn("No authenticated user UID available in useGameStore. Data might not persist.");
        setIsStoreReady(true);
        return;
      }
      setUserId(currentUid);

      if (firestoreDb && currentUid) {
        // Listener for RanchData (single document per user)
        const userRanchDocRef = doc(firestoreDb, `artifacts/${appId}/users/${currentUid}/ranch/data`);
        const unsubscribeRanch = onSnapshot(userRanchDocRef, (docSnap) => {
          if (docSnap.exists()) {
            setRanchData(docSnap.data() as RanchData);
          } else {
            const defaultRanch: RanchData = {
              ranchName: 'Shadow Ranch', level: 1, ranchCoinBalance: 500,
              buildingCount: 0, characterCount: 0, experience: 0,
            };
            setDoc(userRanchDocRef, defaultRanch);
            setRanchData(defaultRanch);
          }
        });

        // Listeners for sub-collections
        const unsubscribeCharacters = onSnapshot(collection(firestoreDb, `artifacts/${appId}/users/${currentUid}/characters`), (snapshot) => {
          setCharacters(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() as Omit<Character, 'id'> })) as Character[]);
        });
        const unsubscribeBuildings = onSnapshot(collection(firestoreDb, `artifacts/${appId}/users/${currentUid}/buildings`), (snapshot) => {
          setBuildings(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() as Omit<Building, 'id'> })) as Building[]);
        });
        const unsubscribeRewardNfts = onSnapshot(collection(firestoreDb, `artifacts/${appId}/users/${currentUid}/rewardNfts`), (snapshot) => {
          setRewardNfts(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() as Omit<RewardNftData, 'id'>, awardedAt: doc.data().awardedAt?.toDate() })) as RewardNftData[]);
        });

        setIsStoreReady(true);

        // Cleanup listeners
        return () => {
          unsubscribeRanch();
          unsubscribeCharacters();
          unsubscribeBuildings();
          unsubscribeRewardNfts();
        };
      }
    });

    return () => unsubscribeAuth();
  }, []);

  const updateRanchData = async (updates: Partial<RanchData>) => {
    if (!userId || !db) return;
    const ranchDocRef = doc(db, `artifacts/${appId}/users/${userId}/ranch/data`);
    await updateDoc(ranchDocRef, updates);
  };

  const addCharacter = async (character: Omit<Character, 'id'>) => {
    if (!userId || !db) return;
    await addDoc(collection(db, `artifacts/${appId}/users/${userId}/characters`), character);
  };

  const addBuilding = async (building: Omit<Building, 'id'>) => {
    if (!userId || !db) return;
    await addDoc(collection(db, `artifacts/${appId}/users/${userId}/buildings`), building);
  };

  const spendRanchCoin = async (amount: number) => {
    await updateRanchData({ ranchCoinBalance: Math.max(0, ranchData.ranchCoinBalance - amount) });
  };

  const earnRanchCoin = async (amount: number) => {
    await updateRanchData({ ranchCoinBalance: ranchData.ranchCoinBalance + amount });
  };

  const addExperience = async (amount: number) => {
    const newExp = ranchData.experience + amount;
    const newLevel = Math.floor(newExp / 500) + 1;
    await updateRanchData({ experience: newExp, level: Math.max(ranchData.level, newLevel) });
  };

  const addRewardNft = async (reward: Omit<RewardNftData, 'id' | 'awardedAt'>) => {
    if (!userId || !db) return;
    await addDoc(collection(db, `artifacts/${appId}/users/${userId}/rewardNfts`), { ...reward, awardedAt: new Date() });
  };

  // --- Transient Visual Effect Triggers ---
  const triggerChallengeReward = (nftUrl: string) => {
    setCurrentRewardNftUrl(nftUrl);
    setShowChallengeReward(true);
  };

  const triggerNetworkPingAnimation = () => {
    setNetworkPingActive(true);
    setTimeout(() => { setNetworkPingActive(false); }, 3000);
  };

  const triggerSparkleAnimation = () => {
    setSparkleActive(true);
    setTimeout(() => { setSparkleActive(false); }, 2000);
  };

  const triggerCoinFallAnimation = () => {
    setCoinFallActive(true);
    setTimeout(() => { setCoinFallActive(false); }, 2500);
  };

  const triggerTransactionAnimation = () => {
    setTransactionActive(true);
    setTimeout(() => { setTransactionActive(false); }, 3000);
  };

  const triggerDataStreamAnimation = () => {
    setDataStreamActive(true);
    setTimeout(() => { setDataStreamActive(false); }, 3500);
  };

  return {
    ranchData, characters, buildings, rewardNfts,
    addCharacter, addBuilding, spendRanchCoin, earnRanchCoin, addExperience, addRewardNft,
    showChallengeReward, currentRewardNftUrl, triggerChallengeReward,
    networkPingActive, triggerNetworkPingAnimation,
    sparkleActive, triggerSparkleAnimation,
    coinFallActive, triggerCoinFallAnimation,
    lastStoredMessage, setLastStoredMessage,
    transactionActive, triggerTransactionAnimation,
    dataStreamActive, triggerDataStreamAnimation,
    userId,
    isStoreReady,
  };
}
Phase 3: Update Main Application Components to Use New Components & LogicObjective: Integrate the new Ethos lessons, reward, and hint components into the application flow.Completely REPLACE client/src/App.tsx Content:File: client/src/App.tsxAction: Ensure correct imports and global rendering of ChallengeReward.Implementation:// client/src/App.tsx - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
import { Switch, Route } from "wouter";
import { queryClient } from "./lib/queryClient";
import { QueryClientProvider } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/toaster";
import { TooltipProvider } from "@/components/ui/tooltip";
import { MainLayout } from "@/components/layout/MainLayout";
import { HomePage } from "@/pages/HomePage";
import { LessonsPage } from "@/pages/LessonsPage";
import { LessonDetailPage } from "@/pages/LessonDetailPage";
import { RanchPage } from "@/pages/RanchPage";
import { PlaygroundPage } from "@/pages/PlaygroundPage";
import NotFound from "@/pages/not-found";
import { ChallengeReward } from "@/components/game/ChallengeReward";
import { useGameStore } from "@/hooks/use-game-store";

import './firebase-init'; // Ensure Firebase is initialized

function Router() {
  return (
    <Switch>
      <Route path="/" component={HomePage} />
      <Route path="/lessons" component={LessonsPage} />
      <Route path="/lessons/:id">
        {(params) => <LessonDetailPage lessonId={parseInt(params.id)} />}
      </Route>
      <Route path="/ranch" component={RanchPage} />
      <Route path="/playground" component={PlaygroundPage} />
      <Route component={NotFound} />
    </Switch>
  );
}

function App() {
  const { showChallengeReward, currentRewardNftUrl } = useGameStore();

  return (
    <QueryClientProvider client={queryClient}>
      <TooltipProvider>
        <MainLayout>
          <Toaster />
          <Router />
          <ChallengeReward
            isVisible={showChallengeReward}
            nftImageUrl={currentRewardNftUrl}
          />
        </MainLayout>
      </TooltipProvider>
    </QueryClientProvider>
  );
}

export default App;
Completely REPLACE client/src/pages/LessonDetailPage.tsx Content:File: client/src/pages/LessonDetailPage.tsxAction: Update LessonDetailPage to handle ethos lessons (non-coding), display hints, and manage progression.Implementation:// client/src/pages/LessonDetailPage.tsx - DEFINITIVE CONTENT (COPY THIS ENTIRE BLOCK)
import { useState, useEffect, useRef } from 'react';
import { Link, useLocation } from 'wouter';
import { lessons, type LessonData, LessonStep } from '@/data/lessons';
import { rustTemplates, pythonTemplates } from '@/data/code-templates';
import { useLessonStore } from '@/hooks/use-lesson-store';
import { useGameStore } from '@/hooks/use-game-store';
import { LessonLayout } from '@/components/lessons/LessonLayout';
import { NarrativeBox } from '@/components/lessons/NarrativeBox';
import { MonacoEditor } from '@/components/editor/MonacoEditor';
import { LanguageSelector } from '@/components/editor/LanguageSelector';
import { CodeValidator } from '@/components/editor/CodeValidator';
import { TechButton } from '@/components/ui/TechButton'; // Use TechButton
import { TechCard } from '@/components/ui/TechCard'; // Use TechCard
import { CardContent, CardHeader, CardTitle } from '@/components/ui/card'; // Keep base Card elements
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { HintCharacter, HintCharacterRef } from '@/components/lessons/HintCharacter'; // NEW HintCharacter import

import {
  Clock,
  Code,
  Trophy,
  Target,
  CheckCircle,
  Zap,
  Star,
  Coins,
  Lightbulb, // For Hint button
} from 'lucide-react';
import { cn } from '@/lib/utils';


interface LessonDetailPageProps {
  lessonId: number;
}

export function LessonDetailPage({ lessonId }: LessonDetailPageProps) {
  const [, setLocation] = useLocation();
  const [language, setLanguage] = useState<'rust' | 'python'>('rust');
  const [code, setCode] = useState('');
  const [isValidating, setIsValidating] = useState(false);
  const [startTime] = useState(Date.now());
  const [attempts, setAttempts] = useState(0);
  const [consoleOutput, setConsoleOutput] = useState("Awaiting your command, recruit...");
  const [consoleOutputColor, setConsoleOutputColor] = useState("text-gray-500");
  const [currentStep, setCurrentStep] = useState(1); // NEW: Step tracking

  // Hooks for persistence and game state
  const {
    completeLesson,
    updateLessonAttempt,
    getLessonProgress,
    isLessonUnlocked,
    userId: lessonStoreUserId, // Get userId from lesson store
    isStoreReady: isLessonStoreReady,
  } = useLessonStore();

  const {
    earnRanchCoin,
    addExperience,
    triggerChallengeReward, // From useGameStore
    addRewardNft, // From useGameStore
    userId: gameStoreUserId, // Get userId from game store
    isStoreReady: isGameStoreReady,
    triggerNetworkPingAnimation,
    triggerSparkleAnimation,
    triggerCoinFallAnimation,
    setLastStoredMessage,
    triggerTransactionAnimation,
    triggerDataStreamAnimation, // For PDA effect
  } = useGameStore();

  const hintCharacterRef = useRef<HintCharacterRef>(null); // Ref for the HintCharacter

  const lesson = lessons.find(l => l.id === lessonId);
  const lessonProgress = getLessonProgress(lessonId);
  const unlocked = isLessonUnlocked(lessonId);

  const currentStepData: LessonStep | undefined = lesson?.content.steps[currentStep - 1];
  const totalStepsInCurrentLesson = lesson?.content.steps.length || 0;
  const isLastStepOfCurrentLesson = currentStep === totalStepsInCurrentLesson;
  const hasNextLessonContent = lessonId < lessons.length;

  const canGoToNextStep = currentStep < totalStepsInCurrentLesson;
  const canGoToNextLesson = isLastStepOfCurrentLesson && hasNextLessonContent && isLessonUnlocked(lessonId + 1);

  const nextButtonText = canGoToNextStep ? "Next Step" : (canGoToNextLesson ? "Next Lesson" : "Continue");
  const nextButtonDisabled = !canGoToNextStep && !canGoToNextLesson && isLastStepOfCurrentLesson;

  // Effect to load initial code template and trigger initial hint
  useEffect(() => {
    if (!lesson || !unlocked || !currentStepData)
