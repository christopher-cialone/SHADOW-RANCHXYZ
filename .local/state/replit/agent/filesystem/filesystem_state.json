{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Shadow Ranch - Solana Learning Game\n\n## Overview\nShadow Ranch is a gamified educational platform designed to teach Solana blockchain development within an immersive Western-themed environment. It enables users to learn Rust, Anchor, and Solana development concepts by completing coding challenges, earning rewards, and building a virtual ranch. The project aims to combine full-stack web architecture with engaging game mechanics to provide an interactive learning experience. Key capabilities include interactive coding lessons with a Monaco editor, real-time code validation, a virtual ranch management system, and NFT reward collection.\n\n## Recent Changes (August 2025)\n### Critical Bug Resolution: Lesson Progression Loop\n- **Issue**: Infinite looping in lesson progression caused by conflicting state management\n- **Root Cause**: Dual state systems (`stepCompleted` local state vs `isStepCompleted` persistent store)\n- **Solution**: Unified state management using only useLessonStore as single source of truth\n- **Impact**: Smooth lesson progression now enabled for Solana track\n- **Date**: August 18, 2025\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\nThe application features a full-stack architecture with distinct frontend and backend components.\n\n### Frontend Architecture\n-   **Framework**: React 18 with TypeScript.\n-   **Build Tool**: Vite.\n-   **Routing**: Wouter.\n-   **State Management**: Zustand for global state.\n-   **UI Framework**: Custom Western-themed components built on Radix UI primitives.\n-   **Styling**: Tailwind CSS with custom themes.\n-   **Code Editor**: Monaco Editor for in-browser code editing.\n\n### Backend Architecture\n-   **Runtime**: Node.js with Express.js.\n-   **Language**: TypeScript with ES modules.\n-   **API Pattern**: RESTful APIs for lesson and progress management.\n\n### Data Storage Strategy\n-   **Interface**: `IStorage` for data operations.\n-   **Current Implementation**: In-memory storage with Zustand persistence.\n-   **Future Ready**: Prepared for PostgreSQL with Drizzle ORM.\n-   **Schema**: Defined in `shared/schema.ts`.\n-   **Lesson Data**: Restructured with explicit track categorization (`cypherpunk`, `solana-ethos`, `solana-code`).\n\n### Key Components\n-   **Lesson System**: Multi-step coding challenges with content stored in TypeScript data files, featuring pattern-matching validation and unified progress tracking via useLessonStore.\n-   **Game Mechanics**: Includes virtual ranch management, a ranch coin currency system, experience points (XP) with leveling, and visual effects for achievements.\n-   **Code Editor Integration**: Monaco Editor with syntax highlighting for Rust and Python, real-time validation, and code templates.\n-   **UI/UX Design**: Dual theming (Western aesthetic + tech styling), responsive design, accessibility built on Radix UI, and custom CSS animations.\n\n### Data Flow\nLessons are loaded from static files, user code is validated, progress is updated to persistent storage, rewards are distributed, and the ranch state is updated based on purchases.\n\n### Deployment Strategy\n-   **Replit Configuration**: Node.js 20 and PostgreSQL 16 modules enabled. `npm run dev` for concurrent frontend/backend development.\n-   **Build Process**: Vite compiles the frontend, ESBuild bundles the Express server, and the production server serves static assets.\n-   **Database Migration**: Drizzle Kit handles schema migrations using `DATABASE_URL` environment variable.\n\n## External Dependencies\n\n### Core Libraries\n-   **React Ecosystem**: React 18, React DOM, React Query.\n-   **Development**: Vite, TypeScript, ESBuild.\n-   **UI Foundation**: Radix UI primitives, Tailwind CSS, Lucide icons.\n-   **Code Editor**: Monaco Editor.\n\n### Database & Storage\n-   **Drizzle ORM**: Type-safe database queries.\n-   **Neon Database**: Serverless PostgreSQL driver.\n-   **Firebase**: Optional Firestore integration.\n-   **Zustand**: Client-side state persistence.\n\n### Development Tools\n-   **Hot Reloading**: Vite dev server.\n-   **Type Safety**: Strict TypeScript configuration.\n-   **Path Aliases**: Configured for clean imports.","size_bytes":4162},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n        // Tech Theme Colors\n        \"tech-purple\": {\n          50: \"hsl(var(--tech-purple-50))\",\n          100: \"hsl(var(--tech-purple-100))\",\n          200: \"hsl(var(--tech-purple-200))\",\n          300: \"hsl(var(--tech-purple-300))\",\n          400: \"hsl(var(--tech-purple-400))\",\n          500: \"hsl(var(--tech-purple-500))\",\n          600: \"hsl(var(--tech-purple-600))\",\n          700: \"hsl(var(--tech-purple-700))\",\n          800: \"hsl(var(--tech-purple-800))\",\n          900: \"hsl(var(--tech-purple-900))\",\n        },\n        \"tech-cyan\": {\n          50: \"hsl(var(--tech-cyan-50))\",\n          100: \"hsl(var(--tech-cyan-100))\",\n          200: \"hsl(var(--tech-cyan-200))\",\n          300: \"hsl(var(--tech-cyan-300))\",\n          400: \"hsl(var(--tech-cyan-400))\",\n          500: \"hsl(var(--tech-cyan-500))\",\n          600: \"hsl(var(--tech-cyan-600))\",\n          700: \"hsl(var(--tech-cyan-700))\",\n          800: \"hsl(var(--tech-cyan-800))\",\n          900: \"hsl(var(--tech-cyan-900))\",\n        },\n        \"tech-pink\": {\n          50: \"hsl(var(--tech-pink-50))\",\n          100: \"hsl(var(--tech-pink-100))\",\n          200: \"hsl(var(--tech-pink-200))\",\n          300: \"hsl(var(--tech-pink-300))\",\n          400: \"hsl(var(--tech-pink-400))\",\n          500: \"hsl(var(--tech-pink-500))\",\n          600: \"hsl(var(--tech-pink-600))\",\n          700: \"hsl(var(--tech-pink-700))\",\n          800: \"hsl(var(--tech-pink-800))\",\n          900: \"hsl(var(--tech-pink-900))\",\n        },\n      },\n      fontFamily: {\n        titulo: ['Archivo Black', 'sans-serif'],\n        tech: ['Orbitron', 'sans-serif'],\n        data70: ['Data70EF', 'Orbitron', 'sans-serif'],\n        'space-gothic': ['SpaceGothic', 'sans-serif'],\n        code: ['Fira Code', 'monospace'],\n        sans: [\"Inter\", \"sans-serif\"],\n        mono: [\"JetBrains Mono\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"dust-swirl\": {\n          '0%': { transform: 'translateX(-100px) rotate(0deg)', opacity: '0' },\n          '10%': { opacity: '0.6' },\n          '90%': { opacity: '0.6' },\n          '100%': { transform: 'translateX(100vw) rotate(360deg)', opacity: '0' }\n        },\n        \"sheriff-star\": {\n          '0%, 100%': { transform: 'rotate(0deg) scale(1)', filter: 'brightness(1)' },\n          '50%': { transform: 'rotate(180deg) scale(1.1)', filter: 'brightness(1.3)' }\n        },\n        \"glow-pulse\": {\n          '0%': { boxShadow: '0 0 5px rgba(212, 165, 116, 0.5)' },\n          '100%': { boxShadow: '0 0 20px rgba(212, 165, 116, 0.8), 0 0 30px rgba(212, 165, 116, 0.6)' }\n        },\n        \"fade-in\": {\n          '0%': { opacity: '0', transform: 'translateY(10px)' },\n          '100%': { opacity: '1', transform: 'translateY(0)' }\n        },\n        \"slide-up\": {\n          '0%': { opacity: '0', transform: 'translateY(30px)' },\n          '100%': { opacity: '1', transform: 'translateY(0)' }\n        }\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"dust-swirl\": \"dust-swirl 20s infinite linear\",\n        \"sheriff-star\": \"sheriff-star 3s ease-in-out infinite\",\n        \"glow-pulse\": \"glow-pulse 2s ease-in-out infinite alternate\",\n        \"fade-in\": \"fade-in 0.5s ease-out\",\n        \"slide-up\": \"slide-up 0.5s ease-out\"\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":5900},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/firestore-storage.ts":{"content":"import {\n  users, ranches, lessons, userProgress, characters, buildings, rewardNfts,\n  type User, type InsertUser, type Ranch, type InsertRanch, type Lesson, type InsertLesson,\n  type UserProgress, type InsertUserProgress, type Character, type InsertCharacter,\n  type Building, type InsertBuilding, type RewardNft, type InsertRewardNft, type LessonStep\n} from \"@shared/schema\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, doc, getDoc, setDoc, addDoc, updateDoc, deleteDoc, collection, query, where, getDocs } from \"firebase/firestore\";\n\n// Firebase configuration using environment secrets\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_APP_ID\n};\n\n// Initialize Firebase on the server-side\nconst firebaseApp = initializeApp(firebaseConfig);\nconst firestoreDb = getFirestore(firebaseApp);\n\n// Define base paths for Firestore collections\nconst ARTIFACTS_PATH = `artifacts/shadow-ranch`;\n\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined>;\n\n  // Ranch operations\n  getRanch(id: number): Promise<Ranch | undefined>;\n  getRanchByUserId(userId: number): Promise<Ranch | undefined>;\n  createRanch(ranch: InsertRanch): Promise<Ranch>;\n  updateRanch(id: number, updates: Partial<InsertRanch>): Promise<Ranch | undefined>;\n\n  // Lesson operations\n  getLesson(id: number): Promise<Lesson | undefined>;\n  getAllLessons(): Promise<Lesson[]>;\n  getLessonsByCategory(category: string): Promise<Lesson[]>;\n  createLesson(lesson: InsertLesson): Promise<Lesson>;\n\n  // User Progress operations\n  getUserProgress(userId: number, lessonId: number): Promise<UserProgress | undefined>;\n  getUserProgressByUserId(userId: number): Promise<UserProgress[]>;\n  createUserProgress(progress: InsertUserProgress): Promise<UserProgress>;\n  updateUserProgress(userId: number, lessonId: number, updates: Partial<InsertUserProgress>): Promise<UserProgress | undefined>;\n\n  // Character operations\n  getCharacter(id: number): Promise<Character | undefined>;\n  getCharactersByRanchId(ranchId: number): Promise<Character[]>;\n  createCharacter(character: InsertCharacter): Promise<Character>;\n  updateCharacter(id: number, updates: Partial<InsertCharacter>): Promise<Character | undefined>;\n\n  // Building operations\n  getBuilding(id: number): Promise<Building | undefined>;\n  getBuildingsByRanchId(ranchId: number): Promise<Building[]>;\n  createBuilding(building: InsertBuilding): Promise<Building>;\n  updateBuilding(id: number, updates: Partial<InsertBuilding>): Promise<Building | undefined>;\n}\n\nexport class FirestoreStorage implements IStorage {\n  private db: any;\n\n  constructor() {\n    this.db = firestoreDb;\n    this.initializeDefaultLessons();\n  }\n\n  private getUserCollectionRef(userId: string, collectionName: string) {\n    return collection(this.db, `${ARTIFACTS_PATH}/users/${userId}/${collectionName}`);\n  }\n\n  private getPublicCollectionRef(collectionName: string) {\n    return collection(this.db, `${ARTIFACTS_PATH}/public/data/${collectionName}`);\n  }\n\n  private async initializeDefaultLessons() {\n    try {\n      const lessonsRef = this.getPublicCollectionRef('lessons');\n      const snapshot = await getDocs(lessonsRef);\n      if (snapshot.empty) {\n        const defaultLessons = [\n          {\n            id: 1,\n            title: \"Solana Basics & Wallet Setup\",\n            description: \"Learn the fundamentals of Solana and set up your Web3 wallet\",\n            difficulty: 'beginner',\n            duration: '30 min',\n            reward: 100,\n            requiredLessons: [],\n            category: 'fundamentals',\n            order: 1,\n            isActive: true,\n            steps: [\n              {\n                id: 1,\n                title: \"Ping the Blockchain\",\n                narrative: \"Welcome to Shadow Ranch, partner! Time to connect to the Solana network.\",\n                instructions: [\n                  \"Write `get_network_status()` to check Devnet health.\",\n                  \"Execute the command to ping the blockchain\"\n                ],\n                hints: [\n                  \"Use the exact function name: get_network_status()\",\n                  \"Make sure to include the parentheses\"\n                ],\n                validationRules: [\n                  {\n                    type: \"contains\",\n                    pattern: \"get_network_status()\",\n                    message: \"Function call must be exactly 'get_network_status()'\",\n                    required: true\n                  }\n                ],\n                starterCode: \"// Connect to Solana Devnet\\n// TODO: Call get_network_status() function\\n\",\n                expectedOutput: \"Network Status: Connected! Ping: 45ms | Current Slot: 245891023\"\n              }\n            ]\n          },\n          {\n            id: 2,\n            title: \"Creating Your Ranch Account\",\n            description: \"Build your first Solana program to manage ranch data\",\n            difficulty: 'beginner',\n            duration: '45 min',\n            reward: 150,\n            requiredLessons: [1],\n            category: 'programming',\n            order: 2,\n            isActive: true,\n            steps: [\n              {\n                id: 1,\n                title: \"Define Ranch Owner Field\",\n                narrative: \"Every ranch needs an owner. Let's add that to our Ranch struct.\",\n                instructions: [\n                  \"In the Ranch struct, add a pubkey field named 'owner'\",\n                  \"Use proper Rust syntax with pub visibility\"\n                ],\n                hints: [\n                  \"Rust syntax: pub owner: Pubkey,\",\n                  \"Don't forget the comma at the end\"\n                ],\n                validationRules: [\n                  {\n                    type: \"regex\",\n                    pattern: \"pub\\\\s+owner:\\\\s*Pubkey,\",\n                    message: \"Add 'pub owner: Pubkey,' to the Ranch struct\",\n                    required: true\n                  }\n                ],\n                starterCode: \"use anchor_lang::prelude::*;\\n\\n#[account]\\npub struct Ranch {\\n    // TODO: Add owner field\\n}\\n\",\n                expectedOutput: \"Ranch struct defined with owner field\"\n              },\n              {\n                id: 2,\n                title: \"Initialize Owner in Function\",\n                narrative: \"Now let's assign the owner when creating a ranch.\",\n                instructions: [\n                  \"In initialize_ranch function, set ranch.owner to ctx.accounts.user.key()\",\n                  \"Use proper Rust assignment syntax\"\n                ],\n                hints: [\n                  \"Syntax: ranch.owner = ctx.accounts.user.key();\",\n                  \"Don't forget the semicolon\"\n                ],\n                validationRules: [\n                  {\n                    type: \"regex\",\n                    pattern: \"ranch\\\\.owner\\\\s*=\\\\s*ctx\\\\.accounts\\\\.user\\\\.key\\\\(\\\\);\",\n                    message: \"Set ranch.owner = ctx.accounts.user.key();\",\n                    required: true\n                  }\n                ],\n                starterCode: \"pub fn initialize_ranch(ctx: Context<InitializeRanch>) -> Result<()> {\\n    let ranch = &mut ctx.accounts.ranch;\\n    // TODO: Set the owner\\n    Ok(())\\n}\\n\",\n                expectedOutput: \"Ranch owner initialized successfully\"\n              },\n              {\n                id: 3,\n                title: \"Program Entrypoint & Instruction Dispatch\",\n                narrative: \"Time to create the main program entry point that handles different instructions.\",\n                instructions: [\n                  \"Define the program entrypoint using #[program]\",\n                  \"Add instruction dispatch for initialize_ranch\",\n                  \"Include proper error handling\"\n                ],\n                hints: [\n                  \"Use #[program] attribute before the mod declaration\",\n                  \"Each instruction should be a public function\",\n                  \"Return Result<()> for proper error handling\"\n                ],\n                validationRules: [\n                  {\n                    type: \"contains\",\n                    pattern: \"#[program]\",\n                    message: \"Add #[program] attribute\",\n                    required: true\n                  },\n                  {\n                    type: \"contains\",\n                    pattern: \"pub mod\",\n                    message: \"Define a public module\",\n                    required: true\n                  },\n                  {\n                    type: \"contains\",\n                    pattern: \"initialize_ranch\",\n                    message: \"Include initialize_ranch instruction\",\n                    required: true\n                  }\n                ],\n                starterCode: \"use anchor_lang::prelude::*;\\n\\ndeclare_id!(\\\"YourProgramIDHere\\\");\\n\\n// TODO: Add #[program] attribute and define the program module\\n\",\n                expectedOutput: \"Program entrypoint created with instruction dispatch\"\n              }\n            ]\n          }\n        ];\n\n        for (const lessonData of defaultLessons) {\n          await setDoc(doc(lessonsRef, lessonData.id.toString()), lessonData);\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to initialize Firestore lessons, falling back to local storage:', error);\n    }\n  }\n\n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    try {\n      const userDoc = doc(this.getPublicCollectionRef('users'), id.toString());\n      const userSnap = await getDoc(userDoc);\n      if (!userSnap.exists()) return undefined;\n      return { ...userSnap.data(), id: parseInt(userSnap.id) } as User;\n    } catch (error) {\n      console.warn('Firestore getUser failed:', error);\n      return undefined;\n    }\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    try {\n      const q = query(this.getPublicCollectionRef('users'), where('username', '==', username));\n      const snapshot = await getDocs(q);\n      if (snapshot.empty) return undefined;\n      const docData = snapshot.docs[0].data();\n      return { ...docData, id: parseInt(snapshot.docs[0].id) } as User;\n    } catch (error) {\n      console.warn('Firestore getUserByUsername failed:', error);\n      return undefined;\n    }\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    try {\n      const newUserRef = doc(this.getPublicCollectionRef('users'), Date.now().toString());\n      const userData = { ...insertUser, createdAt: new Date() };\n      await setDoc(newUserRef, userData);\n      return { ...userData, id: parseInt(newUserRef.id) } as User;\n    } catch (error) {\n      console.warn('Firestore createUser failed:', error);\n      // Fallback to mock user\n      return {\n        id: Date.now(),\n        username: insertUser.username,\n        password: insertUser.password,\n        walletAddress: insertUser.walletAddress || null,\n        pfpUrl: insertUser.pfpUrl || null,\n        createdAt: new Date()\n      };\n    }\n  }\n\n  async updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined> {\n    try {\n      const userRef = doc(this.getPublicCollectionRef('users'), id.toString());\n      await updateDoc(userRef, updates);\n      const updatedUser = await getDoc(userRef);\n      return { ...updatedUser.data(), id } as User;\n    } catch (error) {\n      console.warn('Firestore updateUser failed:', error);\n      return undefined;\n    }\n  }\n\n  // Ranch operations\n  async getRanch(id: number): Promise<Ranch | undefined> {\n    try {\n      const ranchDoc = doc(this.getPublicCollectionRef('ranches'), id.toString());\n      const ranchSnap = await getDoc(ranchDoc);\n      if (!ranchSnap.exists()) return undefined;\n      return { ...ranchSnap.data(), id: parseInt(ranchSnap.id) } as Ranch;\n    } catch (error) {\n      console.warn('Firestore getRanch failed:', error);\n      return undefined;\n    }\n  }\n\n  async getRanchByUserId(userId: number): Promise<Ranch | undefined> {\n    try {\n      const q = query(this.getPublicCollectionRef('ranches'), where('userId', '==', userId));\n      const snapshot = await getDocs(q);\n      if (snapshot.empty) return undefined;\n      const docData = snapshot.docs[0].data();\n      return { ...docData, id: parseInt(snapshot.docs[0].id) } as Ranch;\n    } catch (error) {\n      console.warn('Firestore getRanchByUserId failed:', error);\n      return undefined;\n    }\n  }\n\n  async createRanch(insertRanch: InsertRanch): Promise<Ranch> {\n    try {\n      const newRanchRef = doc(this.getPublicCollectionRef('ranches'), Date.now().toString());\n      const ranchData = { \n        ...insertRanch, \n        level: insertRanch.level || 1,\n        experience: insertRanch.experience || 0,\n        coins: insertRanch.coins || 500,\n        createdAt: new Date() \n      };\n      await setDoc(newRanchRef, ranchData);\n      return { ...ranchData, id: parseInt(newRanchRef.id) } as Ranch;\n    } catch (error) {\n      console.warn('Firestore createRanch failed:', error);\n      // Fallback to mock ranch\n      return {\n        id: Date.now(),\n        name: insertRanch.name,\n        userId: insertRanch.userId,\n        level: insertRanch.level || 1,\n        experience: insertRanch.experience || 0,\n        coins: insertRanch.coins || 500,\n        createdAt: new Date()\n      };\n    }\n  }\n\n  async updateRanch(id: number, updates: Partial<InsertRanch>): Promise<Ranch | undefined> {\n    try {\n      const ranchRef = doc(this.getPublicCollectionRef('ranches'), id.toString());\n      await updateDoc(ranchRef, updates);\n      const updatedRanch = await getDoc(ranchRef);\n      return { ...updatedRanch.data(), id } as Ranch;\n    } catch (error) {\n      console.warn('Firestore updateRanch failed:', error);\n      return undefined;\n    }\n  }\n\n  // Lesson operations\n  async getLesson(id: number): Promise<Lesson | undefined> {\n    try {\n      const lessonDoc = doc(this.getPublicCollectionRef('lessons'), id.toString());\n      const lessonSnap = await getDoc(lessonDoc);\n      if (!lessonSnap.exists()) return undefined;\n      return { ...lessonSnap.data(), id: parseInt(lessonSnap.id) } as Lesson;\n    } catch (error) {\n      console.warn('Firestore getLesson failed:', error);\n      return undefined;\n    }\n  }\n\n  async getAllLessons(): Promise<Lesson[]> {\n    try {\n      const snapshot = await getDocs(this.getPublicCollectionRef('lessons'));\n      return snapshot.docs.map(doc => ({ \n        ...doc.data(), \n        id: parseInt(doc.id) \n      })) as Lesson[];\n    } catch (error) {\n      console.warn('Firestore getAllLessons failed:', error);\n      return [];\n    }\n  }\n\n  async getLessonsByCategory(category: string): Promise<Lesson[]> {\n    try {\n      const q = query(this.getPublicCollectionRef('lessons'), where('category', '==', category));\n      const snapshot = await getDocs(q);\n      return snapshot.docs.map(doc => ({ \n        ...doc.data(), \n        id: parseInt(doc.id) \n      })) as Lesson[];\n    } catch (error) {\n      console.warn('Firestore getLessonsByCategory failed:', error);\n      return [];\n    }\n  }\n\n  async createLesson(insertLesson: InsertLesson): Promise<Lesson> {\n    try {\n      const newLessonRef = doc(this.getPublicCollectionRef('lessons'), Date.now().toString());\n      await setDoc(newLessonRef, insertLesson);\n      return { ...insertLesson, id: parseInt(newLessonRef.id) } as Lesson;\n    } catch (error) {\n      console.warn('Firestore createLesson failed:', error);\n      return { ...insertLesson, id: Date.now() } as Lesson;\n    }\n  }\n\n  // User Progress operations  \n  async getUserProgress(userId: number, lessonId: number): Promise<UserProgress | undefined> {\n    try {\n      const q = query(this.getUserCollectionRef(userId.toString(), 'progress'), where('lessonId', '==', lessonId));\n      const snapshot = await getDocs(q);\n      if (snapshot.empty) return undefined;\n      const docData = snapshot.docs[0].data();\n      return { ...docData, id: parseInt(snapshot.docs[0].id) } as UserProgress;\n    } catch (error) {\n      console.warn('Firestore getUserProgress failed:', error);\n      return undefined;\n    }\n  }\n\n  async getUserProgressByUserId(userId: number): Promise<UserProgress[]> {\n    try {\n      const snapshot = await getDocs(this.getUserCollectionRef(userId.toString(), 'progress'));\n      return snapshot.docs.map(doc => ({ \n        ...doc.data(), \n        id: parseInt(doc.id) \n      })) as UserProgress[];\n    } catch (error) {\n      console.warn('Firestore getUserProgressByUserId failed:', error);\n      return [];\n    }\n  }\n\n  async createUserProgress(insertProgress: InsertUserProgress): Promise<UserProgress> {\n    try {\n      const progressRef = this.getUserCollectionRef(insertProgress.userId.toString(), 'progress');\n      const docRef = await addDoc(progressRef, {\n        ...insertProgress,\n        completedAt: insertProgress.isCompleted ? new Date() : null,\n        lastAttemptAt: new Date()\n      });\n      const newProgress = await getDoc(docRef);\n      return { ...newProgress.data(), id: parseInt(docRef.id) } as UserProgress;\n    } catch (error) {\n      console.warn('Firestore createUserProgress failed:', error);\n      return {\n        id: Date.now(),\n        userId: insertProgress.userId,\n        lessonId: insertProgress.lessonId,\n        isCompleted: insertProgress.isCompleted || false,\n        currentStep: insertProgress.currentStep || 1,\n        attempts: insertProgress.attempts || 0,\n        completedAt: insertProgress.isCompleted ? new Date() : null,\n        lastAttemptAt: new Date()\n      };\n    }\n  }\n\n  async updateUserProgress(userId: number, lessonId: number, updates: Partial<InsertUserProgress>): Promise<UserProgress | undefined> {\n    try {\n      const q = query(this.getUserCollectionRef(userId.toString(), 'progress'), where('lessonId', '==', lessonId));\n      const snapshot = await getDocs(q);\n      if (snapshot.empty) return undefined;\n      \n      const docRef = snapshot.docs[0].ref;\n      await updateDoc(docRef, {\n        ...updates,\n        completedAt: updates.isCompleted ? new Date() : null,\n        lastAttemptAt: new Date()\n      });\n      \n      const updatedProgress = await getDoc(docRef);\n      return { ...updatedProgress.data(), id: parseInt(docRef.id) } as UserProgress;\n    } catch (error) {\n      console.warn('Firestore updateUserProgress failed:', error);\n      return undefined;\n    }\n  }\n\n  // Character operations\n  async getCharacter(id: number): Promise<Character | undefined> {\n    return undefined; // Simplified for now\n  }\n\n  async getCharactersByRanchId(ranchId: number): Promise<Character[]> {\n    return []; // Simplified for now\n  }\n\n  async createCharacter(insertCharacter: InsertCharacter): Promise<Character> {\n    return {\n      id: Date.now(),\n      name: insertCharacter.name,\n      type: insertCharacter.type,\n      rarity: insertCharacter.rarity,\n      level: insertCharacter.level || 1,\n      experience: insertCharacter.experience || 0,\n      position: insertCharacter.position,\n      isActive: insertCharacter.isActive || true,\n      ranchId: insertCharacter.ranchId,\n      acquiredAt: new Date()\n    };\n  }\n\n  async updateCharacter(id: number, updates: Partial<InsertCharacter>): Promise<Character | undefined> {\n    return undefined; // Simplified for now\n  }\n\n  // Building operations\n  async getBuilding(id: number): Promise<Building | undefined> {\n    return undefined; // Simplified for now\n  }\n\n  async getBuildingsByRanchId(ranchId: number): Promise<Building[]> {\n    return []; // Simplified for now\n  }\n\n  async createBuilding(insertBuilding: InsertBuilding): Promise<Building> {\n    return {\n      id: Date.now(),\n      name: insertBuilding.name,\n      type: insertBuilding.type,\n      level: insertBuilding.level || 1,\n      position: insertBuilding.position,\n      isActive: insertBuilding.isActive || true,\n      ranchId: insertBuilding.ranchId,\n      builtAt: new Date()\n    };\n  }\n\n  async updateBuilding(id: number, updates: Partial<InsertBuilding>): Promise<Building | undefined> {\n    return undefined; // Simplified for now\n  }\n}\n\nexport const storage = new FirestoreStorage();","size_bytes":20509},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport firebaseProxyRoutes from \"./routes/firebase-proxy\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Add Firebase proxy routes\n  app.use(firebaseProxyRoutes);\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2046},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\nimport type { LessonStep, ValidationRule } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Lessons API\n  app.get(\"/api/lessons\", async (req, res) => {\n    try {\n      const lessons = await storage.getAllLessons();\n      res.json(lessons);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch lessons\" });\n    }\n  });\n\n  app.get(\"/api/lessons/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const lesson = await storage.getLesson(id);\n      if (!lesson) {\n        return res.status(404).json({ message: \"Lesson not found\" });\n      }\n      res.json(lesson);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch lesson\" });\n    }\n  });\n\n  // User Progress API\n  app.get(\"/api/user-progress/:userId\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const progress = await storage.getUserProgressByUserId(userId);\n      res.json(progress);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user progress\" });\n    }\n  });\n\n  app.post(\"/api/user-progress\", async (req, res) => {\n    try {\n      const progressData = req.body;\n      const progress = await storage.createUserProgress(progressData);\n      res.json(progress);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create user progress\" });\n    }\n  });\n\n  app.put(\"/api/user-progress/:userId/:lessonId\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const lessonId = parseInt(req.params.lessonId);\n      const updates = req.body;\n      \n      const progress = await storage.updateUserProgress(userId, lessonId, updates);\n      if (!progress) {\n        return res.status(404).json({ message: \"Progress not found\" });\n      }\n      res.json(progress);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user progress\" });\n    }\n  });\n\n  // Ranch API\n  app.get(\"/api/ranch/:userId\", async (req, res) => {\n    try {\n      const userId = parseInt(req.params.userId);\n      const ranch = await storage.getRanchByUserId(userId);\n      if (!ranch) {\n        return res.status(404).json({ message: \"Ranch not found\" });\n      }\n      res.json(ranch);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch ranch\" });\n    }\n  });\n\n  app.put(\"/api/ranch/:id\", async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const updates = req.body;\n      \n      const ranch = await storage.updateRanch(id, updates);\n      if (!ranch) {\n        return res.status(404).json({ message: \"Ranch not found\" });\n      }\n      res.json(ranch);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update ranch\" });\n    }\n  });\n\n  // Characters API\n  app.get(\"/api/characters/:ranchId\", async (req, res) => {\n    try {\n      const ranchId = parseInt(req.params.ranchId);\n      const characters = await storage.getCharactersByRanchId(ranchId);\n      res.json(characters);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch characters\" });\n    }\n  });\n\n  app.post(\"/api/characters\", async (req, res) => {\n    try {\n      const characterData = req.body;\n      const character = await storage.createCharacter(characterData);\n      res.json(character);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create character\" });\n    }\n  });\n\n  // Buildings API\n  app.get(\"/api/buildings/:ranchId\", async (req, res) => {\n    try {\n      const ranchId = parseInt(req.params.ranchId);\n      const buildings = await storage.getBuildingsByRanchId(ranchId);\n      res.json(buildings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch buildings\" });\n    }\n  });\n\n  app.post(\"/api/buildings\", async (req, res) => {\n    try {\n      const buildingData = req.body;\n      const building = await storage.createBuilding(buildingData);\n      res.json(building);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to create building\" });\n    }\n  });\n\n  // Code Compilation and Validation API\n  const compileSchema = z.object({\n    code: z.string(),\n    language: z.string(),\n    lessonId: z.number(),\n    currentStep: z.number()\n  });\n\n  app.post(\"/api/compile\", async (req, res) => {\n    try {\n      const { code, language, lessonId, currentStep } = compileSchema.parse(req.body);\n      \n      // Get lesson and step for validation\n      const lesson = await storage.getLesson(lessonId);\n      if (!lesson) {\n        return res.status(404).json({ \n          success: false, \n          message: \"Lesson not found\",\n          output: \"Error: Lesson not found\"\n        });\n      }\n\n      const step = lesson.steps.find(s => s.id === currentStep);\n      if (!step) {\n        return res.status(404).json({ \n          success: false, \n          message: \"Step not found\",\n          output: \"Error: Step not found\"\n        });\n      }\n\n      // Simulate compilation process\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Validate code against step requirements\n      const validation = validateCode(code, step);\n      \n      if (validation.success) {\n        res.json({\n          success: true,\n          message: \"Code compiled and executed successfully!\",\n          output: step.expectedOutput || \"Code executed successfully\",\n          validation: validation.results,\n          experience: 25,\n          coins: 10\n        });\n      } else {\n        res.json({\n          success: false,\n          message: \"Code compiled but validation failed\",\n          output: validation.message,\n          validation: validation.results,\n          errors: validation.errors\n        });\n      }\n    } catch (error) {\n      res.status(400).json({ \n        success: false, \n        message: \"Invalid request\",\n        output: \"Error: \" + (error instanceof Error ? error.message : \"Unknown error\")\n      });\n    }\n  });\n\n  app.post(\"/api/validate\", async (req, res) => {\n    try {\n      const { code, lessonId, currentStep } = req.body;\n      \n      const lesson = await storage.getLesson(lessonId);\n      if (!lesson) {\n        return res.status(404).json({ success: false, message: \"Lesson not found\" });\n      }\n\n      const step = lesson.steps.find(s => s.id === currentStep);\n      if (!step) {\n        return res.status(404).json({ success: false, message: \"Step not found\" });\n      }\n\n      const validation = validateCode(code, step);\n      res.json(validation);\n    } catch (error) {\n      res.status(500).json({ \n        success: false, \n        message: \"Validation failed\",\n        errors: [error instanceof Error ? error.message : \"Unknown error\"]\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Code validation helper function\nfunction validateCode(code: string, step: LessonStep) {\n  const results: { rule: ValidationRule; passed: boolean; message: string }[] = [];\n  let allPassed = true;\n  const errors: string[] = [];\n\n  for (const rule of step.validationRules) {\n    let passed = false;\n    let message = rule.message;\n\n    switch (rule.type) {\n      case \"contains\":\n        passed = code.includes(rule.pattern);\n        if (!passed && rule.required) {\n          allPassed = false;\n          errors.push(rule.message);\n        }\n        break;\n      \n      case \"regex\":\n        const regex = new RegExp(rule.pattern);\n        passed = regex.test(code);\n        if (!passed && rule.required) {\n          allPassed = false;\n          errors.push(rule.message);\n        }\n        break;\n      \n      case \"function_exists\":\n        passed = code.includes(`fn ${rule.pattern}`) || code.includes(`function ${rule.pattern}`);\n        if (!passed && rule.required) {\n          allPassed = false;\n          errors.push(rule.message);\n        }\n        break;\n      \n      case \"variable_exists\":\n        passed = code.includes(`let ${rule.pattern}`) || code.includes(`var ${rule.pattern}`) || code.includes(`const ${rule.pattern}`);\n        if (!passed && rule.required) {\n          allPassed = false;\n          errors.push(rule.message);\n        }\n        break;\n    }\n\n    results.push({ rule, passed, message });\n  }\n\n  return {\n    success: allPassed,\n    message: allPassed ? \"All validation rules passed!\" : \"Some validation rules failed\",\n    results,\n    errors\n  };\n}\n","size_bytes":8540},"server/storage-backup.ts":{"content":"import {\n  users, ranches, lessons, userProgress, characters, buildings, rewardNfts,\n  type User, type InsertUser, type Ranch, type InsertRanch, type Lesson, type InsertLesson,\n  type UserProgress, type InsertUserProgress, type Character, type InsertCharacter,\n  type Building, type InsertBuilding, type RewardNft, type InsertRewardNft, type LessonStep\n} from \"@shared/schema\";\nimport { initializeApp } from \"firebase/app\";\nimport { getFirestore, doc, getDoc, setDoc, addDoc, updateDoc, deleteDoc, collection, query, where, getDocs } from \"firebase/firestore\";\n\n// Firebase configuration using environment secrets\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_API_KEY,\n  authDomain: process.env.FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.FIREBASE_PROJECT_ID,\n  storageBucket: process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.FIREBASE_APP_ID\n};\n\n// Initialize Firebase on the server-side\nconst firebaseApp = initializeApp(firebaseConfig);\nconst firestoreDb = getFirestore(firebaseApp);\n\n// Define base paths for Firestore collections\nconst ARTIFACTS_PATH = `artifacts/shadow-ranch`;\n\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined>;\n\n  // Ranch operations\n  getRanch(id: number): Promise<Ranch | undefined>;\n  getRanchByUserId(userId: number): Promise<Ranch | undefined>;\n  createRanch(ranch: InsertRanch): Promise<Ranch>;\n  updateRanch(id: number, updates: Partial<InsertRanch>): Promise<Ranch | undefined>;\n\n  // Lesson operations\n  getLesson(id: number): Promise<Lesson | undefined>;\n  getAllLessons(): Promise<Lesson[]>;\n  getLessonsByCategory(category: string): Promise<Lesson[]>;\n  createLesson(lesson: InsertLesson): Promise<Lesson>;\n\n  // User Progress operations\n  getUserProgress(userId: number, lessonId: number): Promise<UserProgress | undefined>;\n  getUserProgressByUserId(userId: number): Promise<UserProgress[]>;\n  createUserProgress(progress: InsertUserProgress): Promise<UserProgress>;\n  updateUserProgress(userId: number, lessonId: number, updates: Partial<InsertUserProgress>): Promise<UserProgress | undefined>;\n\n  // Character operations\n  getCharacter(id: number): Promise<Character | undefined>;\n  getCharactersByRanchId(ranchId: number): Promise<Character[]>;\n  createCharacter(character: InsertCharacter): Promise<Character>;\n  updateCharacter(id: number, updates: Partial<InsertCharacter>): Promise<Character | undefined>;\n\n  // Building operations\n  getBuilding(id: number): Promise<Building | undefined>;\n  getBuildingsByRanchId(ranchId: number): Promise<Building[]>;\n  createBuilding(building: InsertBuilding): Promise<Building>;\n  updateBuilding(id: number, updates: Partial<InsertBuilding>): Promise<Building | undefined>;\n}\n\nexport class FirestoreStorage implements IStorage {\n  private db: any;\n\n  constructor() {\n    this.db = firestoreDb;\n    this.initializeDefaultLessons();\n  }\n\n  private getUserCollectionRef(userId: string, collectionName: string) {\n    return collection(this.db, `${ARTIFACTS_PATH}/users/${userId}/${collectionName}`);\n  }\n\n  private getPublicCollectionRef(collectionName: string) {\n    return collection(this.db, `${ARTIFACTS_PATH}/public/data/${collectionName}`);\n  }\n\n  private async initializeDefaultLessons() {\n    try {\n      const lessonsRef = this.getPublicCollectionRef('lessons');\n      const snapshot = await getDocs(lessonsRef);\n      if (snapshot.empty) {\n        const defaultLessons = [\n          {\n            id: 1,\n            title: \"Solana Basics & Wallet Setup\",\n            description: \"Learn the fundamentals of Solana and set up your Web3 wallet\",\n            difficulty: 'beginner',\n            duration: '30 min',\n            reward: 100,\n            requiredLessons: [],\n            category: 'fundamentals',\n            order: 1,\n            isActive: true,\n            steps: [\n              {\n                id: 1,\n                title: \"Ping the Blockchain\",\n                narrative: \"Welcome to Shadow Ranch, partner! Time to connect to the Solana network.\",\n                instructions: [\n                  \"Write `get_network_status()` to check Devnet health.\",\n                  \"Execute the command to ping the blockchain\"\n                ],\n                hints: [\n                  \"Use the exact function name: get_network_status()\",\n                  \"Make sure to include the parentheses\"\n                ],\n                validationRules: [\n                  {\n                    type: \"contains\",\n                    pattern: \"get_network_status()\",\n                    message: \"Function call must be exactly 'get_network_status()'\",\n                    required: true\n                  }\n                ],\n                starterCode: \"// Connect to Solana Devnet\\n// TODO: Call get_network_status() function\\n\",\n                expectedOutput: \"Network Status: Connected! Ping: 45ms | Current Slot: 245891023\"\n              }\n            ]\n          },\n          {\n            id: 2,\n            title: \"Creating Your Ranch Account\",\n            description: \"Build your first Solana program to manage ranch data\",\n            difficulty: 'beginner',\n            duration: '45 min',\n            reward: 150,\n            requiredLessons: [1],\n            category: 'programming',\n            order: 2,\n            isActive: true,\n            steps: [\n              {\n                id: 1,\n                title: \"Define Ranch Owner Field\",\n                narrative: \"Every ranch needs an owner. Let's add that to our Ranch struct.\",\n                instructions: [\n                  \"In the Ranch struct, add a pubkey field named 'owner'\",\n                  \"Use proper Rust syntax with pub visibility\"\n                ],\n                hints: [\n                  \"Rust syntax: pub owner: Pubkey,\",\n                  \"Don't forget the comma at the end\"\n                ],\n                validationRules: [\n                  {\n                    type: \"regex\",\n                    pattern: \"pub\\\\s+owner:\\\\s*Pubkey,\",\n                    message: \"Add 'pub owner: Pubkey,' to the Ranch struct\",\n                    required: true\n                  }\n                ],\n                starterCode: \"use anchor_lang::prelude::*;\\n\\n#[account]\\npub struct Ranch {\\n    // TODO: Add owner field\\n}\\n\",\n                expectedOutput: \"Ranch struct defined with owner field\"\n              },\n              {\n                id: 2,\n                title: \"Initialize Owner in Function\",\n                narrative: \"Now let's assign the owner when creating a ranch.\",\n                instructions: [\n                  \"In initialize_ranch function, set ranch.owner to ctx.accounts.user.key()\",\n                  \"Use proper Rust assignment syntax\"\n                ],\n                hints: [\n                  \"Syntax: ranch.owner = ctx.accounts.user.key();\",\n                  \"Don't forget the semicolon\"\n                ],\n                validationRules: [\n                  {\n                    type: \"regex\",\n                    pattern: \"ranch\\\\.owner\\\\s*=\\\\s*ctx\\\\.accounts\\\\.user\\\\.key\\\\(\\\\);\",\n                    message: \"Set ranch.owner = ctx.accounts.user.key();\",\n                    required: true\n                  }\n                ],\n                starterCode: \"pub fn initialize_ranch(ctx: Context<InitializeRanch>) -> Result<()> {\\n    let ranch = &mut ctx.accounts.ranch;\\n    // TODO: Set the owner\\n    Ok(())\\n}\\n\",\n                expectedOutput: \"Ranch owner initialized successfully\"\n              },\n              {\n                id: 3,\n                title: \"Program Entrypoint & Instruction Dispatch\",\n                narrative: \"Time to create the main program entry point that handles different instructions.\",\n                instructions: [\n                  \"Define the program entrypoint using #[program]\",\n                  \"Add instruction dispatch for initialize_ranch\",\n                  \"Include proper error handling\"\n                ],\n                hints: [\n                  \"Use #[program] attribute before the mod declaration\",\n                  \"Each instruction should be a public function\",\n                  \"Return Result<()> for proper error handling\"\n                ],\n                validationRules: [\n                  {\n                    type: \"contains\",\n                    pattern: \"#[program]\",\n                    message: \"Add #[program] attribute\",\n                    required: true\n                  },\n                  {\n                    type: \"contains\",\n                    pattern: \"pub mod\",\n                    message: \"Define a public module\",\n                    required: true\n                  },\n                  {\n                    type: \"contains\",\n                    pattern: \"initialize_ranch\",\n                    message: \"Include initialize_ranch instruction\",\n                    required: true\n                  }\n                ],\n                starterCode: \"use anchor_lang::prelude::*;\\n\\ndeclare_id!(\\\"YourProgramIDHere\\\");\\n\\n// TODO: Add #[program] attribute and define the program module\\n\",\n                expectedOutput: \"Program entrypoint created with instruction dispatch\"\n              }\n            ]\n          }\n        ];\n\n        for (const lessonData of defaultLessons) {\n          await setDoc(doc(lessonsRef, lessonData.id.toString()), lessonData);\n        }\n      }\n    } catch (error) {\n      console.warn('Failed to initialize Firestore lessons, falling back to local storage:', error);\n    }\n  }\n\n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    try {\n      const userDoc = doc(this.getPublicCollectionRef('users'), id.toString());\n      const userSnap = await getDoc(userDoc);\n      if (!userSnap.exists()) return undefined;\n      return { ...userSnap.data(), id: parseInt(userSnap.id) } as User;\n    } catch (error) {\n      console.warn('Firestore getUser failed:', error);\n      return undefined;\n    }\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    try {\n      const q = query(this.getPublicCollectionRef('users'), where('username', '==', username));\n      const snapshot = await getDocs(q);\n      if (snapshot.empty) return undefined;\n      const docData = snapshot.docs[0].data();\n      return { ...docData, id: parseInt(snapshot.docs[0].id) } as User;\n    } catch (error) {\n      console.warn('Firestore getUserByUsername failed:', error);\n      return undefined;\n    }\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    try {\n      const newUserRef = doc(this.getPublicCollectionRef('users'), Date.now().toString());\n      const userData = { ...insertUser, createdAt: new Date() };\n      await setDoc(newUserRef, userData);\n      return { ...userData, id: parseInt(newUserRef.id) } as User;\n    } catch (error) {\n      console.warn('Firestore createUser failed:', error);\n      // Fallback to mock user\n      return {\n        id: Date.now(),\n        username: insertUser.username,\n        password: insertUser.password,\n        walletAddress: insertUser.walletAddress || null,\n        pfpUrl: insertUser.pfpUrl || null,\n        createdAt: new Date()\n      };\n    }\n  }\n\n  async updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined> {\n    try {\n      const userRef = doc(this.getPublicCollectionRef('users'), id.toString());\n      await updateDoc(userRef, updates);\n      const updatedUser = await getDoc(userRef);\n      return { ...updatedUser.data(), id } as User;\n    } catch (error) {\n      console.warn('Firestore updateUser failed:', error);\n      return undefined;\n    }\n  }\n\n  // Ranch operations\n  async getRanch(id: number): Promise<Ranch | undefined> {\n    try {\n      const ranchDoc = doc(this.getPublicCollectionRef('ranches'), id.toString());\n      const ranchSnap = await getDoc(ranchDoc);\n      if (!ranchSnap.exists()) return undefined;\n      return { ...ranchSnap.data(), id: parseInt(ranchSnap.id) } as Ranch;\n    } catch (error) {\n      console.warn('Firestore getRanch failed:', error);\n      return undefined;\n    }\n  }\n\n  async getRanchByUserId(userId: number): Promise<Ranch | undefined> {\n    try {\n      const q = query(this.getPublicCollectionRef('ranches'), where('userId', '==', userId));\n      const snapshot = await getDocs(q);\n      if (snapshot.empty) return undefined;\n      const docData = snapshot.docs[0].data();\n      return { ...docData, id: parseInt(snapshot.docs[0].id) } as Ranch;\n    } catch (error) {\n      console.warn('Firestore getRanchByUserId failed:', error);\n      return undefined;\n    }\n  }\n\n  async createRanch(insertRanch: InsertRanch): Promise<Ranch> {\n    try {\n      const newRanchRef = doc(this.getPublicCollectionRef('ranches'), Date.now().toString());\n      const ranchData = { \n        ...insertRanch, \n        level: insertRanch.level || 1,\n        experience: insertRanch.experience || 0,\n        coins: insertRanch.coins || 500,\n        createdAt: new Date() \n      };\n      await setDoc(newRanchRef, ranchData);\n      return { ...ranchData, id: parseInt(newRanchRef.id) } as Ranch;\n    } catch (error) {\n      console.warn('Firestore createRanch failed:', error);\n      // Fallback to mock ranch\n      return {\n        id: Date.now(),\n        name: insertRanch.name,\n        userId: insertRanch.userId,\n        level: insertRanch.level || 1,\n        experience: insertRanch.experience || 0,\n        coins: insertRanch.coins || 500,\n        createdAt: new Date()\n      };\n    }\n  }\n\n  async updateRanch(id: number, updates: Partial<InsertRanch>): Promise<Ranch | undefined> {\n    try {\n      const ranchRef = doc(this.getPublicCollectionRef('ranches'), id.toString());\n      await updateDoc(ranchRef, updates);\n      const updatedRanch = await getDoc(ranchRef);\n      return { ...updatedRanch.data(), id } as Ranch;\n    } catch (error) {\n      console.warn('Firestore updateRanch failed:', error);\n      return undefined;\n    }\n  }\n\n  // Lesson operations\n  async getLesson(id: number): Promise<Lesson | undefined> {\n    try {\n      const lessonDoc = doc(this.getPublicCollectionRef('lessons'), id.toString());\n      const lessonSnap = await getDoc(lessonDoc);\n      if (!lessonSnap.exists()) return undefined;\n      return { ...lessonSnap.data(), id: parseInt(lessonSnap.id) } as Lesson;\n    } catch (error) {\n      console.warn('Firestore getLesson failed:', error);\n      return undefined;\n    }\n  }\n\n  async getAllLessons(): Promise<Lesson[]> {\n    try {\n      const snapshot = await getDocs(this.getPublicCollectionRef('lessons'));\n      return snapshot.docs.map(doc => ({ \n        ...doc.data(), \n        id: parseInt(doc.id) \n      })) as Lesson[];\n    } catch (error) {\n      console.warn('Firestore getAllLessons failed:', error);\n      return [];\n    }\n  }\n\n  async getLessonsByCategory(category: string): Promise<Lesson[]> {\n    try {\n      const q = query(this.getPublicCollectionRef('lessons'), where('category', '==', category));\n      const snapshot = await getDocs(q);\n      return snapshot.docs.map(doc => ({ \n        ...doc.data(), \n        id: parseInt(doc.id) \n      })) as Lesson[];\n    } catch (error) {\n      console.warn('Firestore getLessonsByCategory failed:', error);\n      return [];\n    }\n  }\n\n  async createLesson(insertLesson: InsertLesson): Promise<Lesson> {\n    try {\n      const newLessonRef = doc(this.getPublicCollectionRef('lessons'), Date.now().toString());\n      await setDoc(newLessonRef, insertLesson);\n      return { ...insertLesson, id: parseInt(newLessonRef.id) } as Lesson;\n    } catch (error) {\n      console.warn('Firestore createLesson failed:', error);\n      return { ...insertLesson, id: Date.now() } as Lesson;\n    }\n  }\n\n  // User Progress operations  \n  async getUserProgress(userId: number, lessonId: number): Promise<UserProgress | undefined> {\n    try {\n      const q = query(this.getUserCollectionRef(userId.toString(), 'progress'), where('lessonId', '==', lessonId));\n      const snapshot = await getDocs(q);\n      if (snapshot.empty) return undefined;\n      const docData = snapshot.docs[0].data();\n      return { ...docData, id: parseInt(snapshot.docs[0].id) } as UserProgress;\n    } catch (error) {\n      console.warn('Firestore getUserProgress failed:', error);\n      return undefined;\n    }\n  }\n\n  async getUserProgressByUserId(userId: number): Promise<UserProgress[]> {\n    try {\n      const snapshot = await getDocs(this.getUserCollectionRef(userId.toString(), 'progress'));\n      return snapshot.docs.map(doc => ({ \n        ...doc.data(), \n        id: parseInt(doc.id) \n      })) as UserProgress[];\n    } catch (error) {\n      console.warn('Firestore getUserProgressByUserId failed:', error);\n      return [];\n    }\n  }\n\n  async createUserProgress(insertProgress: InsertUserProgress): Promise<UserProgress> {\n    try {\n      const progressRef = this.getUserCollectionRef(insertProgress.userId.toString(), 'progress');\n      const docRef = await addDoc(progressRef, {\n        ...insertProgress,\n        completedAt: insertProgress.isCompleted ? new Date() : null,\n        lastAttemptAt: new Date()\n      });\n      const newProgress = await getDoc(docRef);\n      return { ...newProgress.data(), id: parseInt(docRef.id) } as UserProgress;\n    } catch (error) {\n      console.warn('Firestore createUserProgress failed:', error);\n      return {\n        id: Date.now(),\n        userId: insertProgress.userId,\n        lessonId: insertProgress.lessonId,\n        isCompleted: insertProgress.isCompleted || false,\n        currentStep: insertProgress.currentStep || 1,\n        attempts: insertProgress.attempts || 0,\n        completedAt: insertProgress.isCompleted ? new Date() : null,\n        lastAttemptAt: new Date()\n      };\n    }\n  }\n\n  async updateUserProgress(userId: number, lessonId: number, updates: Partial<InsertUserProgress>): Promise<UserProgress | undefined> {\n    try {\n      const q = query(this.getUserCollectionRef(userId.toString(), 'progress'), where('lessonId', '==', lessonId));\n      const snapshot = await getDocs(q);\n      if (snapshot.empty) return undefined;\n      \n      const docRef = snapshot.docs[0].ref;\n      await updateDoc(docRef, {\n        ...updates,\n        completedAt: updates.isCompleted ? new Date() : null,\n        lastAttemptAt: new Date()\n      });\n      \n      const updatedProgress = await getDoc(docRef);\n      return { ...updatedProgress.data(), id: parseInt(docRef.id) } as UserProgress;\n    } catch (error) {\n      console.warn('Firestore updateUserProgress failed:', error);\n      return undefined;\n    }\n  }\n\n  // Character operations\n  async getCharacter(id: number): Promise<Character | undefined> {\n    return undefined; // Simplified for now\n  }\n\n  async getCharactersByRanchId(ranchId: number): Promise<Character[]> {\n    return []; // Simplified for now\n  }\n\n  async createCharacter(insertCharacter: InsertCharacter): Promise<Character> {\n    return {\n      id: Date.now(),\n      name: insertCharacter.name,\n      type: insertCharacter.type,\n      rarity: insertCharacter.rarity,\n      level: insertCharacter.level || 1,\n      experience: insertCharacter.experience || 0,\n      position: insertCharacter.position,\n      isActive: insertCharacter.isActive || true,\n      ranchId: insertCharacter.ranchId,\n      acquiredAt: new Date()\n    };\n  }\n\n  async updateCharacter(id: number, updates: Partial<InsertCharacter>): Promise<Character | undefined> {\n    return undefined; // Simplified for now\n  }\n\n  // Building operations\n  async getBuilding(id: number): Promise<Building | undefined> {\n    return undefined; // Simplified for now\n  }\n\n  async getBuildingsByRanchId(ranchId: number): Promise<Building[]> {\n    return []; // Simplified for now\n  }\n\n  async createBuilding(insertBuilding: InsertBuilding): Promise<Building> {\n    return {\n      id: Date.now(),\n      name: insertBuilding.name,\n      type: insertBuilding.type,\n      level: insertBuilding.level || 1,\n      position: insertBuilding.position,\n      isActive: insertBuilding.isActive || true,\n      ranchId: insertBuilding.ranchId,\n      builtAt: new Date()\n    };\n  }\n\n  async updateBuilding(id: number, updates: Partial<InsertBuilding>): Promise<Building | undefined> {\n    return undefined; // Simplified for now\n  }\n}\n\nexport const storage = new FirestoreStorage();","size_bytes":20509},"server/storage-corrupted.ts":{"content":"import { \n  users, ranches, lessons, userProgress, characters, buildings,\n  type User, type Ranch, type Lesson, type UserProgress, type Character, type Building,\n  type InsertUser, type InsertRanch, type InsertLesson, type InsertUserProgress, \n  type InsertCharacter, type InsertBuilding, type LessonStep\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined>;\n\n  // Ranch operations\n  getRanch(id: number): Promise<Ranch | undefined>;\n  getRanchByUserId(userId: number): Promise<Ranch | undefined>;\n  createRanch(ranch: InsertRanch): Promise<Ranch>;\n  updateRanch(id: number, updates: Partial<InsertRanch>): Promise<Ranch | undefined>;\n\n  // Lesson operations\n  getLesson(id: number): Promise<Lesson | undefined>;\n  getAllLessons(): Promise<Lesson[]>;\n  getLessonsByCategory(category: string): Promise<Lesson[]>;\n  createLesson(lesson: InsertLesson): Promise<Lesson>;\n\n  // User Progress operations\n  getUserProgress(userId: number, lessonId: number): Promise<UserProgress | undefined>;\n  getUserProgressByUserId(userId: number): Promise<UserProgress[]>;\n  createUserProgress(progress: InsertUserProgress): Promise<UserProgress>;\n  updateUserProgress(userId: number, lessonId: number, updates: Partial<InsertUserProgress>): Promise<UserProgress | undefined>;\n\n  // Character operations\n  getCharacter(id: number): Promise<Character | undefined>;\n  getCharactersByRanchId(ranchId: number): Promise<Character[]>;\n  createCharacter(character: InsertCharacter): Promise<Character>;\n  updateCharacter(id: number, updates: Partial<InsertCharacter>): Promise<Character | undefined>;\n\n  // Building operations\n  getBuilding(id: number): Promise<Building | undefined>;\n  getBuildingsByRanchId(ranchId: number): Promise<Building[]>;\n  createBuilding(building: InsertBuilding): Promise<Building>;\n  updateBuilding(id: number, updates: Partial<InsertBuilding>): Promise<Building | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private ranches: Map<number, Ranch>;\n  private lessons: Map<number, Lesson>;\n  private userProgress: Map<string, UserProgress>; // key: `${userId}-${lessonId}`\n  private characters: Map<number, Character>;\n  private buildings: Map<number, Building>;\n  private currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.ranches = new Map();\n    this.lessons = new Map();\n    this.userProgress = new Map();\n    this.characters = new Map();\n    this.buildings = new Map();\n    this.currentId = 1;\n    \n    this.initializeDefaultData();\n  }\n\n  private initializeDefaultData() {\n    // Create default lessons with Lesson 2, Step 3 (Program Entrypoint & Instruction Dispatch)\n    const defaultLessons: InsertLesson[] = [\n      {\n        title: \"Introduction to Rust\",\n        description: \"Learn the basics of Rust programming language and set up your development environment for Solana.\",\n        difficulty: \"Beginner\",\n        duration: \"30 min\",\n        reward: 100,\n        requiredLessons: [],\n        category: \"rust\",\n        order: 1,\n        steps: [\n          {\n            id: 1,\n            title: \"Your First Variable\",\n            narrative: \"Welcome to Shadow Ranch, partner! Time to learn the basics of Rust. Let's start by declaring a simple variable.\",\n            instructions: [\n              \"Declare a variable named `greeting`\",\n              \"Assign the string \\\"Hello, Solana!\\\"\",\n              \"Print the variable using println! macro\"\n            ],\n            hints: [\n              \"In Rust, strings are created with double quotes\",\n              \"The syntax is: `let variable_name = \\\"string value\\\";`\",\n              \"Use `println!(\\\"{}\\\", variable_name);` to print\"\n            ],\n            validationRules: [\n              {\n                type: \"contains\",\n                pattern: \"let greeting\",\n                message: \"Create a variable named 'greeting'\",\n                required: true\n              },\n              {\n                type: \"contains\",\n                pattern: \"Hello, Solana!\",\n                message: \"Assign the correct string value\",\n                required: true\n              },\n              {\n                type: \"contains\",\n                pattern: \"println!\",\n                message: \"Use println! macro to display the output\",\n                required: true\n              }\n            ],\n            starterCode: \"fn main() {\\n    // Write your code here\\n    \\n}\",\n            expectedOutput: \"Hello, Solana!\"\n          },\n          {\n            id: 2,\n            title: \"Working with Numbers\",\n            narrative: \"Good work! Now let's explore Rust's number types. In the frontier, counting your coins is essential!\",\n            instructions: [\n              \"Create a variable `coins` with value 150\",\n              \"Create a variable `gems` with value 25\",\n              \"Calculate and print their sum\"\n            ],\n            hints: [\n              \"Rust has integer types like i32, u32, etc.\",\n              \"You can use + to add numbers\",\n              \"Variables are immutable by default in Rust\"\n            ],\n            validationRules: [\n              {\n                type: \"contains\",\n                pattern: \"let coins\",\n                message: \"Create a 'coins' variable\",\n                required: true\n              },\n              {\n                type: \"contains\",\n                pattern: \"let gems\",\n                message: \"Create a 'gems' variable\",\n                required: true\n              },\n              {\n                type: \"contains\",\n                pattern: \"coins + gems\",\n                message: \"Calculate the sum of coins and gems\",\n                required: true\n              }\n            ],\n            starterCode: \"fn main() {\\n    // Declare your variables here\\n    \\n}\",\n            expectedOutput: \"175\"\n          }\n        ]\n      },\n      {\n        title: \"Anchor Framework Basics\",\n        description: \"Dive into Anchor framework and build your first Solana program with automatic IDL generation.\",\n        difficulty: \"Intermediate\",\n        duration: \"45 min\",\n        reward: 200,\n        requiredLessons: [1],\n        category: \"anchor\",\n        order: 2,\n        steps: [\n          {\n            id: 1,\n            title: \"Setting up Anchor\",\n            narrative: \"Time to saddle up with Anchor! This framework makes Solana development as smooth as a well-oiled saddle.\",\n            instructions: [\n              \"Import the anchor_lang prelude\",\n              \"Define a basic program structure\",\n              \"Create an Initialize instruction\"\n            ],\n            hints: [\n              \"Use `use anchor_lang::prelude::*;`\",\n              \"Programs are defined with `#[program]`\",\n              \"Instructions are functions in the program module\"\n            ],\n            validationRules: [\n              {\n                type: \"contains\",\n                pattern: \"use anchor_lang::prelude::*\",\n                message: \"Import anchor_lang prelude\",\n                required: true\n              },\n              {\n                type: \"contains\",\n                pattern: \"#[program]\",\n                message: \"Define a program with #[program] attribute\",\n                required: true\n              }\n            ],\n            starterCode: \"// Import Anchor prelude\\n\\n// Define your program here\\n\",\n            expectedOutput: \"Program compiled successfully\"\n          }\n        ]\n      },\n      {\n        title: \"Advanced Solana Programs\",\n        description: \"Build complex DeFi protocols and NFT marketplaces using advanced Solana programming patterns.\",\n        difficulty: \"Advanced\",\n        duration: \"60 min\",\n        reward: 500,\n        requiredLessons: [1, 2],\n        category: \"anchor\",\n        order: 3,\n        steps: [\n          {\n            id: 1,\n            title: \"Complex State Management\",\n            narrative: \"You've reached the advanced frontier! Time to handle complex state like a true blockchain sheriff.\",\n            instructions: [\n              \"Define a complex account structure\",\n              \"Implement state transitions\",\n              \"Handle error cases\"\n            ],\n            hints: [\n              \"Use Account<'info, T> for account deserialization\",\n              \"Define custom error types\",\n              \"Use constraint validations\"\n            ],\n            validationRules: [\n              {\n                type: \"contains\",\n                pattern: \"#[account]\",\n                message: \"Define an account structure\",\n                required: true\n              }\n            ],\n            starterCode: \"// Advanced Solana program structure\\n\",\n            expectedOutput: \"Advanced program deployed\"\n          }\n        ]\n      }\n    ];\n\n    // Initialize lessons\n    defaultLessons.forEach(lesson => {\n      this.createLesson(lesson);\n    });\n  }\n\n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { \n      ...insertUser, \n      id, \n      createdAt: new Date() \n    };\n    this.users.set(id, user);\n    \n    // Create default ranch for user\n    await this.createRanch({\n      userId: id,\n      name: `${insertUser.username}'s Ranch`,\n      coins: 100,\n      experience: 0,\n      level: 1\n    });\n    \n    return user;\n  }\n\n  async updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Ranch operations\n  async getRanch(id: number): Promise<Ranch | undefined> {\n    return this.ranches.get(id);\n  }\n\n  async getRanchByUserId(userId: number): Promise<Ranch | undefined> {\n    return Array.from(this.ranches.values()).find(ranch => ranch.userId === userId);\n  }\n\n  async createRanch(insertRanch: InsertRanch): Promise<Ranch> {\n    const id = this.currentId++;\n    const ranch: Ranch = { \n      ...insertRanch, \n      id, \n      createdAt: new Date() \n    };\n    this.ranches.set(id, ranch);\n    return ranch;\n  }\n\n  async updateRanch(id: number, updates: Partial<InsertRanch>): Promise<Ranch | undefined> {\n    const ranch = this.ranches.get(id);\n    if (!ranch) return undefined;\n    \n    const updatedRanch = { ...ranch, ...updates };\n    this.ranches.set(id, updatedRanch);\n    return updatedRanch;\n  }\n\n  // Lesson operations\n  async getLesson(id: number): Promise<Lesson | undefined> {\n    return this.lessons.get(id);\n  }\n\n  async getAllLessons(): Promise<Lesson[]> {\n    return Array.from(this.lessons.values()).sort((a, b) => a.order - b.order);\n  }\n\n  async getLessonsByCategory(category: string): Promise<Lesson[]> {\n    return Array.from(this.lessons.values())\n      .filter(lesson => lesson.category === category)\n      .sort((a, b) => a.order - b.order);\n  }\n\n  async createLesson(insertLesson: InsertLesson): Promise<Lesson> {\n    const id = this.currentId++;\n    const lesson: Lesson = { ...insertLesson, id };\n    this.lessons.set(id, lesson);\n    return lesson;\n  }\n\n  // User Progress operations\n  async getUserProgress(userId: number, lessonId: number): Promise<UserProgress | undefined> {\n    return this.userProgress.get(`${userId}-${lessonId}`);\n  }\n\n  async getUserProgressByUserId(userId: number): Promise<UserProgress[]> {\n    return Array.from(this.userProgress.values()).filter(progress => progress.userId === userId);\n  }\n\n  async createUserProgress(insertProgress: InsertUserProgress): Promise<UserProgress> {\n    const id = this.currentId++;\n    const progress: UserProgress = { \n      ...insertProgress, \n      id, \n      lastAttemptAt: new Date() \n    };\n    this.userProgress.set(`${insertProgress.userId}-${insertProgress.lessonId}`, progress);\n    return progress;\n  }\n\n  async updateUserProgress(userId: number, lessonId: number, updates: Partial<InsertUserProgress>): Promise<UserProgress | undefined> {\n    const key = `${userId}-${lessonId}`;\n    const progress = this.userProgress.get(key);\n    if (!progress) return undefined;\n    \n    const updatedProgress = { \n      ...progress, \n      ...updates, \n      lastAttemptAt: new Date(),\n      completedAt: updates.isCompleted ? new Date() : progress.completedAt\n    };\n    this.userProgress.set(key, updatedProgress);\n    return updatedProgress;\n  }\n\n  // Character operations\n  async getCharacter(id: number): Promise<Character | undefined> {\n    return this.characters.get(id);\n  }\n\n  async getCharactersByRanchId(ranchId: number): Promise<Character[]> {\n    return Array.from(this.characters.values()).filter(character => character.ranchId === ranchId);\n  }\n\n  async createCharacter(insertCharacter: InsertCharacter): Promise<Character> {\n    const id = this.currentId++;\n    const character: Character = { \n      ...insertCharacter, \n      id, \n      acquiredAt: new Date() \n    };\n    this.characters.set(id, character);\n    return character;\n  }\n\n  async updateCharacter(id: number, updates: Partial<InsertCharacter>): Promise<Character | undefined> {\n    const character = this.characters.get(id);\n    if (!character) return undefined;\n    \n    const updatedCharacter = { ...character, ...updates };\n    this.characters.set(id, updatedCharacter);\n    return updatedCharacter;\n  }\n\n  // Building operations\n  async getBuilding(id: number): Promise<Building | undefined> {\n    return this.buildings.get(id);\n  }\n\n  async getBuildingsByRanchId(ranchId: number): Promise<Building[]> {\n    return Array.from(this.buildings.values()).filter(building => building.ranchId === ranchId);\n  }\n\n  async createBuilding(insertBuilding: InsertBuilding): Promise<Building> {\n    const id = this.currentId++;\n    const building: Building = { \n      ...insertBuilding, \n      id, \n      builtAt: new Date() \n    };\n    this.buildings.set(id, building);\n    return building;\n  }\n\n  async updateBuilding(id: number, updates: Partial<InsertBuilding>): Promise<Building | undefined> {\n    const building = this.buildings.get(id);\n    if (!building) return undefined;\n    \n    const updatedBuilding = { ...building, ...updates };\n    this.buildings.set(id, updatedBuilding);\n    return updatedBuilding;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":14777},"server/storage.ts":{"content":"import {\n  users, ranches, lessons, userProgress, characters, buildings, rewardNfts,\n  type User, type InsertUser, type Ranch, type InsertRanch, type Lesson, type InsertLesson,\n  type UserProgress, type InsertUserProgress, type Character, type InsertCharacter,\n  type Building, type InsertBuilding, type RewardNft, type InsertRewardNft, type LessonStep\n} from \"@shared/schema\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined>;\n\n  // Ranch operations\n  getRanch(id: number): Promise<Ranch | undefined>;\n  getRanchByUserId(userId: number): Promise<Ranch | undefined>;\n  createRanch(ranch: InsertRanch): Promise<Ranch>;\n  updateRanch(id: number, updates: Partial<InsertRanch>): Promise<Ranch | undefined>;\n\n  // Lesson operations\n  getLesson(id: number): Promise<Lesson | undefined>;\n  getAllLessons(): Promise<Lesson[]>;\n  getLessonsByCategory(category: string): Promise<Lesson[]>;\n  createLesson(lesson: InsertLesson): Promise<Lesson>;\n\n  // User Progress operations\n  getUserProgress(userId: number, lessonId: number): Promise<UserProgress | undefined>;\n  getUserProgressByUserId(userId: number): Promise<UserProgress[]>;\n  createUserProgress(progress: InsertUserProgress): Promise<UserProgress>;\n  updateUserProgress(userId: number, lessonId: number, updates: Partial<InsertUserProgress>): Promise<UserProgress | undefined>;\n\n  // Character operations\n  getCharacter(id: number): Promise<Character | undefined>;\n  getCharactersByRanchId(ranchId: number): Promise<Character[]>;\n  createCharacter(character: InsertCharacter): Promise<Character>;\n  updateCharacter(id: number, updates: Partial<InsertCharacter>): Promise<Character | undefined>;\n\n  // Building operations\n  getBuilding(id: number): Promise<Building | undefined>;\n  getBuildingsByRanchId(ranchId: number): Promise<Building[]>;\n  createBuilding(building: InsertBuilding): Promise<Building>;\n  updateBuilding(id: number, updates: Partial<InsertBuilding>): Promise<Building | undefined>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private ranches: Map<number, Ranch>;\n  private lessons: Map<number, Lesson>;\n  private userProgress: Map<string, UserProgress>; // key: `${userId}-${lessonId}`\n  private characters: Map<number, Character>;\n  private buildings: Map<number, Building>;\n  private currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.ranches = new Map();\n    this.lessons = new Map();\n    this.userProgress = new Map();\n    this.characters = new Map();\n    this.buildings = new Map();\n    this.currentId = 1;\n    \n    this.initializeDefaultData();\n  }\n\n  private initializeDefaultData() {\n    // Create default lessons including Lesson 2, Step 3 (Program Entrypoint & Instruction Dispatch)\n    const defaultLessons: InsertLesson[] = [\n      {\n        title: \"Introduction to Rust\",\n        description: \"Learn the basics of Rust programming language and set up your development environment for Solana.\",\n        difficulty: \"Beginner\",\n        duration: \"30 min\",\n        reward: 100,\n        requiredLessons: null,\n        category: \"rust\",\n        order: 1,\n        isActive: true,\n        steps: [\n          {\n            id: 1,\n            title: \"Your First Variable\",\n            narrative: \"Welcome to Shadow Ranch, partner! Time to learn the basics of Rust. Let's start by declaring a simple variable.\",\n            instructions: [\n              \"Declare a variable named `greeting`\",\n              \"Assign the string \\\"Hello, Solana!\\\"\"\n            ],\n            hints: [\n              \"Use 'let' keyword to declare variables in Rust\",\n              \"String literals are enclosed in double quotes\"\n            ],\n            validationRules: [\n              {\n                type: \"contains\",\n                pattern: \"let greeting\",\n                message: \"Declare a variable named 'greeting'\",\n                required: true\n              },\n              {\n                type: \"contains\", \n                pattern: \"Hello, Solana!\",\n                message: \"Assign the string \\\"Hello, Solana!\\\"\",\n                required: true\n              }\n            ],\n            starterCode: \"// Declare your greeting variable here\\n\",\n            expectedOutput: \"Variable declared successfully\"\n          }\n        ]\n      },\n      {\n        title: \"Creating Your Ranch Account\",\n        description: \"Build your first Solana program to manage ranch data\",\n        difficulty: \"Beginner\", \n        duration: \"45 min\",\n        reward: 150,\n        requiredLessons: [1] as number[],\n        category: \"solana\",\n        order: 2,\n        isActive: true,\n        steps: [\n          {\n            id: 1,\n            title: \"Define Ranch Owner Field\",\n            narrative: \"Every ranch needs an owner. In the `Ranch` struct, add a `pubkey` field named `owner`. This will identify who controls the ranch.\",\n            instructions: [\n              \"In the Ranch struct, add a pubkey field named 'owner'\",\n              \"Use proper Rust syntax with pub visibility\",\n              \"Don't forget the comma for Rust!\"\n            ],\n            hints: [\n              \"Rust syntax: pub owner: Pubkey,\",\n              \"Make sure you've added it inside the Ranch definition\",\n              \"Check for typos and correct capitalization!\"\n            ],\n            validationRules: [\n              {\n                type: \"regex\",\n                pattern: \"pub\\\\s+owner:\\\\s*Pubkey,\",\n                message: \"Add 'pub owner: Pubkey,' to the Ranch struct\",\n                required: true\n              }\n            ],\n            starterCode: \"use anchor_lang::prelude::*;\\n\\n#[account]\\npub struct Ranch {\\n    // TODO: Add owner field\\n}\\n\",\n            expectedOutput: \"Excellent! The `owner` field has been added. Your ranch now knows who its rightful owner is!\"\n          },\n          {\n            id: 2,\n            title: \"Initialize Owner in `initialize_ranch`\",\n            narrative: \"Now, inside the `initialize_ranch` function, assign the `owner` field of your `ranch` account to the `user.key()`.\",\n            instructions: [\n              \"Inside the initialize_ranch function, set ranch.owner\",\n              \"Assign it to ctx.accounts.user.key()\",\n              \"Remember the syntax: ranch.owner = ctx.accounts.user.key();\"\n            ],\n            hints: [\n              \"Syntax: ranch.owner = ctx.accounts.user.key();\",\n              \"Don't forget the semicolon\",\n              \"Double-check the syntax for assigning the owner's key to the ranch account\"\n            ],\n            validationRules: [\n              {\n                type: \"regex\",\n                pattern: \"ranch\\\\.owner\\\\s*=\\\\s*ctx\\\\.accounts\\\\.user\\\\.key\\\\(\\\\);\",\n                message: \"Set ranch.owner = ctx.accounts.user.key();\",\n                required: true\n              }\n            ],\n            starterCode: \"pub fn initialize_ranch(ctx: Context<InitializeRanch>) -> Result<()> {\\n    let ranch = &mut ctx.accounts.ranch;\\n    // TODO: Set the owner\\n    Ok(())\\n}\\n\",\n            expectedOutput: \"Owner successfully initialized! Your ranch deed is now registered to you!\"\n          },\n          {\n            id: 3,\n            title: \"Programmatic Ownership: Securing Your Ranch with a Program Derived Address (PDA)\",\n            narrative: \"Welcome, digital homesteader! In this decentralized frontier, we value true ownership and privacy. Unlike the old world where deeds were on paper in a dusty office, here, your ranch deed can be controlled by pure code! This is the essence of cypher-punk – using cryptography and decentralized tech to protect privacy and freedom. Today, we're diving into Program Derived Addresses (PDAs). Imagine your ranch deed isn't owned by a specific wallet with a private key, but by a special, unhackable 'strongbox' that only your ranch program can open. This strongbox address is derived from your program's ID and some unique 'seeds' (like a secret password) and a 'bump' (a special number to make sure it's valid). This makes your ranch truly decentralized and secure, giving control to the smart contract code itself.\",\n            instructions: [\n              \"In the InitializeRanch struct, locate the #[account(...)] attribute for your ranch account\",\n              \"Add a seeds argument to this attribute with b\\\"ranch\\\" and owner.key().as_ref()\",\n              \"Add a bump argument to this attribute for PDA validation\"\n            ],\n            hints: [\n              \"Think of PDAs like a magic lockbox only your program can open\",\n              \"You need to tell Solana what 'words' (seeds) make this lockbox unique\",\n              \"The bump is a special number that makes sure the lockbox address is perfect and unhackable\",\n              \"Look at the #[account(...)] line for the ranch and add the seeds and bump keywords\"\n            ],\n            validationRules: [\n              {\n                type: \"regex\",\n                pattern: \"seeds\\\\s*=\\\\s*\\\\[b\\\"ranch\\\",\\\\s*owner\\\\.key\\\\(\\\\)\\\\.as_ref\\\\(\\\\)\\\\]\\\\s*,\\\\s*bump\",\n                message: \"Add 'seeds = [b\\\"ranch\\\", owner.key().as_ref()], bump' to the ranch account attribute\",\n                required: true\n              }\n            ],\n            starterCode: \"use anchor_lang::prelude::*;\\n\\ndeclare_id!(\\\"RanchManager111111111111111111111111111111\\\");\\n\\n#[program]\\npub mod ranch_manager {\\n    use super::*;\\n\\n    pub fn initialize_ranch(\\n        ctx: Context<InitializeRanch>,\\n        ranch_name: String,\\n    ) -> Result<()> {\\n        let ranch = &mut ctx.accounts.ranch;\\n        ranch.owner = ctx.accounts.owner.key();\\n        ranch.name = ranch_name;\\n        ranch.level = 1;\\n        ranch.experience = 0;\\n        ranch.ranch_coin_balance = 500;\\n        ranch.building_count = 0;\\n        ranch.character_count = 0;\\n        ranch.created_at = Clock::get()?.unix_timestamp;\\n\\n        msg!(\\\"Ranch '{}' initialized for owner {}\\\", ranch.name, ranch.owner);\\n        Ok(())\\n    }\\n}\\n\\n#[derive(Accounts)]\\n#[instruction(ranch_name: String)]\\npub struct InitializeRanch<'info> {\\n    #[account(\\n        init,\\n        payer = owner,\\n        space = 8 + Ranch::INIT_SPACE,\\n        // TODO: Add seeds and bump here\\n        // seeds = [b\\\"ranch\\\", owner.key().as_ref()],\\n        // bump\\n    )]\\n    pub ranch: Account<'info, Ranch>,\\n\\n    #[account(mut)]\\n    pub owner: Signer<'info>,\\n    pub system_program: Program<'info, System>,\\n}\\n\\n#[account]\\npub struct Ranch {\\n    pub owner: Pubkey,\\n    pub name: String,\\n    pub level: u8,\\n    pub experience: u64,\\n    pub ranch_coin_balance: u64,\\n    pub building_count: u8,\\n    pub character_count: u8,\\n    pub created_at: i64,\\n}\\n\\nimpl Ranch {\\n    const INIT_SPACE: usize = 32 + 4 + 32 + 1 + 8 + 8 + 1 + 1 + 8;\\n}\\n\\n#[error_code]\\npub enum ErrorCode {\\n    #[msg(\\\"Unauthorized access to ranch\\\")]\\n    UnauthorizedAccess,\\n}\",\n            expectedOutput: \"Fantastic! Your ranch account is now a true Program Derived Address (PDA)! Its deed is safely locked away, controlled by your program, not a private key. You've embraced programmatic ownership!\"\n          }\n        ]\n      },\n      {\n        title: \"Introduction to NFTs: Minting Your First Digital Asset\",\n        description: \"Learn how to create and mint Non-Fungible Tokens (NFTs) on Solana.\",\n        difficulty: \"Intermediate\",\n        duration: \"60 min\",\n        reward: 200,\n        requiredLessons: [2] as number[],\n        category: \"nft\",\n        order: 3,\n        isActive: true,\n        steps: [\n          {\n            id: 1,\n            title: \"Coming Soon...\",\n            narrative: \"This lesson is under development. Check back soon for exciting NFT challenges!\",\n            instructions: [\n              \"This lesson is currently being developed\",\n              \"More NFT challenges coming soon\"\n            ],\n            hints: [\n              \"Stay tuned for more advanced Solana development lessons\"\n            ],\n            validationRules: [],\n            starterCode: \"// Coming soon - NFT minting challenges!\",\n            expectedOutput: \"More challenges are on the way!\"\n          }\n        ]\n      }\n    ];\n\n    // Initialize lessons\n    for (const lessonData of defaultLessons) {\n      const lesson = this.createLessonSync(lessonData);\n    }\n\n    // Create sample user\n    const sampleUser: User = {\n      id: 1,\n      username: \"cowboy\",\n      password: \"password123\",\n      walletAddress: \"11111111111111111111111111111112\",\n      pfpUrl: null,\n      createdAt: new Date()\n    };\n    this.users.set(1, sampleUser);\n\n    // Create sample ranch\n    const sampleRanch: Ranch = {\n      id: 1,\n      name: \"Shadow Ranch\",\n      userId: 1,\n      level: 1,\n      experience: 0,\n      coins: 500,\n      createdAt: new Date()\n    };\n    this.ranches.set(1, sampleRanch);\n  }\n\n  private createLessonSync(insertLesson: InsertLesson): Lesson {\n    const id = this.currentId++;\n    const lesson: Lesson = { \n      ...insertLesson, \n      id,\n      isActive: insertLesson.isActive ?? true,\n      reward: insertLesson.reward ?? 100,\n      requiredLessons: insertLesson.requiredLessons ? [...insertLesson.requiredLessons] : null\n    };\n    this.lessons.set(id, lesson);\n    return lesson;\n  }\n\n  // User operations\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { \n      ...insertUser, \n      id, \n      createdAt: new Date(),\n      walletAddress: insertUser.walletAddress ?? null,\n      pfpUrl: insertUser.pfpUrl ?? null\n    };\n    this.users.set(id, user);\n    \n    // Create default ranch for user\n    await this.createRanch({\n      userId: id,\n      name: `${insertUser.username}'s Ranch`,\n      coins: 100,\n      experience: 0,\n      level: 1\n    });\n    \n    return user;\n  }\n\n  async updateUser(id: number, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    \n    const updatedUser = { ...user, ...updates };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  // Ranch operations\n  async getRanch(id: number): Promise<Ranch | undefined> {\n    return this.ranches.get(id);\n  }\n\n  async getRanchByUserId(userId: number): Promise<Ranch | undefined> {\n    return Array.from(this.ranches.values()).find(ranch => ranch.userId === userId);\n  }\n\n  async createRanch(insertRanch: InsertRanch): Promise<Ranch> {\n    const id = this.currentId++;\n    const ranch: Ranch = { \n      ...insertRanch, \n      id, \n      createdAt: new Date(),\n      level: insertRanch.level ?? 1,\n      experience: insertRanch.experience ?? 0,\n      coins: insertRanch.coins ?? 100\n    };\n    this.ranches.set(id, ranch);\n    return ranch;\n  }\n\n  async updateRanch(id: number, updates: Partial<InsertRanch>): Promise<Ranch | undefined> {\n    const ranch = this.ranches.get(id);\n    if (!ranch) return undefined;\n    \n    const updatedRanch = { ...ranch, ...updates };\n    this.ranches.set(id, updatedRanch);\n    return updatedRanch;\n  }\n\n  // Lesson operations\n  async getLesson(id: number): Promise<Lesson | undefined> {\n    return this.lessons.get(id);\n  }\n\n  async getAllLessons(): Promise<Lesson[]> {\n    return Array.from(this.lessons.values()).sort((a, b) => a.order - b.order);\n  }\n\n  async getLessonsByCategory(category: string): Promise<Lesson[]> {\n    return Array.from(this.lessons.values())\n      .filter(lesson => lesson.category === category)\n      .sort((a, b) => a.order - b.order);\n  }\n\n  async createLesson(insertLesson: InsertLesson): Promise<Lesson> {\n    const id = this.currentId++;\n    const lesson: Lesson = { \n      ...insertLesson, \n      id,\n      isActive: insertLesson.isActive ?? true,\n      reward: insertLesson.reward ?? 100,\n      requiredLessons: insertLesson.requiredLessons ? [...insertLesson.requiredLessons] : null\n    };\n    this.lessons.set(id, lesson);\n    return lesson;\n  }\n\n  // User Progress operations\n  async getUserProgress(userId: number, lessonId: number): Promise<UserProgress | undefined> {\n    return this.userProgress.get(`${userId}-${lessonId}`);\n  }\n\n  async getUserProgressByUserId(userId: number): Promise<UserProgress[]> {\n    return Array.from(this.userProgress.values()).filter(progress => progress.userId === userId);\n  }\n\n  async createUserProgress(insertProgress: InsertUserProgress): Promise<UserProgress> {\n    const id = this.currentId++;\n    const progress: UserProgress = { \n      ...insertProgress, \n      id, \n      isCompleted: insertProgress.isCompleted ?? false,\n      currentStep: insertProgress.currentStep ?? 1,\n      attempts: insertProgress.attempts ?? 0,\n      completedAt: insertProgress.isCompleted ? new Date() : null,\n      lastAttemptAt: new Date() \n    };\n    this.userProgress.set(`${insertProgress.userId}-${insertProgress.lessonId}`, progress);\n    return progress;\n  }\n\n  async updateUserProgress(userId: number, lessonId: number, updates: Partial<InsertUserProgress>): Promise<UserProgress | undefined> {\n    const key = `${userId}-${lessonId}`;\n    const progress = this.userProgress.get(key);\n    if (!progress) return undefined;\n    \n    const updatedProgress = { \n      ...progress, \n      ...updates,\n      completedAt: updates.isCompleted ? new Date() : progress.completedAt,\n      lastAttemptAt: new Date()\n    };\n    this.userProgress.set(key, updatedProgress);\n    return updatedProgress;\n  }\n\n  // Character operations\n  async getCharacter(id: number): Promise<Character | undefined> {\n    return this.characters.get(id);\n  }\n\n  async getCharactersByRanchId(ranchId: number): Promise<Character[]> {\n    return Array.from(this.characters.values()).filter(character => character.ranchId === ranchId);\n  }\n\n  async createCharacter(insertCharacter: InsertCharacter): Promise<Character> {\n    const id = this.currentId++;\n    const character: Character = { \n      ...insertCharacter, \n      id, \n      experience: insertCharacter.experience || 0,\n      level: insertCharacter.level || 1,\n      isActive: insertCharacter.isActive !== undefined ? insertCharacter.isActive : true,\n      acquiredAt: new Date() \n    };\n    this.characters.set(id, character);\n    return character;\n  }\n\n  async updateCharacter(id: number, updates: Partial<InsertCharacter>): Promise<Character | undefined> {\n    const character = this.characters.get(id);\n    if (!character) return undefined;\n    \n    const updatedCharacter = { ...character, ...updates };\n    this.characters.set(id, updatedCharacter);\n    return updatedCharacter;\n  }\n\n  // Building operations\n  async getBuilding(id: number): Promise<Building | undefined> {\n    return this.buildings.get(id);\n  }\n\n  async getBuildingsByRanchId(ranchId: number): Promise<Building[]> {\n    return Array.from(this.buildings.values()).filter(building => building.ranchId === ranchId);\n  }\n\n  async createBuilding(insertBuilding: InsertBuilding): Promise<Building> {\n    const id = this.currentId++;\n    const building: Building = { \n      ...insertBuilding, \n      id, \n      level: insertBuilding.level || 1,\n      isActive: insertBuilding.isActive !== undefined ? insertBuilding.isActive : true,\n      builtAt: new Date() \n    };\n    this.buildings.set(id, building);\n    return building;\n  }\n\n  async updateBuilding(id: number, updates: Partial<InsertBuilding>): Promise<Building | undefined> {\n    const building = this.buildings.get(id);\n    if (!building) return undefined;\n    \n    const updatedBuilding = { ...building, ...updates };\n    this.buildings.set(id, updatedBuilding);\n    return updatedBuilding;\n  }\n}\n\nexport const storage = new MemStorage();","size_bytes":20052},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, jsonb, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  walletAddress: text(\"wallet_address\"),\n  pfpUrl: text(\"pfp_url\"), // Profile picture URL\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const ranches = pgTable(\"ranches\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  name: text(\"name\").notNull(),\n  coins: integer(\"coins\").default(100).notNull(),\n  experience: integer(\"experience\").default(0).notNull(),\n  level: integer(\"level\").default(1).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const lessons = pgTable(\"lessons\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  difficulty: text(\"difficulty\").notNull(), // \"Beginner\", \"Intermediate\", \"Advanced\"\n  duration: text(\"duration\").notNull(),\n  reward: integer(\"reward\").default(100).notNull(),\n  requiredLessons: jsonb(\"required_lessons\").$type<number[]>().default([]),\n  steps: jsonb(\"steps\").$type<LessonStep[]>().notNull(),\n  category: text(\"category\").notNull(), // \"rust\", \"anchor\", \"seahorse\"\n  order: integer(\"order\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n});\n\nexport const userProgress = pgTable(\"user_progress\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").notNull(),\n  lessonId: integer(\"lesson_id\").notNull(),\n  isCompleted: boolean(\"is_completed\").default(false).notNull(),\n  currentStep: integer(\"current_step\").default(0).notNull(),\n  attempts: integer(\"attempts\").default(0).notNull(),\n  completedAt: timestamp(\"completed_at\"),\n  lastAttemptAt: timestamp(\"last_attempt_at\").defaultNow().notNull(),\n});\n\nexport const characters = pgTable(\"characters\", {\n  id: serial(\"id\").primaryKey(),\n  ranchId: integer(\"ranch_id\").notNull(),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // \"sheriff\", \"deputy\", \"merchant\", etc.\n  rarity: text(\"rarity\").notNull(), // \"common\", \"uncommon\", \"rare\", \"epic\", \"legendary\"\n  level: integer(\"level\").default(1).notNull(),\n  experience: integer(\"experience\").default(0).notNull(),\n  position: jsonb(\"position\").$type<{ x: number; y: number }>().notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  acquiredAt: timestamp(\"acquired_at\").defaultNow().notNull(),\n});\n\nexport const buildings = pgTable(\"buildings\", {\n  id: serial(\"id\").primaryKey(),\n  ranchId: integer(\"ranch_id\").notNull(),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // \"saloon\", \"stable\", \"library\", \"water_tower\", etc.\n  level: integer(\"level\").default(1).notNull(),\n  position: jsonb(\"position\").$type<{ x: number; y: number }>().notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  builtAt: timestamp(\"built_at\").defaultNow().notNull(),\n});\n\nexport const rewardNfts = pgTable(\"reward_nfts\", {\n  id: serial(\"id\").primaryKey(),\n  userId: text(\"user_id\").notNull(), // Firebase user ID\n  lessonId: integer(\"lesson_id\").notNull(),\n  nftImageUrl: text(\"nft_image_url\").notNull(),\n  mintAddress: text(\"mint_address\"), // Optional: if it's a real minted NFT\n  rewardName: text(\"reward_name\").notNull(),\n  awardedAt: timestamp(\"awarded_at\").defaultNow().notNull(),\n});\n\n// Types for lesson steps\nexport interface LessonStep {\n  id: number;\n  title: string;\n  narrative: string;\n  instructions: string[];\n  hints: string[];\n  validationRules: ValidationRule[];\n  starterCode?: string;\n  expectedOutput?: string;\n}\n\nexport interface ValidationRule {\n  type: \"contains\" | \"regex\" | \"function_exists\" | \"variable_exists\";\n  pattern: string;\n  message: string;\n  required: boolean;\n}\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertRanchSchema = createInsertSchema(ranches).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLessonSchema = createInsertSchema(lessons).omit({\n  id: true,\n});\n\nexport const insertUserProgressSchema = createInsertSchema(userProgress).omit({\n  id: true,\n  lastAttemptAt: true,\n  completedAt: true,\n});\n\nexport const insertCharacterSchema = createInsertSchema(characters).omit({\n  id: true,\n  acquiredAt: true,\n});\n\nexport const insertBuildingSchema = createInsertSchema(buildings).omit({\n  id: true,\n  builtAt: true,\n});\n\nexport const insertRewardNftSchema = createInsertSchema(rewardNfts).omit({\n  id: true,\n  awardedAt: true,\n});\n\n// Select types\nexport type User = typeof users.$inferSelect;\nexport type Ranch = typeof ranches.$inferSelect;\nexport type Lesson = typeof lessons.$inferSelect;\nexport type UserProgress = typeof userProgress.$inferSelect;\nexport type Character = typeof characters.$inferSelect;\nexport type Building = typeof buildings.$inferSelect;\nexport type RewardNft = typeof rewardNfts.$inferSelect;\n\n// Insert types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertRanch = z.infer<typeof insertRanchSchema>;\nexport type InsertLesson = z.infer<typeof insertLessonSchema>;\nexport type InsertUserProgress = z.infer<typeof insertUserProgressSchema>;\nexport type InsertCharacter = z.infer<typeof insertCharacterSchema>;\nexport type InsertBuilding = z.infer<typeof insertBuildingSchema>;\nexport type InsertRewardNft = z.infer<typeof insertRewardNftSchema>;\n","size_bytes":5560},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { WalletProvider } from \"@/components/wallet/WalletProvider\";\nimport { MainLayout } from \"@/components/layout/MainLayout\";\nimport { ThemeProvider } from \"next-themes\";\nimport NotFound from \"@/pages/not-found\";\nimport HomeMobile from \"@/pages/HomeMobile\";\nimport Lessons from \"@/pages/Lessons\";\nimport LessonDetail from \"@/pages/LessonDetail\";\nimport Ranch from \"@/pages/Ranch\";\nimport Playground from \"@/pages/Playground\";\nimport CypherpunksEthos from \"@/pages/CypherpunksEthos\";\nimport CypherpunkModule1 from \"@/pages/CypherpunkModule1\";\nimport CypherpunkModule2 from \"@/pages/CypherpunkModule2\";\nimport CypherpunkModule3 from \"@/pages/CypherpunkModule3\";\nimport CypherpunkModule4 from \"@/pages/CypherpunkModule4\";\nimport MindmapPage from \"@/pages/MindmapPage\";\nimport ProfilePage from \"@/pages/ProfilePage\";\nimport { WalletTest } from \"@/pages/WalletTest\";\nimport LessonTest from \"@/pages/LessonTest\";\nimport CodingChallengePage from \"@/pages/CodingChallengePage\";\n\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomeMobile} />\n      <Route path=\"/lessons\" component={Lessons} />\n      <Route path=\"/lessons/:id\" component={LessonDetail} />\n      <Route path=\"/ranch\" component={Ranch} />\n      <Route path=\"/playground\" component={Playground} />\n      <Route path=\"/cypherpunks-ethos\" component={CypherpunksEthos} />\n      <Route path=\"/mindmap\" component={MindmapPage} />\n      <Route path=\"/cypherpunk-module-1\" component={CypherpunkModule1} />\n      <Route path=\"/cypherpunk-module-2\" component={CypherpunkModule2} />\n      <Route path=\"/cypherpunk-module-3\" component={CypherpunkModule3} />\n      <Route path=\"/cypherpunk-module-4\" component={CypherpunkModule4} />\n      <Route path=\"/profile/:publicKey?\" component={ProfilePage} />\n      <Route path=\"/solana-challenges/:challengeId?\" component={CodingChallengePage} />\n      <Route path=\"/wallet-test\" component={WalletTest} />\n      <Route path=\"/lesson-test\" component={LessonTest} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider attribute=\"class\" defaultTheme=\"dark\" enableSystem>\n        <TooltipProvider>\n          <WalletProvider>\n            <MainLayout>\n              <Toaster />\n              <Router />\n            </MainLayout>\n          </WalletProvider>\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2739},"client/src/firebase-init.ts":{"content":"// client/src/firebase-init.ts\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\n\n// Firebase configuration using environment secrets\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || process.env.FIREBASE_API_KEY,\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN || process.env.FIREBASE_AUTH_DOMAIN,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || process.env.FIREBASE_PROJECT_ID,\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET || process.env.FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID || process.env.FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID || process.env.FIREBASE_APP_ID\n};\n\nexport const app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const appId = firebaseConfig.appId || 'shadow-ranch-default';\n\n// Auth state management\nexport let currentUser: any = null;\n\nonAuthStateChanged(auth, (user) => {\n  currentUser = user;\n});\n\n// Initialize anonymous authentication\nexport const initializeAuth = async () => {\n  try {\n    if (!auth.currentUser) {\n      await signInAnonymously(auth);\n    }\n    return auth.currentUser;\n  } catch (error) {\n    console.warn('Firebase auth failed, using local storage fallback:', error);\n    return null;\n  }\n};","size_bytes":1504},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Data70EF Font */\n@font-face {\n  font-family: 'Data70EF';\n  src: url('/fonts/Data70EF-Regular.otf') format('opentype');\n  font-weight: normal;\n  font-style: normal;\n  font-display: swap;\n}\n\n/* SpaceGothic Font */\n@font-face {\n  font-family: 'SpaceGothic';\n  src: url('@assets/JlsspacegothicRnc-n2zY_1755284411518.otf') format('opentype');\n  font-weight: normal;\n  font-style: normal;\n  font-display: swap;\n}\n\n:root {\n  --background: 0 0% 100%;\n  --foreground: 20 14.3% 4.1%;\n  --muted: 60 4.8% 95.9%;\n  --muted-foreground: 25 5.3% 44.7%;\n  --popover: 0 0% 100%;\n  --popover-foreground: 20 14.3% 4.1%;\n  --card: 0 0% 100%;\n  --card-foreground: 20 14.3% 4.1%;\n  --border: 20 5.9% 90%;\n  --input: 20 5.9% 90%;\n  --primary: 207 90% 54%;\n  --primary-foreground: 211 100% 99%;\n  --secondary: 60 4.8% 95.9%;\n  --secondary-foreground: 24 9.8% 10%;\n  --accent: 60 4.8% 95.9%;\n  --accent-foreground: 24 9.8% 10%;\n  --destructive: 0 84.2% 60.2%;\n  --destructive-foreground: 60 9.1% 97.8%;\n  --ring: 20 14.3% 4.1%;\n  --radius: 0.5rem;\n  --header-height: 80px; /* Mobile-first: smaller header */\n  --sidebar-width: 280px;\n  --touch-target: 44px; /* Minimum touch target size */\n  \n  /* Blueshift-inspired Ultra Dark Theme */\n  --blueshift-black: 0 0% 0%; /* Pure black #000000 */\n  --blueshift-dark-950: 240 5% 2%; /* Near black #050507 */\n  --blueshift-dark-900: 240 6% 4%; /* Ultra dark #0a0a0f */\n  --blueshift-dark-800: 240 7% 6%; /* Very dark #0f0f18 */\n  --blueshift-dark-700: 240 8% 10%; /* Dark gray #181820 */\n  --blueshift-dark-600: 240 9% 15%; /* Medium dark #222230 */\n  --blueshift-dark-500: 240 10% 20%; /* Lighter dark #2d2d40 */\n  \n  /* Vibrant Neon Cyan System (Blueshift signature) */\n  --blueshift-neon: 180 100% 50%; /* Pure cyan #00FFFF */\n  --blueshift-electric: 180 100% 47%; /* Electric cyan #00EAFF */\n  --blueshift-cyan-50: 180 100% 97%; /* Very light cyan */\n  --blueshift-cyan-100: 180 100% 90%; /* Light cyan */\n  --blueshift-cyan-200: 180 100% 80%; /* Medium light cyan */\n  --blueshift-cyan-300: 180 100% 70%; /* Medium cyan */\n  --blueshift-cyan-400: 180 100% 60%; /* Bright cyan */\n  --blueshift-cyan-500: 180 100% 50%; /* Pure cyan */\n  --blueshift-cyan-600: 180 100% 40%; /* Dark cyan */\n  --blueshift-cyan-700: 180 100% 30%; /* Darker cyan */\n  --blueshift-cyan-800: 180 100% 20%; /* Very dark cyan */\n  --blueshift-cyan-900: 180 100% 10%; /* Ultra dark cyan */\n  \n  /* Secondary Purple Accents */\n  --blueshift-purple-400: 268 100% 74%; /* #a78bfa */\n  --blueshift-purple-500: 268 56% 59%; /* #8b5cf6 */\n  --blueshift-purple-600: 267 57% 51%; /* #7c3aed */\n  --blueshift-purple-700: 267 66% 44%; /* #6d28d9 */\n  --blueshift-purple-800: 267 83% 35%; /* #5b21b6 */\n  --blueshift-purple-900: 267 83% 29%; /* #4c1d95 */\n\n  /* Legacy compatibility */\n  --tech-cyan-50: var(--blueshift-cyan-50);\n  --tech-cyan-100: var(--blueshift-cyan-100);\n  --tech-cyan-200: var(--blueshift-cyan-200);\n  --tech-cyan-300: var(--blueshift-cyan-300);\n  --tech-cyan-400: var(--blueshift-cyan-400);\n  --tech-cyan-500: var(--blueshift-cyan-500);\n  --tech-cyan-600: var(--blueshift-cyan-600);\n  --tech-cyan-700: var(--blueshift-cyan-700);\n  --tech-cyan-800: var(--blueshift-cyan-800);\n  --tech-cyan-900: var(--blueshift-cyan-900);\n  \n  --tech-purple-400: var(--blueshift-purple-400);\n  --tech-purple-500: var(--blueshift-purple-500);\n  --tech-purple-600: var(--blueshift-purple-600);\n  --tech-purple-700: var(--blueshift-purple-700);\n  --tech-purple-800: var(--blueshift-purple-800);\n  --tech-purple-900: var(--blueshift-purple-900);\n}\n\n.dark {\n  /* Blueshift Ultra Dark Theme */\n  --background: var(--blueshift-black);\n  --foreground: 0 0% 98%;\n  --muted: var(--blueshift-dark-700);\n  --muted-foreground: 240 5% 64.9%;\n  --popover: var(--blueshift-dark-900);\n  --popover-foreground: 0 0% 98%;\n  --card: var(--blueshift-dark-900);\n  --card-foreground: 0 0% 98%;\n  --border: var(--blueshift-dark-600);\n  --input: var(--blueshift-dark-700);\n  --primary: var(--blueshift-neon);\n  --primary-foreground: var(--blueshift-black);\n  --secondary: var(--blueshift-dark-700);\n  --secondary-foreground: 0 0% 98%;\n  --accent: var(--blueshift-neon);\n  --accent-foreground: var(--blueshift-black);\n  --destructive: 0 62.8% 30.6%;\n  --destructive-foreground: 0 0% 98%;\n  --ring: var(--blueshift-neon);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;\n  }\n}\n\n/* Blueshift-inspired Custom Styles */\n.data-particle {\n  position: fixed;\n  width: 2px;\n  height: 2px;\n  background: rgba(0, 255, 255, 0.8);\n  border-radius: 2px;\n  pointer-events: none;\n  animation: data-flow 15s infinite linear;\n  box-shadow: 0 0 6px rgba(0, 255, 255, 0.6);\n}\n\n.data-particle:nth-child(odd) {\n  animation-delay: -5s;\n  animation-duration: 20s;\n  background: rgba(0, 255, 255, 0.6);\n  box-shadow: 0 0 4px rgba(0, 255, 255, 0.4);\n}\n\n.data-particle:nth-child(3n) {\n  animation-delay: -10s;\n  animation-duration: 25s;\n  background: rgba(147, 51, 234, 0.6);\n  box-shadow: 0 0 4px rgba(147, 51, 234, 0.4);\n}\n\n.btn-tech-primary {\n  @apply bg-cyan-500 hover:bg-cyan-400 text-black font-bold px-6 py-3 rounded-lg shadow-lg transform transition-all duration-200 hover:scale-105 hover:shadow-xl border-2 border-cyan-400 font-mono;\n}\n\n.btn-tech-secondary {\n  @apply bg-gray-800 hover:bg-gray-700 text-cyan-400 font-bold px-6 py-3 rounded-lg shadow-lg transform transition-all duration-200 hover:scale-105 hover:shadow-xl border-2 border-gray-600 font-mono;\n}\n\n.btn-tech-accent {\n  @apply bg-purple-600 hover:bg-purple-500 text-white font-bold px-6 py-3 rounded-lg shadow-lg transform transition-all duration-200 hover:scale-105 hover:shadow-xl border-2 border-purple-400 font-mono;\n}\n\n.tech-card {\n  @apply bg-gray-900/50 border-2 border-cyan-400/30 rounded-lg shadow-xl backdrop-blur-sm;\n}\n\n.code-editor {\n  background: linear-gradient(145deg, #1e1e1e, #2d2d2d);\n  border: 2px solid #444;\n  font-family: 'Fira Code', monospace;\n}\n\n.progress-trail {\n  background: linear-gradient(90deg, transparent 0%, rgba(212, 165, 116, 0.3) 50%, transparent 100%);\n}\n\n@keyframes dataStreamFlow {\n  0% {\n    transform: translateY(0) translateX(0) scale(0.5);\n    opacity: 0;\n  }\n  20% {\n    opacity: 1;\n    transform: translateY(10vh) translateX(5px) scale(1);\n  }\n  80% {\n    opacity: 1;\n    transform: translateY(80vh) translateX(-5px) scale(1);\n  }\n  100% {\n    transform: translateY(100vh) translateX(0) scale(0.5);\n    opacity: 0;\n  }\n}\n\n.sparkle-effect {\n  position: absolute;\n  width: 4px;\n  height: 4px;\n  background: radial-gradient(circle, #ffd700, transparent);\n  border-radius: 50%;\n  animation: sparkle 1.5s ease-in-out infinite;\n}\n\n@keyframes sparkle {\n  0%, 100% { opacity: 0; transform: scale(0); }\n  50% { opacity: 1; transform: scale(1); }\n}\n\n@keyframes data-flow {\n  0% { transform: translateX(-100px) translateY(0) rotate(0deg); opacity: 0; }\n  10% { opacity: 0.8; }\n  90% { opacity: 0.8; }\n  100% { transform: translateX(100vw) translateY(-20px) rotate(90deg); opacity: 0; }\n}\n\n@keyframes tech-pulse {\n  0%, 100% { transform: scale(1); filter: brightness(1) hue-rotate(0deg); }\n  50% { transform: scale(1.02); filter: brightness(1.1) hue-rotate(10deg); }\n}\n\n/* Blueshift-specific animations */\n@keyframes blueshift-glow {\n  0%, 100% { \n    box-shadow: 0 0 5px rgba(0, 255, 255, 0.2), 0 0 10px rgba(0, 255, 255, 0.1), inset 0 0 10px rgba(0, 255, 255, 0.05);\n  }\n  50% { \n    box-shadow: 0 0 10px rgba(0, 255, 255, 0.4), 0 0 20px rgba(0, 255, 255, 0.2), inset 0 0 15px rgba(0, 255, 255, 0.1);\n  }\n}\n\n@keyframes blueshift-scan {\n  0% { background-position: -100% 0; }\n  100% { background-position: 100% 0; }\n}\n\n/* Enhanced Timeline Animations */\n@keyframes timeline-fade-in {\n  from { \n    opacity: 0; \n    transform: translateY(20px); \n  }\n  to { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n@keyframes timeline-reveal {\n  from {\n    opacity: 0;\n    transform: scale(0.95) translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: scale(1) translateY(0);\n  }\n}\n\n.timeline-fade-in {\n  animation: timeline-fade-in 0.8s ease-out;\n}\n\n.timeline-reveal {\n  animation: timeline-reveal 0.6s ease-out;\n}\n\n/* Mobile responsiveness for timeline */\n@media (max-width: 640px) {\n  .timeline-mobile-spacing > * + * {\n    margin-top: 2rem !important;\n  }\n  \n  .timeline-mobile-cards {\n    padding-left: 3rem;\n  }\n}\n\n/* Touch-friendly controls */\n@media (max-width: 768px) {\n  .timeline-controls button {\n    min-height: 44px;\n    min-width: 44px;\n  }\n}\n\n/* Ethos Page Enhanced Styles */\n@keyframes ethos-section-reveal {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.ethos-section-reveal {\n  animation: ethos-section-reveal 0.6s ease-out;\n}\n\n/* Custom scrollbar for navigation */\n.ethos-nav-scroll::-webkit-scrollbar {\n  height: 2px;\n}\n\n.ethos-nav-scroll::-webkit-scrollbar-track {\n  background: rgba(55, 65, 81, 0.1);\n}\n\n.ethos-nav-scroll::-webkit-scrollbar-thumb {\n  background: rgba(34, 211, 238, 0.3);\n  border-radius: 1px;\n}\n\n/* Video overlay hover effects */\n.ethos-video-overlay:hover .ethos-play-button {\n  transform: scale(1.1);\n}\n\n/* Enhanced mobile responsiveness for ethos page */\n@media (max-width: 640px) {\n  .ethos-container {\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n  \n  .ethos-nav-mobile {\n    flex-wrap: nowrap;\n    overflow-x: auto;\n    scrollbar-width: thin;\n  }\n}\n\n/* Accordion animations for mobile */\n@keyframes accordion-slide-down {\n  from {\n    max-height: 0;\n    opacity: 0;\n  }\n  to {\n    max-height: 1000px;\n    opacity: 1;\n  }\n}\n\n@keyframes accordion-slide-up {\n  from {\n    max-height: 1000px;\n    opacity: 1;\n  }\n  to {\n    max-height: 0;\n    opacity: 0;\n  }\n}\n\n.accordion-enter {\n  animation: accordion-slide-down 0.3s ease-in-out;\n}\n\n.accordion-exit {\n  animation: accordion-slide-up 0.3s ease-in-out;\n}\n\n/* Mobile tab navigation enhancements */\n@media (max-width: 768px) {\n  .ethos-nav-scroll {\n    scrollbar-width: none;\n    -ms-overflow-style: none;\n  }\n  \n  .ethos-nav-scroll::-webkit-scrollbar {\n    display: none;\n  }\n  \n  /* Touch-friendly tab buttons */\n  .ethos-nav-scroll button {\n    touch-action: manipulation;\n    -webkit-tap-highlight-color: transparent;\n  }\n  \n  /* Ensure sufficient touch targets */\n  .ethos-mobile-tab {\n    min-height: 44px;\n    min-width: 44px;\n  }\n}\n\n/* Enhanced accordion styling */\n.accordion-header {\n  transition: all 0.2s ease-in-out;\n}\n\n.accordion-header:active {\n  transform: scale(0.98);\n}\n\n.accordion-content {\n  transition: max-height 0.3s ease-in-out, opacity 0.3s ease-in-out;\n}\n\n@keyframes glow-tech {\n  0% { box-shadow: 0 0 10px rgba(0, 255, 255, 0.4), 0 0 20px rgba(0, 255, 255, 0.2); }\n  50% { box-shadow: 0 0 20px rgba(0, 255, 255, 0.6), 0 0 40px rgba(0, 255, 255, 0.3); }\n  100% { box-shadow: 0 0 15px rgba(147, 51, 234, 0.5), 0 0 30px rgba(147, 51, 234, 0.3); }\n}\n\n@keyframes fade-in {\n  0% { opacity: 0; transform: translateY(10px); }\n  100% { opacity: 1; transform: translateY(0); }\n}\n\n@keyframes slide-up {\n  0% { opacity: 0; transform: translateY(30px); }\n  100% { opacity: 1; transform: translateY(0); }\n}\n\n.animate-dust-swirl { animation: dust-swirl 20s infinite linear; }\n.animate-sheriff-star { animation: sheriff-star 3s ease-in-out infinite; }\n.animate-glow-pulse { animation: glow-pulse 2s ease-in-out infinite alternate; }\n.animate-fade-in { animation: fade-in 0.5s ease-out; }\n.animate-slide-up { animation: slide-up 0.5s ease-out; }\n\n/* Mobile-First Utilities */\n.touch-target {\n  min-height: var(--touch-target);\n  min-width: var(--touch-target);\n}\n\n.mobile-nav-toggle {\n  @apply flex items-center justify-center w-11 h-11 rounded-lg bg-tech-purple-800/50 border border-tech-cyan-400/30 touch-target;\n}\n\n.mobile-sidebar {\n  @apply fixed inset-y-0 left-0 z-50 w-72 bg-gradient-to-b from-tech-purple-900 to-tech-purple-800 border-r border-tech-cyan-400/30 transform transition-transform duration-300 ease-in-out;\n}\n\n.mobile-sidebar-open {\n  @apply translate-x-0;\n}\n\n.mobile-sidebar-closed {\n  @apply -translate-x-full;\n}\n\n.mobile-overlay {\n  @apply fixed inset-0 bg-black/50 z-40 transition-opacity duration-300;\n}\n\n/* Typography - Mobile First */\n.text-mobile-sm { font-size: 0.875rem; line-height: 1.25rem; } /* 14px */\n.text-mobile-base { font-size: 1rem; line-height: 1.5rem; } /* 16px */\n.text-mobile-lg { font-size: 1.125rem; line-height: 1.75rem; } /* 18px */\n.text-mobile-xl { font-size: 1.25rem; line-height: 1.75rem; } /* 20px */\n.text-mobile-2xl { font-size: 1.5rem; line-height: 2rem; } /* 24px */\n.text-mobile-3xl { font-size: 1.875rem; line-height: 2.25rem; } /* 30px */\n\n/* Responsive spacing utilities - Mobile First */\n.space-mobile-2 { margin: 0.5rem; }\n.space-mobile-4 { margin: 1rem; }\n.space-mobile-6 { margin: 1.5rem; }\n.space-mobile-8 { margin: 2rem; }\n\n.p-mobile-3 { padding: 0.75rem; }\n.p-mobile-4 { padding: 1rem; }\n.p-mobile-6 { padding: 1.5rem; }\n\n/* Button mobile-first sizes */\n.btn-mobile {\n  @apply px-4 py-3 text-mobile-base font-medium rounded-lg touch-target flex items-center justify-center;\n}\n\n.btn-mobile-sm {\n  @apply px-3 py-2 text-mobile-sm font-medium rounded-md;\n  min-height: 40px;\n  min-width: 40px;\n}\n\n/* Card mobile-first */\n.card-mobile {\n  @apply rounded-xl p-mobile-4 shadow-lg;\n}\n\n.card-mobile-compact {\n  @apply rounded-lg p-mobile-3 shadow-md;\n}\n\n/* Matrix-style text shadow for challenge rewards */\n.text-shadow-matrix {\n  text-shadow: \n    0 0 5px hsl(var(--tech-cyan)),\n    0 0 10px hsl(var(--tech-purple)),\n    0 0 15px hsl(var(--tech-cyan)),\n    0 0 20px hsl(var(--tech-purple));\n}\n\n.text-shadow-matrix-glow {\n  text-shadow: \n    0 0 10px hsl(var(--tech-cyan)),\n    0 0 20px hsl(var(--tech-cyan)),\n    0 0 30px hsl(var(--tech-cyan)),\n    0 0 40px hsl(var(--tech-cyan));\n  animation: matrix-pulse 2s ease-in-out infinite alternate;\n}\n\n@keyframes matrix-pulse {\n  from {\n    text-shadow: \n      0 0 10px hsl(var(--tech-cyan)),\n      0 0 20px hsl(var(--tech-cyan)),\n      0 0 30px hsl(var(--tech-cyan)),\n      0 0 40px hsl(var(--tech-cyan));\n  }\n  to {\n    text-shadow: \n      0 0 5px hsl(var(--tech-cyan)),\n      0 0 10px hsl(var(--tech-cyan)),\n      0 0 15px hsl(var(--tech-cyan)),\n      0 0 20px hsl(var(--tech-cyan));\n  }\n}\n\n/* Fade in animation for cypherpunk module */\n@keyframes fade-in {\n  0% { opacity: 0; transform: translateY(20px); }\n  100% { opacity: 1; transform: translateY(0); }\n}\n\n.animate-fade-in {\n  animation: fade-in 1s ease-out forwards;\n}\n","size_bytes":14604},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/contexts/AuthContext.tsx":{"content":"import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { User } from 'firebase/auth';\nimport { initializeAuth, signInUser } from '../lib/firebase';\nimport { firestoreStorage } from '../lib/firestore-storage';\n\ninterface AuthContextType {\n  user: User | null;\n  userId: string | null;\n  isAuthReady: boolean;\n  firestoreStorage: typeof firestoreStorage;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [userId, setUserId] = useState<string | null>(null);\n  const [isAuthReady, setIsAuthReady] = useState(false);\n\n  useEffect(() => {\n    const unsubscribe = initializeAuth(async (firebaseUser) => {\n      if (firebaseUser) {\n        setUser(firebaseUser);\n        setUserId(firebaseUser.uid);\n        \n        // Create user document if it doesn't exist\n        const existingUser = await firestoreStorage.getUser(firebaseUser.uid);\n        if (!existingUser) {\n          await firestoreStorage.createUser(firebaseUser.uid, {\n            username: `User_${firebaseUser.uid.slice(0, 8)}`,\n            password: '', // Not used for anonymous auth\n            walletAddress: null,\n            pfpUrl: null\n          });\n          \n          // Create default ranch\n          await firestoreStorage.createRanch(firebaseUser.uid, {\n            name: \"Shadow Ranch\",\n            coins: 100,\n            experience: 0,\n            level: 1\n          });\n        }\n      } else {\n        // Sign in anonymously if no user\n        const newUser = await signInUser();\n        if (newUser) {\n          setUser(newUser);\n          setUserId(newUser.uid);\n        }\n      }\n      setIsAuthReady(true);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const value = {\n    user,\n    userId,\n    isAuthReady,\n    firestoreStorage\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {isAuthReady ? children : (\n        <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-tech-purple-900 via-slate-900 to-tech-cyan-900\">\n          <div className=\"text-center\">\n            <div className=\"text-tech-cyan-400 text-4xl mb-4 animate-pulse\">🤖</div>\n            <div className=\"font-tech text-xl text-gray-300\">Initializing Neural Network...</div>\n            <div className=\"font-code text-sm text-gray-500 mt-2\">Connecting to Firebase Database</div>\n          </div>\n        </div>\n      )}\n    </AuthContext.Provider>\n  );\n}","size_bytes":2798},"client/src/data/code-templates.ts":{"content":"// Enhanced V6 Interactive Ethos Implementation - Code Templates\nexport interface CodeTemplate {\n  rust: string;\n  python: string;\n}\n\nexport const codeTemplates: Record<string, CodeTemplate> = {\n  default: {\n    rust: `use anchor_lang::prelude::*;\n\ndeclare_id!(\"YourProgramID\");\n\n#[program]\npub mod shadow_ranch {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {\n        // --- Your code goes here! ---\n        // Type: get_network_status()\n        \n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize<'info> {\n    #[account(mut)]\n    pub payer: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}`,\n    python: `import asyncio\nfrom solana.rpc.async_api import AsyncClient\n\n# Shadow Ranch Learning Environment\nasync def main():\n    # Your code goes here\n    \n    pass\n\nif __name__ == \"__main__\":\n    asyncio.run(main())`\n  },\n\n  // NEW: Ethos Lesson Templates (Non-coding narrative lessons)\n  ethos_lesson0_1: {\n    rust: `// Module 0: The Digital Frontier's Code of Honor\n// Step 1: Echoes from the Old World\n\n/* \n   Welcome to Shadow Ranch!\n   \n   This is a narrative lesson about digital freedom foundations.\n   No coding required - just reflection and understanding.\n   \n   Read the content, watch videos, and answer the quiz\n   to demonstrate your grasp of cypherpunk principles.\n*/\n\n// Click 'Deploy' when ready to proceed`,\n    python: `# Module 0: The Digital Frontier's Code of Honor\n# Step 1: Echoes from the Old World\n\n\"\"\"\nWelcome to Shadow Ranch!\n\nThis is a narrative lesson about digital freedom foundations.\nNo coding required - just reflection and understanding.\n\nRead the content, watch videos, and answer the quiz\nto demonstrate your grasp of cypherpunk principles.\n\"\"\"\n\n# Click 'Deploy' when ready to proceed`\n  },\n\n  ethos_lesson0_2: {\n    rust: `// Module 0: The Digital Frontier's Code of Honor\n// Step 2: The Whispers of Rebellion - Rise of the Cypherpunks\n\n/*\n   The Cypherpunks emerged in the early 1990s as digital freedom fighters.\n   \n   Key figures:\n   - Eric Hughes (Cypherpunk Manifesto)\n   - Timothy C. May (Crypto Anarchist Manifesto)\n   - John Gilmore (\"The Net interprets censorship as damage\")\n   \n   Core belief: Privacy through cryptography, not legislation.\n*/\n\n// Click 'Deploy' when ready to proceed`,\n    python: `# Module 0: The Digital Frontier's Code of Honor\n# Step 2: The Whispers of Rebellion - Rise of the Cypherpunks\n\n\"\"\"\nThe Cypherpunks emerged in the early 1990s as digital freedom fighters.\n\nKey figures:\n- Eric Hughes (Cypherpunk Manifesto)\n- Timothy C. May (Crypto Anarchist Manifesto)  \n- John Gilmore (\"The Net interprets censorship as damage\")\n\nCore belief: Privacy through cryptography, not legislation.\n\"\"\"\n\n# Click 'Deploy' when ready to proceed`\n  },\n\n  ethos_lesson1_1: {\n    rust: `// Module 1: The Manifestos - Code is Law, Privacy is Power\n// Step 1: The Cypherpunk Manifesto: Code, Not Trust\n\n/*\n   \"Privacy is necessary for an open society in the electronic age.\n   We cannot expect governments, corporations, or other large,\n   faceless organizations to grant us privacy out of beneficence.\"\n   \n   - Eric Hughes, A Cypherpunk's Manifesto (1993)\n   \n   Key principles:\n   - Code provides stronger guarantees than laws\n   - Cryptography enables individual sovereignty\n   - Privacy must be built into systems, not added later\n*/\n\n// Click 'Deploy' when ready to proceed`,\n    python: `# Module 1: The Manifestos - Code is Law, Privacy is Power\n# Step 1: The Cypherpunk Manifesto: Code, Not Trust\n\n\"\"\"\n\"Privacy is necessary for an open society in the electronic age.\nWe cannot expect governments, corporations, or other large,\nfaceless organizations to grant us privacy out of beneficence.\"\n\n- Eric Hughes, A Cypherpunk's Manifesto (1993)\n\nKey principles:\n- Code provides stronger guarantees than laws\n- Cryptography enables individual sovereignty  \n- Privacy must be built into systems, not added later\n\"\"\"\n\n# Click 'Deploy' when ready to proceed`\n  },\n\n  ethos_lesson1_2: {\n    rust: `// Module 1: The Manifestos - Code is Law, Privacy is Power\n// Step 2: The Crypto Anarchist Manifesto: Unstoppable Liberty\n\n/*\n   \"Computer technology is on the verge of providing the ability\n   for individuals and groups to communicate and interact with each\n   other in a totally anonymous manner.\"\n   \n   - Timothy C. May, The Crypto Anarchist Manifesto (1988)\n   \n   Vision includes:\n   - Anonymous digital cash systems\n   - Reputation-based markets\n   - Untraceable communication networks\n   - Dissolution of traditional power structures\n*/\n\n// Click 'Deploy' when ready to proceed`,\n    python: `# Module 1: The Manifestos - Code is Law, Privacy is Power\n# Step 2: The Crypto Anarchist Manifesto: Unstoppable Liberty\n\n\"\"\"\n\"Computer technology is on the verge of providing the ability\nfor individuals and groups to communicate and interact with each\nother in a totally anonymous manner.\"\n\n- Timothy C. May, The Crypto Anarchist Manifesto (1988)\n\nVision includes:\n- Anonymous digital cash systems\n- Reputation-based markets\n- Untraceable communication networks\n- Dissolution of traditional power structures\n\"\"\"\n\n# Click 'Deploy' when ready to proceed`\n  },\n\n  ethos_lesson2_1: {\n    rust: `// Module 2: The Genesis Block - Bitcoin's Cypherpunk Legacy\n// Step 1: The Fiat Chains - Why Bitcoin Was Born\n\n/*\n   Problems with Traditional Fiat Currency:\n   \n   1. Centralized Control\n      - Central banks control money supply\n      - Governments can freeze accounts\n      - Single points of failure\n   \n   2. Inflation & Debasement\n      - Money printing reduces purchasing power\n      - Hidden tax on savers\n      - Wealth transfer to asset holders\n   \n   3. Surveillance & Censorship\n      - Every transaction monitored\n      - Financial privacy eliminated\n      - Transactions can be blocked\n*/\n\n// Click 'Deploy' when ready to proceed`,\n    python: `# Module 2: The Genesis Block - Bitcoin's Cypherpunk Legacy\n# Step 1: The Fiat Chains - Why Bitcoin Was Born\n\n\"\"\"\nProblems with Traditional Fiat Currency:\n\n1. Centralized Control\n   - Central banks control money supply\n   - Governments can freeze accounts\n   - Single points of failure\n\n2. Inflation & Debasement\n   - Money printing reduces purchasing power\n   - Hidden tax on savers\n   - Wealth transfer to asset holders\n\n3. Surveillance & Censorship\n   - Every transaction monitored\n   - Financial privacy eliminated\n   - Transactions can be blocked\n\"\"\"\n\n# Click 'Deploy' when ready to proceed`\n  },\n\n  ethos_lesson2_2: {\n    rust: `// Module 2: The Genesis Block - Bitcoin's Cypherpunk Legacy\n// Step 2: Bitcoin: A Peer-to-Peer Electronic Cash System\n\n/*\n   Bitcoin's Revolutionary Properties:\n   \n   1. Peer-to-Peer\n      - Direct transactions without intermediaries\n      - No central authority required\n      - Global 24/7 availability\n   \n   2. Cryptographic Security\n      - Private key ownership = control\n      - Unforgeable digital signatures\n      - Proof of work consensus\n   \n   3. Fixed Supply\n      - 21 million bitcoin maximum\n      - Predictable issuance schedule\n      - Protection against inflation\n*/\n\n// Click 'Deploy' when ready to proceed`,\n    python: `# Module 2: The Genesis Block - Bitcoin's Cypherpunk Legacy\n# Step 2: Bitcoin: A Peer-to-Peer Electronic Cash System\n\n\"\"\"\nBitcoin's Revolutionary Properties:\n\n1. Peer-to-Peer\n   - Direct transactions without intermediaries\n   - No central authority required\n   - Global 24/7 availability\n\n2. Cryptographic Security\n   - Private key ownership = control\n   - Unforgeable digital signatures\n   - Proof of work consensus\n\n3. Fixed Supply\n   - 21 million bitcoin maximum\n   - Predictable issuance schedule\n   - Protection against inflation\n\"\"\"\n\n# Click 'Deploy' when ready to proceed`\n  },\n\n  ethos_lesson2_3: {\n    rust: `// Module 2: The Genesis Block - Bitcoin's Cypherpunk Legacy\n// Step 3: The Blockchain: A Public, Immutable Ledger\n\n/*\n   Blockchain Innovation:\n   \n   1. Public Transparency\n      - All transactions visible to everyone\n      - Real-time audit capability\n      - No hidden reserves or fractional banking\n   \n   2. Immutability\n      - Past transactions cannot be altered\n      - Cryptographic hash chain protection\n      - Historical record preserved forever\n   \n   3. Decentralized Consensus\n      - No single authority controls the ledger\n      - Network participants validate transactions\n      - Majority consensus determines truth\n*/\n\n// Click 'Deploy' when ready to proceed`,\n    python: `# Module 2: The Genesis Block - Bitcoin's Cypherpunk Legacy\n# Step 3: The Blockchain: A Public, Immutable Ledger\n\n\"\"\"\nBlockchain Innovation:\n\n1. Public Transparency\n   - All transactions visible to everyone\n   - Real-time audit capability\n   - No hidden reserves or fractional banking\n\n2. Immutability\n   - Past transactions cannot be altered\n   - Cryptographic hash chain protection\n   - Historical record preserved forever\n\n3. Decentralized Consensus\n   - No single authority controls the ledger\n   - Network participants validate transactions\n   - Majority consensus determines truth\n\"\"\"\n\n# Click 'Deploy' when ready to proceed`\n  },\n\n  ethos_lesson3_1: {\n    rust: `// Module 3: The Crossroads - Web3's Path and Future\n// Step 1: Ethereum & Smart Contracts: Expanding the Vision\n\n/*\n   Smart Contracts = Code is Law in Practice\n   \n   1. Self-Executing Agreements\n      - Terms written directly in code\n      - Automatic execution when conditions met\n      - No need for trusted intermediaries\n   \n   2. Programmable Money\n      - Beyond simple transactions\n      - Complex financial instruments\n      - Decentralized autonomous organizations\n   \n   3. Global Virtual Machine\n      - World computer accessible to all\n      - Permissionless innovation platform\n      - Composable financial primitives\n*/\n\n// Click 'Deploy' when ready to proceed`,\n    python: `# Module 3: The Crossroads - Web3's Path and Future\n# Step 1: Ethereum & Smart Contracts: Expanding the Vision\n\n\"\"\"\nSmart Contracts = Code is Law in Practice\n\n1. Self-Executing Agreements\n   - Terms written directly in code\n   - Automatic execution when conditions met\n   - No need for trusted intermediaries\n\n2. Programmable Money\n   - Beyond simple transactions\n   - Complex financial instruments\n   - Decentralized autonomous organizations\n\n3. Global Virtual Machine\n   - World computer accessible to all\n   - Permissionless innovation platform\n   - Composable financial primitives\n\"\"\"\n\n# Click 'Deploy' when ready to proceed`\n  },\n\n  ethos_lesson3_2: {\n    rust: `// Module 3: The Crossroads - Web3's Path and Future\n// Step 2: The Rise of DeFi & NFTs: Promises and Perils\n\n/*\n   Web3 Growth & Challenges:\n   \n   Promises:\n   - Decentralized Financial Services (DeFi)\n   - True Digital Ownership (NFTs)\n   - Permissionless Innovation\n   - Global Financial Inclusion\n   \n   Perils:\n   - Re-emergence of centralized services\n   - Speculation over utility\n   - Regulatory capture attempts\n   - User experience barriers\n   \n   Challenge: Staying true to cypherpunk ideals while scaling\n*/\n\n// Click 'Deploy' when ready to proceed`,\n    python: `# Module 3: The Crossroads - Web3's Path and Future\n# Step 2: The Rise of DeFi & NFTs: Promises and Perils\n\n\"\"\"\nWeb3 Growth & Challenges:\n\nPromises:\n- Decentralized Financial Services (DeFi)\n- True Digital Ownership (NFTs)\n- Permissionless Innovation\n- Global Financial Inclusion\n\nPerils:\n- Re-emergence of centralized services\n- Speculation over utility\n- Regulatory capture attempts\n- User experience barriers\n\nChallenge: Staying true to cypherpunk ideals while scaling\n\"\"\"\n\n# Click 'Deploy' when ready to proceed`\n  },\n\n  ethos_lesson3_3: {\n    rust: `// Module 3: The Crossroads - Web3's Path and Future\n// Step 3: The Path Forward: Realigning with the Ethos\n\n/*\n   Your Mission as a Solana Developer:\n   \n   1. Build for Decentralization\n      - Avoid single points of failure\n      - Design for censorship resistance\n      - Prioritize user sovereignty\n   \n   2. Protect Privacy\n      - Implement privacy by design\n      - Minimize data collection\n      - Enable anonymous usage\n   \n   3. Foster Financial Freedom\n      - Create permissionless systems\n      - Reduce barriers to entry\n      - Empower the unbanked\n   \n   Remember: Every line of code is a choice between freedom and control.\n*/\n\n// Click 'Deploy' when ready to continue to Solana coding lessons!`,\n    python: `# Module 3: The Crossroads - Web3's Path and Future\n# Step 3: The Path Forward: Realigning with the Ethos\n\n\"\"\"\nYour Mission as a Solana Developer:\n\n1. Build for Decentralization\n   - Avoid single points of failure\n   - Design for censorship resistance\n   - Prioritize user sovereignty\n\n2. Protect Privacy\n   - Implement privacy by design\n   - Minimize data collection\n   - Enable anonymous usage\n\n3. Foster Financial Freedom\n   - Create permissionless systems\n   - Reduce barriers to entry\n   - Empower the unbanked\n\nRemember: Every line of code is a choice between freedom and control.\n\"\"\"\n\n# Click 'Deploy' when ready to continue to Solana coding lessons!`\n  },\n\n  // ORIGINAL Solana Lesson Templates\n  ranch_management_initial: {\n    rust: `use anchor_lang::prelude::*;\n\ndeclare_id!(\"RanchManagementProgramID\");\n\n#[program]\npub mod ranch_management {\n    use super::*;\n\n    pub fn initialize_ranch(ctx: Context<InitializeRanch>) -> Result<()> {\n        // Your code goes here - initialize ranch owner\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct InitializeRanch<'info> {\n    #[account(init, payer = owner, space = 8 + 32)]\n    pub ranch: Account<'info, Ranch>,\n    #[account(mut)]\n    pub owner: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n\n#[account]\npub struct Ranch {\n    // Add owner field here\n}`,\n    python: `# Ranch Management System\nimport asyncio\nfrom solana.publickey import PublicKey\n\nclass Ranch:\n    def __init__(self):\n        # Add owner field here\n        pass\n\nasync def initialize_ranch(owner):\n    # Your code goes here - initialize ranch owner\n    pass\n\nif __name__ == \"__main__\":\n    asyncio.run(initialize_ranch(PublicKey(\"YourOwnerKey\")))`\n  },\n\n  ranch_management_step1_complete: {\n    rust: `use anchor_lang::prelude::*;\n\ndeclare_id!(\"RanchManagementProgramID\");\n\n#[program]\npub mod ranch_management {\n    use super::*;\n\n    pub fn initialize_ranch(ctx: Context<InitializeRanch>) -> Result<()> {\n        let ranch = &mut ctx.accounts.ranch;\n        // Your code goes here - assign owner\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct InitializeRanch<'info> {\n    #[account(init, payer = owner, space = 8 + 32)]\n    pub ranch: Account<'info, Ranch>,\n    #[account(mut)]\n    pub owner: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n\n#[account]\npub struct Ranch {\n    pub owner: Pubkey,\n}`,\n    python: `# Ranch Management System\nimport asyncio\nfrom solana.publickey import PublicKey\n\nclass Ranch:\n    def __init__(self):\n        self.owner = None\n\nasync def initialize_ranch(owner):\n    ranch = Ranch()\n    # Your code goes here - assign owner\n    return ranch\n\nif __name__ == \"__main__\":\n    asyncio.run(initialize_ranch(PublicKey(\"YourOwnerKey\")))`\n  },\n\n  ranch_management_step2_complete: {\n    rust: `use anchor_lang::prelude::*;\n\ndeclare_id!(\"RanchManagementProgramID\");\n\n#[program]\npub mod ranch_management {\n    use super::*;\n\n    pub fn initialize_ranch(ctx: Context<InitializeRanch>) -> Result<()> {\n        let ranch = &mut ctx.accounts.ranch;\n        ranch.owner = ctx.accounts.owner.key();\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct InitializeRanch<'info> {\n    #[account(\n        init, \n        payer = owner, \n        space = 8 + 32,\n        // Add PDA seeds and bump here\n    )]\n    pub ranch: Account<'info, Ranch>,\n    #[account(mut)]\n    pub owner: Signer<'info>,\n    pub system_program: Program<'info, System>,\n}\n\n#[account]\npub struct Ranch {\n    pub owner: Pubkey,\n}`,\n    python: `# Ranch Management System with PDA\nimport asyncio\nfrom solana.publickey import PublicKey\n\nclass Ranch:\n    def __init__(self):\n        self.owner = None\n\nasync def initialize_ranch(owner):\n    ranch = Ranch()\n    ranch.owner = owner.key()\n    # Add PDA logic here\n    return ranch\n\nif __name__ == \"__main__\":\n    asyncio.run(initialize_ranch(PublicKey(\"YourOwnerKey\")))`\n  },\n\n  token_economics_initial: {\n    rust: `use anchor_lang::prelude::*;\nuse anchor_spl::token::{self, Mint, Token, TokenAccount};\n\ndeclare_id!(\"TokenEconomicsProgramID\");\n\n#[program]\npub mod token_economics {\n    use super::*;\n\n    pub fn create_ranch_token(ctx: Context<CreateRanchToken>) -> Result<()> {\n        // Your code goes here - create token mint\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct CreateRanchToken<'info> {\n    #[account(init, payer = authority, mint::decimals = 6, mint::authority = authority)]\n    pub mint: Account<'info, Mint>,\n    #[account(mut)]\n    pub authority: Signer<'info>,\n    pub token_program: Program<'info, Token>,\n    pub system_program: Program<'info, System>,\n    pub rent: Sysvar<'info, Rent>,\n}`,\n    python: `# Token Economics System\nimport asyncio\nfrom solana.publickey import PublicKey\n\nasync def create_ranch_token(authority):\n    # Your code goes here - create token mint\n    pass\n\nif __name__ == \"__main__\":\n    asyncio.run(create_ranch_token(PublicKey(\"YourAuthorityKey\")))`\n  }\n};","size_bytes":17264},"client/src/data/lessons.ts":{"content":"// PASTE THIS ENTIRE CODE BLOCK INTO src/data/lessons.ts\n\nexport interface Lesson {\n  id: number;\n  title: string;\n  track: 'cypherpunk' | 'solana-ethos' | 'solana-code'; // Explicit track identifier\n  content: any; // Add content property for existing lesson structure\n  description?: string;\n}\n\n// This is the master list of all lessons\nexport const allLessons: Lesson[] = [\n  // --- IMPORTANT ---\n  // You must add your Cypherpunk track lessons here with 'track: \"cypherpunk\"'\n  // Example: { id: 101, title: \"Cypherpunk Ethos 1\", track: 'cypherpunk', ... },\n\n  // SOLANA TRACK LESSONS (OLD STRUCTURE)\n  { \n    id: 1, \n    title: \"The Digital Frontier's Code of Honor\", \n    track: 'solana-ethos',\n    content: { steps: [] } // Placeholder content\n  },\n  { \n    id: 2, \n    title: \"Echoes from the Old World\", \n    track: 'solana-ethos',\n    content: { steps: [] } // Placeholder content\n  },\n  { \n    id: 3, \n    title: \"Principles of Privacy\", \n    track: 'solana-ethos',\n    content: { steps: [] } // Placeholder content\n  },\n  { \n    id: 4, \n    title: \"Decentralized Identity\", \n    track: 'solana-ethos',\n    content: { steps: [] } // Placeholder content\n  },\n  { \n    id: 5, \n    title: \"Rust Fundamentals\", \n    track: 'solana-code',\n    content: {\n      steps: [\n        {\n          id: 1,\n          title: \"Variables & Data Types\",\n          challenge: \"Learn the fundamentals of Rust variables and data types in the context of Solana development.\",\n          quiz: {\n            type: \"multiple-choice\",\n            question: \"Which data type is commonly used for account addresses in Solana?\",\n            options: [\"String\", \"Pubkey\", \"u64\", \"Vec<u8>\"],\n            correctAnswer: \"Pubkey\"\n          },\n          successMessage: \"Excellent! You understand Rust data types for Solana.\",\n          failureMessage: \"Not quite. In Solana, Pubkey is the standard type for account addresses.\"\n        },\n        {\n          id: 2,\n          title: \"Basic Program Structure\",\n          challenge: \"Understand the basic structure of a Solana program written in Rust.\",\n          isCodingChallenge: true,\n          initialCodeTemplateKey: \"rust_basic_program\",\n          expectedOutput: \"Hello, Solana!\",\n          successMessage: \"Great! You've created your first Solana program structure.\",\n          failureMessage: \"Check your program entry point and return statement.\"\n        }\n      ]\n    }\n  },\n  { \n    id: 6, \n    title: \"Anchor Framework Basics\", \n    track: 'solana-code',\n    content: {\n      steps: [\n        {\n          id: 1,\n          title: \"Setting up Anchor\",\n          challenge: \"Learn how to initialize and structure an Anchor project.\",\n          quiz: {\n            type: \"text-input\",\n            question: \"What command initializes a new Anchor project?\",\n            correctAnswer: \"anchor init\"\n          },\n          successMessage: \"Perfect! You know how to start an Anchor project.\",\n          failureMessage: \"The correct command is 'anchor init' to create a new project.\"\n        }\n      ]\n    }\n  },\n  { \n    id: 7, \n    title: \"Program Development\", \n    track: 'solana-code',\n    content: {\n      steps: [\n        {\n          id: 1,\n          title: \"Writing Instructions\",\n          challenge: \"Learn to write and structure Solana program instructions.\",\n          isCodingChallenge: true,\n          initialCodeTemplateKey: \"solana_instruction\",\n          expectedOutput: \"Instruction executed successfully\",\n          successMessage: \"Excellent! You can now write Solana instructions.\",\n          failureMessage: \"Review the instruction handler structure and try again.\"\n        }\n      ]\n    }\n  }\n  // Add any other original Solana lessons here...\n];\n\n// Filter for ONLY the solana-code lessons\nconst solanaCodingLessonsRaw = allLessons.filter(lesson => lesson.track === 'solana-code');\n\n// Re-index the filtered lessons so their IDs start from 1\nexport const solanaCodingLessons = solanaCodingLessonsRaw.map((lesson, index) => ({\n  ...lesson,\n  id: index + 1, // This makes the old lesson 5 become the new lesson 1\n}));\n\n// Filter for the Cypherpunk lessons\nexport const cypherpunkLessons = allLessons.filter(lesson => lesson.track === 'cypherpunk');\n\n// Combine the final, cleaned arrays into one export for the app to use\nexport const lessons = [...cypherpunkLessons, ...solanaCodingLessons];","size_bytes":4343},"client/src/hooks/use-cypherpunk-progress.ts":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\ninterface CypherpunkModule {\n  id: number;\n  title: string;\n  isCompleted: boolean;\n  isUnlocked: boolean;\n}\n\ninterface CypherpunkProgressState {\n  modules: CypherpunkModule[];\n  currentModule: number;\n  trackProgress: number; // 0-100 percentage\n  completeModule: (moduleId: number) => void;\n  getCurrentModule: () => number;\n  getTrackProgress: () => number;\n  resetProgress: () => void;\n}\n\nconst initialModules: CypherpunkModule[] = [\n  {\n    id: 1,\n    title: \"The Genesis of a Movement\",\n    isCompleted: false,\n    isUnlocked: true,\n  },\n  {\n    id: 2,\n    title: \"The Pillars of a Free Internet\",\n    isCompleted: false,\n    isUnlocked: false,\n  },\n  {\n    id: 3,\n    title: \"From Mailing List to Mainnet\",\n    isCompleted: false,\n    isUnlocked: false,\n  },\n  {\n    id: 4,\n    title: \"The Fight for the Future\",\n    isCompleted: false,\n    isUnlocked: false,\n  },\n  {\n    id: 5,\n    title: \"Cryptographic Foundations\",\n    isCompleted: false,\n    isUnlocked: false,\n  },\n  {\n    id: 6,\n    title: \"Building the Decentralized Web\",\n    isCompleted: false,\n    isUnlocked: false,\n  },\n];\n\nexport const useCypherpunkProgress = create<CypherpunkProgressState>()(\n  persist(\n    (set, get) => ({\n      modules: initialModules,\n      currentModule: 1,\n      trackProgress: 0,\n\n      completeModule: (moduleId: number) => {\n        set((state) => {\n          const updatedModules = state.modules.map((module) => {\n            if (module.id === moduleId) {\n              return { ...module, isCompleted: true };\n            }\n            // Unlock next module\n            if (module.id === moduleId + 1) {\n              return { ...module, isUnlocked: true };\n            }\n            return module;\n          });\n\n          const completedCount = updatedModules.filter(m => m.isCompleted).length;\n          // Modules 1-4 represent the complete Cypherpunk Legacy track (67%)\n          const progressPercentage = completedCount >= 4 ? 67 : Math.round((completedCount / 4) * 67);\n          \n          const nextModule = updatedModules.find(m => !m.isCompleted && m.isUnlocked)?.id || moduleId;\n\n          return {\n            modules: updatedModules,\n            currentModule: nextModule,\n            trackProgress: progressPercentage,\n          };\n        });\n      },\n\n      getCurrentModule: () => {\n        const state = get();\n        return state.currentModule;\n      },\n\n      getTrackProgress: () => {\n        const state = get();\n        return state.trackProgress;\n      },\n\n      resetProgress: () => {\n        set({\n          modules: initialModules,\n          currentModule: 1,\n          trackProgress: 0,\n        });\n      },\n    }),\n    {\n      name: 'cypherpunk-progress-storage',\n    }\n  )\n);","size_bytes":2791},"client/src/hooks/use-enhanced-game-store.ts":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\ninterface RanchData {\n  id: number;\n  name: string;\n  coins: number;\n  experience: number;\n  level: number;\n}\n\ninterface Character {\n  id: number;\n  name: string;\n  type: string;\n  rarity: string;\n  level: number;\n  experience: number;\n  position: { x: number; y: number };\n  isActive: boolean;\n}\n\ninterface Building {\n  id: number;\n  name: string;\n  type: string;\n  level: number;\n  position: { x: number; y: number };\n  isActive: boolean;\n}\n\ninterface RewardNft {\n  id: string;\n  lessonId: number;\n  nftImageUrl: string;\n  rewardName: string;\n  awardedAt: Date;\n}\n\ninterface GameStore {\n  ranchData: RanchData;\n  characters: Character[];\n  buildings: Building[];\n  rewardNfts: RewardNft[];\n  \n  // Visual effect states\n  networkPingActive: boolean;\n  sparkleActive: boolean;\n  coinFallActive: boolean;\n  dataStreamActive: boolean;\n  lastStoredMessage: string | null;\n  transactionActive: boolean;\n  \n  // Challenge reward states\n  showChallengeReward: boolean;\n  currentRewardNftUrl: string | null;\n  \n  // Actions\n  addCharacter: (character: Omit<Character, 'id'>) => void;\n  addBuilding: (building: Omit<Building, 'id'>) => void;\n  spendRanchCoin: (amount: number) => boolean;\n  earnRanchCoin: (amount: number) => void;\n  addExperience: (amount: number) => void;\n  \n  // Visual effect actions\n  triggerNetworkPing: () => void;\n  triggerSparkleAnimation: () => void;\n  triggerCoinFall: () => void;\n  triggerDataStreamAnimation: () => void;\n  setLastStoredMessage: (message: string) => void;\n  triggerTransactionAnimation: () => void;\n  \n  // Challenge reward actions\n  triggerChallengeReward: (nftUrl: string, lessonId: number, rewardName: string) => void;\n}\n\nexport const useGameStore = create<GameStore>()(\n  persist(\n    (set, get) => ({\n      ranchData: {\n        id: 1,\n        name: \"Shadow Ranch\",\n        coins: 100,\n        experience: 0,\n        level: 1\n      },\n      characters: [\n        {\n          id: 1,\n          name: \"Sheriff\",\n          type: \"sheriff\",\n          rarity: \"legendary\",\n          level: 1,\n          experience: 0,\n          position: { x: 50, y: 50 },\n          isActive: true\n        }\n      ],\n      buildings: [\n        {\n          id: 1,\n          name: \"Saloon\",\n          type: \"saloon\",\n          level: 1,\n          position: { x: 20, y: 80 },\n          isActive: true\n        },\n        {\n          id: 2,\n          name: \"Stable\",\n          type: \"stable\",\n          level: 1,\n          position: { x: 70, y: 80 },\n          isActive: true\n        }\n      ],\n      rewardNfts: [],\n      \n      // Visual effects\n      networkPingActive: false,\n      sparkleActive: false,\n      dataStreamActive: false,\n      coinFallActive: false,\n      lastStoredMessage: null,\n      transactionActive: false,\n      \n      // Challenge reward states\n      showChallengeReward: false,\n      currentRewardNftUrl: null,\n\n      addCharacter: (character) => {\n        const newCharacter = { ...character, id: Date.now() };\n        set((state) => ({\n          characters: [...state.characters, newCharacter]\n        }));\n      },\n\n      addBuilding: (building) => {\n        const newBuilding = { ...building, id: Date.now() };\n        set((state) => ({\n          buildings: [...state.buildings, newBuilding]\n        }));\n      },\n\n      spendRanchCoin: (amount) => {\n        const currentCoins = get().ranchData.coins;\n        if (currentCoins >= amount) {\n          set((state) => ({\n            ranchData: { ...state.ranchData, coins: currentCoins - amount }\n          }));\n          return true;\n        }\n        return false;\n      },\n\n      earnRanchCoin: (amount) => {\n        set((state) => ({\n          ranchData: { \n            ...state.ranchData, \n            coins: state.ranchData.coins + amount \n          }\n        }));\n      },\n\n      addExperience: (amount) => {\n        set((state) => {\n          const newExperience = state.ranchData.experience + amount;\n          const newLevel = Math.floor(newExperience / 100) + 1;\n          return {\n            ranchData: { \n              ...state.ranchData, \n              experience: newExperience,\n              level: newLevel\n            }\n          };\n        });\n      },\n\n      triggerNetworkPing: () => {\n        set({ networkPingActive: true });\n        setTimeout(() => set({ networkPingActive: false }), 2000);\n      },\n\n      triggerSparkleAnimation: () => {\n        set({ sparkleActive: true });\n        setTimeout(() => set({ sparkleActive: false }), 3000);\n      },\n\n      triggerCoinFall: () => {\n        set({ coinFallActive: true });\n        setTimeout(() => set({ coinFallActive: false }), 2000);\n      },\n\n      triggerDataStreamAnimation: () => {\n        set({ dataStreamActive: true });\n        setTimeout(() => set({ dataStreamActive: false }), 3500);\n      },\n\n      setLastStoredMessage: (message) => {\n        set({ lastStoredMessage: message });\n        setTimeout(() => set({ lastStoredMessage: null }), 5000);\n      },\n\n      triggerTransactionAnimation: () => {\n        set({ transactionActive: true });\n        setTimeout(() => set({ transactionActive: false }), 3000);\n      },\n\n      triggerChallengeReward: (nftUrl, lessonId, rewardName) => {\n        // Add to reward NFTs collection\n        const newReward: RewardNft = {\n          id: Date.now().toString(),\n          lessonId,\n          nftImageUrl: nftUrl,\n          rewardName,\n          awardedAt: new Date()\n        };\n        \n        set((state) => ({\n          currentRewardNftUrl: nftUrl,\n          showChallengeReward: true,\n          rewardNfts: [...state.rewardNfts, newReward]\n        }));\n        \n        // Auto-hide the reward after 4.5 seconds\n        setTimeout(() => set({ showChallengeReward: false }), 4500);\n      }\n    }),\n    {\n      name: 'enhanced-game-store'\n    }\n  )\n);","size_bytes":5854},"client/src/hooks/use-firestore-game-store.ts":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { doc, getDoc, setDoc, collection, addDoc, getDocs, orderBy, query, Timestamp } from 'firebase/firestore';\nimport { db, auth } from '../lib/firebase';\n\ninterface RanchData {\n  id: number;\n  name: string;\n  coins: number;\n  experience: number;\n  level: number;\n}\n\ninterface Character {\n  id: number;\n  name: string;\n  type: string;\n  rarity: string;\n  level: number;\n  experience: number;\n  position: { x: number; y: number };\n  isActive: boolean;\n}\n\ninterface Building {\n  id: number;\n  name: string;\n  type: string;\n  level: number;\n  position: { x: number; y: number };\n  isActive: boolean;\n}\n\ninterface RewardNft {\n  id: string;\n  lessonId: number;\n  nftImageUrl: string;\n  rewardName: string;\n  awardedAt: Date;\n}\n\ninterface GameStore {\n  ranchData: RanchData;\n  characters: Character[];\n  buildings: Building[];\n  rewardNfts: RewardNft[];\n  \n  // Visual effect states\n  networkPingActive: boolean;\n  sparkleActive: boolean;\n  coinFallActive: boolean;\n  lastStoredMessage: string | null;\n  transactionActive: boolean;\n  \n  // Challenge reward states\n  showChallengeReward: boolean;\n  currentRewardNftUrl: string | null;\n  \n  // Actions\n  addCharacter: (character: Omit<Character, 'id'>) => void;\n  addBuilding: (building: Omit<Building, 'id'>) => void;\n  spendRanchCoin: (amount: number) => boolean;\n  earnRanchCoin: (amount: number) => void;\n  addExperience: (amount: number) => void;\n  \n  // Visual effect actions\n  triggerNetworkPing: () => void;\n  triggerSparkleAnimation: () => void;\n  triggerCoinFall: () => void;\n  setLastStoredMessage: (message: string) => void;\n  triggerTransactionAnimation: () => void;\n  \n  // Challenge reward actions\n  triggerChallengeReward: (nftUrl: string, lessonId: number, rewardName: string) => void;\n  \n  // Firestore sync actions\n  loadFromFirestore: () => Promise<void>;\n  saveToFirestore: () => Promise<void>;\n}\n\nexport const useGameStore = create<GameStore>()(\n  persist(\n    (set, get) => ({\n      ranchData: {\n        id: 1,\n        name: \"Shadow Ranch\",\n        coins: 100,\n        experience: 0,\n        level: 1\n      },\n      characters: [\n        {\n          id: 1,\n          name: \"Sheriff\",\n          type: \"sheriff\",\n          rarity: \"legendary\",\n          level: 1,\n          experience: 0,\n          position: { x: 50, y: 50 },\n          isActive: true\n        }\n      ],\n      buildings: [\n        {\n          id: 1,\n          name: \"Saloon\",\n          type: \"saloon\",\n          level: 1,\n          position: { x: 20, y: 80 },\n          isActive: true\n        },\n        {\n          id: 2,\n          name: \"Stable\",\n          type: \"stable\",\n          level: 1,\n          position: { x: 70, y: 80 },\n          isActive: true\n        }\n      ],\n      rewardNfts: [],\n      \n      // Visual effects\n      networkPingActive: false,\n      sparkleActive: false,\n      coinFallActive: false,\n      lastStoredMessage: null,\n      transactionActive: false,\n      \n      // Challenge reward states\n      showChallengeReward: false,\n      currentRewardNftUrl: null,\n\n      addCharacter: (character) => {\n        const newCharacter = { ...character, id: Date.now() };\n        set((state) => ({\n          characters: [...state.characters, newCharacter]\n        }));\n        get().saveToFirestore();\n      },\n\n      addBuilding: (building) => {\n        const newBuilding = { ...building, id: Date.now() };\n        set((state) => ({\n          buildings: [...state.buildings, newBuilding]\n        }));\n        get().saveToFirestore();\n      },\n\n      spendRanchCoin: (amount) => {\n        const currentCoins = get().ranchData.coins;\n        if (currentCoins >= amount) {\n          set((state) => ({\n            ranchData: { ...state.ranchData, coins: currentCoins - amount }\n          }));\n          get().saveToFirestore();\n          return true;\n        }\n        return false;\n      },\n\n      earnRanchCoin: (amount) => {\n        set((state) => ({\n          ranchData: { \n            ...state.ranchData, \n            coins: state.ranchData.coins + amount \n          }\n        }));\n        get().saveToFirestore();\n      },\n\n      addExperience: (amount) => {\n        set((state) => {\n          const newExperience = state.ranchData.experience + amount;\n          const newLevel = Math.floor(newExperience / 100) + 1;\n          return {\n            ranchData: { \n              ...state.ranchData, \n              experience: newExperience,\n              level: newLevel\n            }\n          };\n        });\n        get().saveToFirestore();\n      },\n\n      triggerNetworkPing: () => {\n        set({ networkPingActive: true });\n        setTimeout(() => set({ networkPingActive: false }), 2000);\n      },\n\n      triggerSparkleAnimation: () => {\n        set({ sparkleActive: true });\n        setTimeout(() => set({ sparkleActive: false }), 3000);\n      },\n\n      triggerCoinFall: () => {\n        set({ coinFallActive: true });\n        setTimeout(() => set({ coinFallActive: false }), 2000);\n      },\n\n      setLastStoredMessage: (message) => {\n        set({ lastStoredMessage: message });\n        setTimeout(() => set({ lastStoredMessage: null }), 5000);\n      },\n\n      triggerTransactionAnimation: () => {\n        set({ transactionActive: true });\n        setTimeout(() => set({ transactionActive: false }), 3000);\n      },\n\n      triggerChallengeReward: async (nftUrl, lessonId, rewardName) => {\n        // Add to reward NFTs collection\n        const newReward: RewardNft = {\n          id: Date.now().toString(),\n          lessonId,\n          nftImageUrl: nftUrl,\n          rewardName,\n          awardedAt: new Date()\n        };\n        \n        set((state) => ({\n          currentRewardNftUrl: nftUrl,\n          showChallengeReward: true,\n          rewardNfts: [...state.rewardNfts, newReward]\n        }));\n        \n        // Save to Firestore\n        if (auth.currentUser) {\n          try {\n            await addDoc(collection(db, 'users', auth.currentUser.uid, 'rewardNfts'), {\n              ...newReward,\n              awardedAt: Timestamp.now()\n            });\n          } catch (error) {\n            console.error('Error saving reward NFT to Firestore:', error);\n          }\n        }\n        \n        // Auto-hide the reward after 4.5 seconds\n        setTimeout(() => set({ showChallengeReward: false }), 4500);\n        \n        // Save updated state to Firestore\n        get().saveToFirestore();\n      },\n\n      loadFromFirestore: async () => {\n        if (!auth.currentUser) return;\n        \n        try {\n          // Load ranch data\n          const ranchDoc = await getDoc(doc(db, 'users', auth.currentUser.uid, 'ranch', 'main'));\n          if (ranchDoc.exists()) {\n            set({ ranchData: ranchDoc.data() as RanchData });\n          }\n\n          // Load characters\n          const charactersSnapshot = await getDocs(collection(db, 'users', auth.currentUser.uid, 'characters'));\n          const characters = charactersSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Character));\n          if (characters.length > 0) {\n            set({ characters });\n          }\n\n          // Load buildings\n          const buildingsSnapshot = await getDocs(collection(db, 'users', auth.currentUser.uid, 'buildings'));\n          const buildings = buildingsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Building));\n          if (buildings.length > 0) {\n            set({ buildings });\n          }\n\n          // Load reward NFTs\n          const rewardsQuery = query(\n            collection(db, 'users', auth.currentUser.uid, 'rewardNfts'),\n            orderBy('awardedAt', 'desc')\n          );\n          const rewardsSnapshot = await getDocs(rewardsQuery);\n          const rewardNfts = rewardsSnapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data(),\n            awardedAt: doc.data().awardedAt?.toDate() || new Date()\n          } as RewardNft));\n          \n          set({ rewardNfts });\n          \n        } catch (error) {\n          console.error('Error loading from Firestore:', error);\n        }\n      },\n\n      saveToFirestore: async () => {\n        if (!auth.currentUser) return;\n        \n        try {\n          const state = get();\n          \n          // Save ranch data\n          await setDoc(doc(db, 'users', auth.currentUser.uid, 'ranch', 'main'), state.ranchData);\n          \n          // Note: Characters and buildings are saved individually when added\n          // Reward NFTs are saved when awarded\n          \n        } catch (error) {\n          console.error('Error saving to Firestore:', error);\n        }\n      }\n    }),\n    {\n      name: 'game-store',\n      // Load from Firestore after hydration\n      onRehydrateStorage: () => (state) => {\n        if (state && auth.currentUser) {\n          state.loadFromFirestore();\n        }\n      }\n    }\n  )\n);","size_bytes":8847},"client/src/hooks/use-game-store.ts":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\ninterface RanchData {\n  id: number;\n  name: string;\n  coins: number;\n  experience: number;\n  level: number;\n}\n\ninterface Character {\n  id: number;\n  name: string;\n  type: string;\n  rarity: string;\n  level: number;\n  experience: number;\n  position: { x: number; y: number };\n  isActive: boolean;\n}\n\ninterface Building {\n  id: number;\n  name: string;\n  type: string;\n  level: number;\n  position: { x: number; y: number };\n  isActive: boolean;\n}\n\ninterface GameStore {\n  ranchData: RanchData;\n  characters: Character[];\n  buildings: Building[];\n  \n  // Visual effect states\n  networkPingActive: boolean;\n  sparkleActive: boolean;\n  coinFallActive: boolean;\n  lastStoredMessage: string | null;\n  transactionActive: boolean;\n  \n  // Challenge reward states\n  showChallengeReward: boolean;\n  currentRewardNftUrl: string | null;\n  \n  // Actions\n  addCharacter: (character: Omit<Character, 'id'>) => void;\n  addBuilding: (building: Omit<Building, 'id'>) => void;\n  spendRanchCoin: (amount: number) => boolean;\n  earnRanchCoin: (amount: number) => void;\n  addExperience: (amount: number) => void;\n  \n  // Visual effect actions\n  triggerNetworkPing: () => void;\n  triggerSparkleAnimation: () => void;\n  triggerCoinFall: () => void;\n  setLastStoredMessage: (message: string) => void;\n  triggerTransactionAnimation: () => void;\n  \n  // Challenge reward actions\n  triggerChallengeReward: (nftUrl: string) => void;\n}\n\nexport const useGameStore = create<GameStore>()(\n  persist(\n    (set, get) => ({\n      ranchData: {\n        id: 1,\n        name: \"Shadow Ranch\",\n        coins: 100,\n        experience: 0,\n        level: 1\n      },\n      characters: [\n        {\n          id: 1,\n          name: \"Sheriff\",\n          type: \"sheriff\",\n          rarity: \"legendary\",\n          level: 1,\n          experience: 0,\n          position: { x: 50, y: 50 },\n          isActive: true\n        }\n      ],\n      buildings: [\n        {\n          id: 1,\n          name: \"Saloon\",\n          type: \"saloon\",\n          level: 1,\n          position: { x: 20, y: 80 },\n          isActive: true\n        },\n        {\n          id: 2,\n          name: \"Stable\",\n          type: \"stable\",\n          level: 1,\n          position: { x: 70, y: 80 },\n          isActive: true\n        }\n      ],\n      \n      // Visual effects\n      networkPingActive: false,\n      sparkleActive: false,\n      coinFallActive: false,\n      lastStoredMessage: null,\n      transactionActive: false,\n      \n      // Challenge reward states\n      showChallengeReward: false,\n      currentRewardNftUrl: null,\n\n      addCharacter: (character) => {\n        set((state) => ({\n          characters: [...state.characters, { ...character, id: Date.now() }]\n        }));\n      },\n\n      addBuilding: (building) => {\n        set((state) => ({\n          buildings: [...state.buildings, { ...building, id: Date.now() }]\n        }));\n      },\n\n      spendRanchCoin: (amount) => {\n        const currentCoins = get().ranchData.coins;\n        if (currentCoins >= amount) {\n          set((state) => ({\n            ranchData: { ...state.ranchData, coins: currentCoins - amount }\n          }));\n          return true;\n        }\n        return false;\n      },\n\n      earnRanchCoin: (amount) => {\n        set((state) => ({\n          ranchData: { \n            ...state.ranchData, \n            coins: state.ranchData.coins + amount \n          }\n        }));\n      },\n\n      addExperience: (amount) => {\n        set((state) => {\n          const newExp = state.ranchData.experience + amount;\n          const newLevel = Math.floor(newExp / 100) + 1;\n          \n          return {\n            ranchData: { \n              ...state.ranchData, \n              experience: newExp,\n              level: newLevel\n            }\n          };\n        });\n      },\n\n      triggerNetworkPing: () => {\n        set({ networkPingActive: true });\n        setTimeout(() => set({ networkPingActive: false }), 2000);\n      },\n\n      triggerSparkleAnimation: () => {\n        set({ sparkleActive: true });\n        setTimeout(() => set({ sparkleActive: false }), 3000);\n      },\n\n      triggerCoinFall: () => {\n        set({ coinFallActive: true });\n        setTimeout(() => set({ coinFallActive: false }), 2000);\n      },\n\n      setLastStoredMessage: (message) => {\n        set({ lastStoredMessage: message });\n        setTimeout(() => set({ lastStoredMessage: null }), 5000);\n      },\n\n      triggerTransactionAnimation: () => {\n        set({ transactionActive: true });\n        setTimeout(() => set({ transactionActive: false }), 3000);\n      },\n\n      triggerChallengeReward: (nftUrl) => {\n        set({ \n          currentRewardNftUrl: nftUrl,\n          showChallengeReward: true \n        });\n        // The ChallengeReward component will handle its own timeout to hide\n        setTimeout(() => set({ showChallengeReward: false }), 4500);\n      }\n    }),\n    {\n      name: 'game-store'\n    }\n  )\n);\n","size_bytes":4968},"client/src/hooks/use-lesson-store.ts":{"content":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\n\ninterface LessonProgress {\n  lessonId: number;\n  currentStep: number;\n  completedSteps: number[];\n  isCompleted: boolean;\n  attempts: number;\n  lastAttemptAt: Date;\n  completedAt?: Date;\n}\n\ninterface LessonStore {\n  progress: Record<number, LessonProgress>;\n  currentLesson: number | null;\n  \n  // Actions\n  getLessonProgress: (lessonId: number) => LessonProgress | undefined;\n  completeLesson: (lessonId: number) => void;\n  updateLessonAttempt: (lessonId: number, step: number) => void;\n  completeStep: (lessonId: number, step: number) => void;\n  isStepCompleted: (lessonId: number, step: number) => boolean;\n  getOverallProgress: () => number;\n  isLessonUnlocked: (lessonId: number, requiredLessons: number[]) => boolean;\n  getCompletedLessonsCount: () => number;\n  setCurrentLesson: (lessonId: number | null) => void;\n}\n\nexport const useLessonStore = create<LessonStore>()(\n  persist(\n    (set, get) => ({\n      progress: {},\n      currentLesson: null,\n\n      getLessonProgress: (lessonId: number) => {\n        const state = get();\n        return state.progress[lessonId];\n      },\n\n      completeLesson: (lessonId: number) => {\n        set((state) => {\n          const existing = state.progress[lessonId];\n          \n          return { \n            progress: {\n              ...state.progress,\n              [lessonId]: {\n                ...existing,\n                lessonId,\n                currentStep: existing?.currentStep || 1,\n                completedSteps: existing?.completedSteps || [],\n                isCompleted: true,\n                attempts: existing?.attempts || 1,\n                lastAttemptAt: new Date(),\n                completedAt: new Date()\n              }\n            }\n          };\n        });\n      },\n\n      updateLessonAttempt: (lessonId: number, step: number) => {\n        set((state) => {\n          const existing = state.progress[lessonId];\n          \n          return {\n            progress: {\n              ...state.progress,\n              [lessonId]: {\n                ...existing,\n                lessonId,\n                currentStep: step,\n                completedSteps: existing?.completedSteps || [],\n                isCompleted: existing?.isCompleted || false,\n                attempts: (existing?.attempts || 0) + 1,\n                lastAttemptAt: new Date(),\n                completedAt: existing?.completedAt\n              }\n            }\n          };\n        });\n      },\n\n      completeStep: (lessonId: number, step: number) => {\n        set((state) => {\n          const existing = state.progress[lessonId];\n          const completedSteps = existing?.completedSteps || [];\n          \n          if (!completedSteps.includes(step)) {\n            return {\n              progress: {\n                ...state.progress,\n                [lessonId]: {\n                  ...existing,\n                  lessonId,\n                  currentStep: step,\n                  completedSteps: [...completedSteps, step],\n                  isCompleted: existing?.isCompleted || false,\n                  attempts: existing?.attempts || 1,\n                  lastAttemptAt: new Date(),\n                  completedAt: existing?.completedAt\n                }\n              }\n            };\n          }\n          return state;\n        });\n      },\n\n      isStepCompleted: (lessonId: number, step: number) => {\n        const progress = get().progress[lessonId];\n        return progress?.completedSteps?.includes(step) || false;\n      },\n\n      getOverallProgress: () => {\n        const progress = get().progress;\n        const completed = Object.values(progress).filter(p => p.isCompleted).length;\n        const total = Object.keys(progress).length || 1;\n        return Math.round((completed / total) * 100);\n      },\n\n      isLessonUnlocked: (lessonId: number, requiredLessons: number[]) => {\n        const progress = get().progress;\n        if (lessonId === 1) return true;\n        \n        return requiredLessons.every(reqId => {\n          const lessonProgress = progress[reqId];\n          return lessonProgress?.isCompleted || false;\n        });\n      },\n\n      getCompletedLessonsCount: () => {\n        const progress = get().progress;\n        return Object.values(progress).filter(p => p.isCompleted).length;\n      },\n\n      setCurrentLesson: (lessonId: number | null) => {\n        set({ currentLesson: lessonId });\n      }\n    }),\n    {\n      name: 'lesson-progress-storage'\n    }\n  )\n);","size_bytes":4500},"client/src/hooks/use-loading-manager.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\n\ninterface LoadingManagerOptions {\n  threshold?: number; // Time in ms before showing loader\n  minDisplayTime?: number; // Minimum time to show loader once displayed\n}\n\nexport function useLoadingManager(options: LoadingManagerOptions = {}) {\n  const { threshold = 800, minDisplayTime = 1500 } = options;\n  const [isLoading, setIsLoading] = useState(false);\n  const [showLoader, setShowLoader] = useState(false);\n  const loadStartTime = useRef<number>(0);\n  const loaderStartTime = useRef<number>(0);\n  const thresholdTimer = useRef<NodeJS.Timeout | null>(null);\n  const minDisplayTimer = useRef<NodeJS.Timeout | null>(null);\n\n  const startLoading = () => {\n    loadStartTime.current = Date.now();\n    setIsLoading(true);\n    \n    // Set timer to show loader if loading takes too long\n    thresholdTimer.current = setTimeout(() => {\n      if (isLoading) {\n        loaderStartTime.current = Date.now();\n        setShowLoader(true);\n      }\n    }, threshold);\n  };\n\n  const stopLoading = () => {\n    setIsLoading(false);\n    \n    // Clear threshold timer if loading completes quickly\n    if (thresholdTimer.current) {\n      clearTimeout(thresholdTimer.current);\n      thresholdTimer.current = null;\n    }\n\n    // If loader is showing, ensure it shows for minimum time\n    if (showLoader) {\n      const loaderDisplayTime = Date.now() - loaderStartTime.current;\n      const remainingTime = Math.max(0, minDisplayTime - loaderDisplayTime);\n      \n      minDisplayTimer.current = setTimeout(() => {\n        setShowLoader(false);\n      }, remainingTime);\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      if (thresholdTimer.current) {\n        clearTimeout(thresholdTimer.current);\n      }\n      if (minDisplayTimer.current) {\n        clearTimeout(minDisplayTimer.current);\n      }\n    };\n  }, []);\n\n  return {\n    isLoading,\n    showLoader,\n    startLoading,\n    stopLoading\n  };\n}","size_bytes":1933},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-page-loader.tsx":{"content":"import { useEffect } from 'react';\nimport { useLoadingManager } from './use-loading-manager';\n\nexport function usePageLoader() {\n  const { showLoader, startLoading, stopLoading } = useLoadingManager({\n    threshold: 800, // Show loader if page takes more than 800ms\n    minDisplayTime: 1500 // Show for at least 1.5 seconds once displayed\n  });\n\n  useEffect(() => {\n    // Start loading when component mounts\n    startLoading();\n\n    // Simulate page content loading\n    const loadTimer = setTimeout(() => {\n      stopLoading();\n    }, Math.random() * 1000 + 500); // Random load time between 500-1500ms\n\n    return () => {\n      clearTimeout(loadTimer);\n      stopLoading();\n    };\n  }, [startLoading, stopLoading]);\n\n  return { showLoader };\n}","size_bytes":745},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-wallet.ts":{"content":"import { useState, useEffect, useCallback } from 'react';\n\ninterface WalletState {\n  connected: boolean;\n  address: string | null;\n  connecting: boolean;\n}\n\n// Phantom wallet interface\ninterface PhantomWallet {\n  isPhantom?: boolean;\n  connect: () => Promise<{ publicKey: { toString(): string } }>;\n  disconnect: () => Promise<void>;\n  isConnected: boolean;\n  publicKey: { toString(): string } | null;\n  on: (event: string, callback: () => void) => void;\n  off: (event: string, callback: () => void) => void;\n}\n\ndeclare global {\n  interface Window {\n    solana?: PhantomWallet;\n    phantom?: {\n      solana?: PhantomWallet;\n    };\n  }\n}\n\nexport function useWallet() {\n  const [state, setState] = useState<WalletState>({\n    connected: false,\n    address: null,\n    connecting: false\n  });\n\n  // Get the wallet adapter (prioritize Phantom)\n  const getWallet = useCallback((): PhantomWallet | null => {\n    if (typeof window === 'undefined') return null;\n    \n    // Check for Phantom\n    if (window.phantom?.solana?.isPhantom) {\n      return window.phantom.solana;\n    }\n    \n    // Fallback to generic solana object\n    if (window.solana?.isPhantom) {\n      return window.solana;\n    }\n    \n    return null;\n  }, []);\n\n  // Check for existing connection on load\n  useEffect(() => {\n    const wallet = getWallet();\n    if (wallet && wallet.isConnected && wallet.publicKey) {\n      setState({\n        connected: true,\n        address: wallet.publicKey.toString(),\n        connecting: false\n      });\n    }\n  }, [getWallet]);\n\n  const connect = async () => {\n    const wallet = getWallet();\n    \n    if (!wallet) {\n      throw new Error('No Solana wallet found. Please install Phantom wallet.');\n    }\n\n    setState(prev => ({ ...prev, connecting: true }));\n    \n    try {\n      const response = await wallet.connect();\n      const address = response.publicKey.toString();\n      \n      setState({\n        connected: true,\n        address,\n        connecting: false\n      });\n      \n      localStorage.setItem('wallet-connected', 'true');\n      localStorage.setItem('wallet-address', address);\n    } catch (error) {\n      setState(prev => ({ ...prev, connecting: false }));\n      throw error;\n    }\n  };\n\n  const disconnect = useCallback(async () => {\n    const wallet = getWallet();\n    \n    if (wallet && wallet.disconnect) {\n      try {\n        await wallet.disconnect();\n      } catch (error) {\n        console.warn('Error disconnecting wallet:', error);\n      }\n    }\n    \n    setState({\n      connected: false,\n      address: null,\n      connecting: false\n    });\n    \n    localStorage.removeItem('wallet-connected');\n    localStorage.removeItem('wallet-address');\n  }, [getWallet]);\n\n  // Listen for wallet events\n  useEffect(() => {\n    const wallet = getWallet();\n    if (!wallet) return;\n\n    const handleAccountChanged = () => {\n      if (wallet.publicKey) {\n        setState(prev => ({\n          ...prev,\n          address: wallet.publicKey!.toString()\n        }));\n      } else {\n        disconnect();\n      }\n    };\n\n    wallet.on('accountChanged', handleAccountChanged);\n    wallet.on('disconnect', disconnect);\n\n    return () => {\n      wallet.off('accountChanged', handleAccountChanged);\n      wallet.off('disconnect', disconnect);\n    };\n  }, [getWallet, disconnect]);\n\n  return {\n    ...state,\n    connect,\n    disconnect,\n    walletInstalled: !!getWallet()\n  };\n}\n","size_bytes":3380},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from 'firebase/app';\nimport { getAuth, signInAnonymously, onAuthStateChanged, User } from 'firebase/auth';\nimport { initializeFirestore, doc, getDoc, setDoc, addDoc, updateDoc, collection, query, where, getDocs, orderBy, Timestamp } from 'firebase/firestore';\nimport { getStorage, ref, uploadBytes, getDownloadURL, uploadBytesResumable } from 'firebase/storage';\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID\n};\n\n// Initialize Firebase\nexport const app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\n\n// Initialize Firestore with Replit-compatible settings\nexport const db = initializeFirestore(app, {\n  experimentalForceLongPolling: true,\n});\n\nexport const storage = getStorage(app);\n\n// Authentication helper\nexport const signInUser = async (): Promise<User | null> => {\n  try {\n    const result = await signInAnonymously(auth);\n    return result.user;\n  } catch (error) {\n    console.error('Error signing in:', error);\n    return null;\n  }\n};\n\n// Collection paths\nexport const COLLECTIONS = {\n  USERS: 'users',\n  USER_PROFILES: 'userProfiles',\n  RANCHES: 'ranches',\n  USER_PROGRESS: 'userProgress',\n  REWARD_NFTS: 'rewardNfts',\n  CHARACTERS: 'characters',\n  BUILDINGS: 'buildings'\n};\n\n// Helper function to get user document reference\nexport const getUserDocRef = (userId: string) => {\n  return doc(db, COLLECTIONS.USERS, userId);\n};\n\n// Helper function to get user's subcollection reference\nexport const getUserSubcollectionRef = (userId: string, subcollection: string) => {\n  return collection(db, COLLECTIONS.USERS, userId, subcollection);\n};\n\n// Initialize auth state listener\nexport const initializeAuth = (callback: (user: User | null) => void) => {\n  return onAuthStateChanged(auth, callback);\n};\n\n// User Profile Types\nexport interface UserProfile {\n  publicKey: string;\n  username: string;\n  bio: string;\n  profileImageUrl: string;\n  nftBadges: NFTBadge[];\n  createdAt: Timestamp;\n  updatedAt: Timestamp;\n}\n\nexport interface NFTBadge {\n  id: string;\n  name: string;\n  description: string;\n  imageUrl: string;\n  unlocked: boolean;\n  unlockedAt?: Timestamp;\n  rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';\n}\n\n// Profile management functions\nexport const getUserProfile = async (publicKey: string): Promise<UserProfile | null> => {\n  try {\n    const docRef = doc(db, COLLECTIONS.USER_PROFILES, publicKey);\n    const docSnap = await getDoc(docRef);\n    \n    if (docSnap.exists()) {\n      return docSnap.data() as UserProfile;\n    }\n    return null;\n  } catch (error) {\n    console.error('Error fetching user profile:', error);\n    return null;\n  }\n};\n\nexport const createUserProfile = async (publicKey: string, initialData?: Partial<UserProfile>): Promise<UserProfile> => {\n  const defaultProfile: UserProfile = {\n    publicKey,\n    username: `User_${publicKey.slice(0, 6)}`,\n    bio: '',\n    profileImageUrl: '',\n    nftBadges: getDefaultNFTBadges(),\n    createdAt: Timestamp.now(),\n    updatedAt: Timestamp.now(),\n    ...initialData\n  };\n\n  try {\n    const docRef = doc(db, COLLECTIONS.USER_PROFILES, publicKey);\n    await setDoc(docRef, defaultProfile);\n    return defaultProfile;\n  } catch (error) {\n    console.error('Error creating user profile:', error);\n    throw error;\n  }\n};\n\nexport const updateUserProfile = async (publicKey: string, updates: Partial<UserProfile>): Promise<void> => {\n  try {\n    const docRef = doc(db, COLLECTIONS.USER_PROFILES, publicKey);\n    await updateDoc(docRef, {\n      ...updates,\n      updatedAt: Timestamp.now()\n    });\n  } catch (error) {\n    console.error('Error updating user profile:', error);\n    throw error;\n  }\n};\n\n// Storage functions for profile images\nexport const uploadProfileImage = async (\n  file: File, \n  publicKey: string, \n  onProgress?: (progress: number) => void\n): Promise<string> => {\n  try {\n    const fileExtension = file.name.split('.').pop();\n    const fileName = `profile_${Date.now()}.${fileExtension}`;\n    const storageRef = ref(storage, `profile-images/${publicKey}/${fileName}`);\n    \n    if (onProgress) {\n      const uploadTask = uploadBytesResumable(storageRef, file);\n      \n      return new Promise((resolve, reject) => {\n        uploadTask.on(\n          'state_changed',\n          (snapshot) => {\n            const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            onProgress(progress);\n          },\n          (error) => reject(error),\n          async () => {\n            const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);\n            resolve(downloadURL);\n          }\n        );\n      });\n    } else {\n      await uploadBytes(storageRef, file);\n      return await getDownloadURL(storageRef);\n    }\n  } catch (error) {\n    console.error('Error uploading profile image:', error);\n    throw error;\n  }\n};\n\n// Unlock badge function\nexport const unlockBadge = async (publicKey: string, badgeId: string): Promise<void> => {\n  try {\n    const profile = await getUserProfile(publicKey);\n    if (!profile) {\n      throw new Error('Profile not found');\n    }\n\n    const updatedBadges = profile.nftBadges.map(badge => {\n      if (badge.id === badgeId) {\n        return {\n          ...badge,\n          unlocked: true,\n          unlockedAt: Timestamp.now()\n        };\n      }\n      return badge;\n    });\n\n    await updateUserProfile(publicKey, { nftBadges: updatedBadges });\n  } catch (error) {\n    console.error('Error unlocking badge:', error);\n    throw error;\n  }\n};\n\n// Default NFT badges for new users\nexport const getDefaultNFTBadges = (): NFTBadge[] => [\n  {\n    id: 'first-lesson',\n    name: 'First Steps',\n    description: 'Complete your first Solana lesson',\n    imageUrl: '/badges/first-lesson.svg',\n    unlocked: false,\n    rarity: 'common'\n  },\n  {\n    id: 'cypherpunk-initiate',\n    name: 'Cypherpunk Initiate',\n    description: 'Learn the fundamentals of cypherpunk philosophy',\n    imageUrl: '/badges/cypherpunk-initiate.svg',\n    unlocked: false,\n    rarity: 'uncommon'\n  },\n  {\n    id: 'wallet-connected',\n    name: 'Wallet Master',\n    description: 'Successfully connect your Solana wallet',\n    imageUrl: '/badges/wallet-connected.svg',\n    unlocked: false,\n    rarity: 'common'\n  },\n  {\n    id: 'ranch-builder',\n    name: 'Ranch Builder',\n    description: 'Build your first structure in Shadow Ranch',\n    imageUrl: '/badges/ranch-builder.svg',\n    unlocked: false,\n    rarity: 'rare'\n  },\n  {\n    id: 'code-slinger',\n    name: 'Code Slinger',\n    description: 'Write and deploy your first Solana program',\n    imageUrl: '/badges/code-slinger.svg',\n    unlocked: false,\n    rarity: 'epic'\n  },\n  {\n    id: 'mindmap-explorer',\n    name: 'Mindmap Explorer',\n    description: 'Explore the full history of internet mindmap',\n    imageUrl: '/badges/mindmap-explorer.svg',\n    unlocked: false,\n    rarity: 'uncommon'\n  }\n];","size_bytes":7144},"client/src/lib/firestore-storage.ts":{"content":"import { \n  doc, getDoc, setDoc, addDoc, updateDoc, collection, query, where, getDocs, orderBy, Timestamp \n} from 'firebase/firestore';\nimport { db, COLLECTIONS } from './firebase';\nimport type { \n  User, Ranch, Lesson, UserProgress, Character, Building, RewardNft,\n  InsertUser, InsertRanch, InsertUserProgress, InsertCharacter, InsertBuilding, InsertRewardNft\n} from '@shared/schema';\n\nexport class FirestoreStorage {\n  // User operations\n  async getUser(userId: string): Promise<User | undefined> {\n    try {\n      const userDoc = await getDoc(doc(db, COLLECTIONS.USERS, userId));\n      return userDoc.exists() ? { id: userDoc.id, ...userDoc.data() } as User : undefined;\n    } catch (error) {\n      console.error('Error getting user:', error);\n      return undefined;\n    }\n  }\n\n  async createUser(userId: string, userData: Omit<InsertUser, 'id'>): Promise<User> {\n    try {\n      const user = {\n        id: userId,\n        ...userData,\n        createdAt: Timestamp.now()\n      };\n      await setDoc(doc(db, COLLECTIONS.USERS, userId), user);\n      return user as User;\n    } catch (error) {\n      console.error('Error creating user:', error);\n      throw error;\n    }\n  }\n\n  async updateUser(userId: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    try {\n      await updateDoc(doc(db, COLLECTIONS.USERS, userId), updates);\n      return this.getUser(userId);\n    } catch (error) {\n      console.error('Error updating user:', error);\n      return undefined;\n    }\n  }\n\n  // Ranch operations\n  async getRanch(userId: string): Promise<Ranch | undefined> {\n    try {\n      const ranchDoc = await getDoc(doc(db, COLLECTIONS.USERS, userId, COLLECTIONS.RANCHES, 'main'));\n      return ranchDoc.exists() ? { id: ranchDoc.id, ...ranchDoc.data() } as Ranch : undefined;\n    } catch (error) {\n      console.error('Error getting ranch:', error);\n      return undefined;\n    }\n  }\n\n  async createRanch(userId: string, ranchData: Omit<InsertRanch, 'id' | 'userId'>): Promise<Ranch> {\n    try {\n      const ranch = {\n        id: 'main',\n        userId,\n        ...ranchData,\n        createdAt: Timestamp.now()\n      };\n      await setDoc(doc(db, COLLECTIONS.USERS, userId, COLLECTIONS.RANCHES, 'main'), ranch);\n      return ranch as Ranch;\n    } catch (error) {\n      console.error('Error creating ranch:', error);\n      throw error;\n    }\n  }\n\n  async updateRanch(userId: string, updates: Partial<InsertRanch>): Promise<Ranch | undefined> {\n    try {\n      await updateDoc(doc(db, COLLECTIONS.USERS, userId, COLLECTIONS.RANCHES, 'main'), updates);\n      return this.getRanch(userId);\n    } catch (error) {\n      console.error('Error updating ranch:', error);\n      return undefined;\n    }\n  }\n\n  // User Progress operations\n  async getUserProgress(userId: string, lessonId: number): Promise<UserProgress | undefined> {\n    try {\n      const progressDoc = await getDoc(doc(db, COLLECTIONS.USERS, userId, COLLECTIONS.USER_PROGRESS, lessonId.toString()));\n      return progressDoc.exists() ? { id: progressDoc.id, ...progressDoc.data() } as UserProgress : undefined;\n    } catch (error) {\n      console.error('Error getting user progress:', error);\n      return undefined;\n    }\n  }\n\n  async getUserProgressByUserId(userId: string): Promise<UserProgress[]> {\n    try {\n      const progressQuery = query(collection(db, COLLECTIONS.USERS, userId, COLLECTIONS.USER_PROGRESS));\n      const snapshot = await getDocs(progressQuery);\n      return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as UserProgress));\n    } catch (error) {\n      console.error('Error getting user progress:', error);\n      return [];\n    }\n  }\n\n  async createUserProgress(userId: string, progressData: Omit<InsertUserProgress, 'id' | 'userId'>): Promise<UserProgress> {\n    try {\n      const progress = {\n        id: progressData.lessonId.toString(),\n        userId,\n        ...progressData,\n        lastAttemptAt: Timestamp.now()\n      };\n      await setDoc(doc(db, COLLECTIONS.USERS, userId, COLLECTIONS.USER_PROGRESS, progressData.lessonId.toString()), progress);\n      return progress as UserProgress;\n    } catch (error) {\n      console.error('Error creating user progress:', error);\n      throw error;\n    }\n  }\n\n  async updateUserProgress(userId: string, lessonId: number, updates: Partial<InsertUserProgress>): Promise<UserProgress | undefined> {\n    try {\n      const updateData = {\n        ...updates,\n        lastAttemptAt: Timestamp.now()\n      };\n      await updateDoc(doc(db, COLLECTIONS.USERS, userId, COLLECTIONS.USER_PROGRESS, lessonId.toString()), updateData);\n      return this.getUserProgress(userId, lessonId);\n    } catch (error) {\n      console.error('Error updating user progress:', error);\n      return undefined;\n    }\n  }\n\n  // Character operations\n  async getCharactersByUserId(userId: string): Promise<Character[]> {\n    try {\n      const charactersQuery = query(collection(db, COLLECTIONS.USERS, userId, COLLECTIONS.CHARACTERS));\n      const snapshot = await getDocs(charactersQuery);\n      return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Character));\n    } catch (error) {\n      console.error('Error getting characters:', error);\n      return [];\n    }\n  }\n\n  async createCharacter(userId: string, characterData: Omit<InsertCharacter, 'id'>): Promise<Character> {\n    try {\n      const character = {\n        ...characterData,\n        acquiredAt: Timestamp.now()\n      };\n      const docRef = await addDoc(collection(db, COLLECTIONS.USERS, userId, COLLECTIONS.CHARACTERS), character);\n      return { id: docRef.id, ...character } as Character;\n    } catch (error) {\n      console.error('Error creating character:', error);\n      throw error;\n    }\n  }\n\n  // Building operations\n  async getBuildingsByUserId(userId: string): Promise<Building[]> {\n    try {\n      const buildingsQuery = query(collection(db, COLLECTIONS.USERS, userId, COLLECTIONS.BUILDINGS));\n      const snapshot = await getDocs(buildingsQuery);\n      return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as Building));\n    } catch (error) {\n      console.error('Error getting buildings:', error);\n      return [];\n    }\n  }\n\n  async createBuilding(userId: string, buildingData: Omit<InsertBuilding, 'id'>): Promise<Building> {\n    try {\n      const building = {\n        ...buildingData,\n        builtAt: Timestamp.now()\n      };\n      const docRef = await addDoc(collection(db, COLLECTIONS.USERS, userId, COLLECTIONS.BUILDINGS), building);\n      return { id: docRef.id, ...building } as Building;\n    } catch (error) {\n      console.error('Error creating building:', error);\n      throw error;\n    }\n  }\n\n  // Reward NFT operations\n  async getRewardNftsByUserId(userId: string): Promise<RewardNft[]> {\n    try {\n      const rewardsQuery = query(\n        collection(db, COLLECTIONS.USERS, userId, COLLECTIONS.REWARD_NFTS),\n        orderBy('awardedAt', 'desc')\n      );\n      const snapshot = await getDocs(rewardsQuery);\n      return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() } as RewardNft));\n    } catch (error) {\n      console.error('Error getting reward NFTs:', error);\n      return [];\n    }\n  }\n\n  async createRewardNft(userId: string, rewardData: Omit<InsertRewardNft, 'id' | 'userId'>): Promise<RewardNft> {\n    try {\n      const reward = {\n        userId,\n        ...rewardData,\n        awardedAt: Timestamp.now()\n      };\n      const docRef = await addDoc(collection(db, COLLECTIONS.USERS, userId, COLLECTIONS.REWARD_NFTS), reward);\n      return { id: docRef.id, ...reward } as RewardNft;\n    } catch (error) {\n      console.error('Error creating reward NFT:', error);\n      throw error;\n    }\n  }\n\n  // Static lesson operations (lessons are global data)\n  async getAllLessons(): Promise<Lesson[]> {\n    try {\n      const lessonsQuery = query(collection(db, 'lessons'), orderBy('id'));\n      const snapshot = await getDocs(lessonsQuery);\n      return snapshot.docs.map(doc => ({ ...doc.data() } as Lesson));\n    } catch (error) {\n      console.error('Error getting lessons:', error);\n      return this.getDefaultLessons(); // Fallback to default lessons\n    }\n  }\n\n  async getLesson(id: number): Promise<Lesson | undefined> {\n    try {\n      const lessons = await this.getAllLessons();\n      return lessons.find(lesson => lesson.id === id);\n    } catch (error) {\n      console.error('Error getting lesson:', error);\n      return undefined;\n    }\n  }\n\n  private getDefaultLessons(): Lesson[] {\n    return [\n      {\n        id: 1,\n        title: \"Introduction to Rust\",\n        description: \"Learn the basics of Rust programming language\",\n        difficulty: \"Beginner\",\n        duration: \"30 minutes\",\n        reward: 100,\n        requiredLessons: [],\n        category: \"basics\",\n        steps: [\n          {\n            id: 1,\n            title: \"Hello World\",\n            narrative: \"Welcome to your first Rust program! Let's start with the classic 'Hello, World!' example.\",\n            instructions: [\n              \"Write a function called `main` that prints 'Hello, World!' to the console\",\n              \"Use the `println!` macro to print the message\"\n            ],\n            hints: [\n              \"The main function is the entry point of every Rust program\",\n              \"Use `println!` macro with double quotes for the string\"\n            ],\n            validationRules: [\n              {\n                type: \"contains\",\n                pattern: \"fn main()\",\n                message: \"You need to define a main function\",\n                required: true\n              },\n              {\n                type: \"contains\",\n                pattern: \"println!\",\n                message: \"Use the println! macro to print to console\",\n                required: true\n              },\n              {\n                type: \"contains\",\n                pattern: \"Hello, World!\",\n                message: \"Print 'Hello, World!' message\",\n                required: true\n              }\n            ],\n            starterCode: \"// Write your first Rust program here\\n\",\n            expectedOutput: \"Hello, World!\"\n          }\n        ]\n      }\n    ];\n  }\n}\n\nexport const firestoreStorage = new FirestoreStorage();","size_bytes":10151},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { type ClassValue, clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport function formatWalletAddress(address: string | null): string {\n  if (!address) return \"\";\n  return `${address.slice(0, 4)}...${address.slice(-4)}`;\n}\n\nexport function formatRanchCoin(amount: number): string {\n  return new Intl.NumberFormat().format(amount);\n}\n\nexport function getRarityColor(rarity: string): string {\n  switch (rarity.toLowerCase()) {\n    case \"common\":\n      return \"text-gray-400\";\n    case \"uncommon\":\n      return \"text-sage-400\";\n    case \"rare\":\n      return \"text-desert-400\";\n    case \"epic\":\n      return \"text-sunset-400\";\n    case \"legendary\":\n      return \"text-mystic-400\";\n    default:\n      return \"text-gray-400\";\n  }\n}\n\nexport function getRarityBorder(rarity: string): string {\n  switch (rarity.toLowerCase()) {\n    case \"common\":\n      return \"border-gray-400\";\n    case \"uncommon\":\n      return \"border-sage-400\";\n    case \"rare\":\n      return \"border-desert-400\";\n    case \"epic\":\n      return \"border-sunset-400\";\n    case \"legendary\":\n      return \"border-mystic-400\";\n    default:\n      return \"border-gray-400\";\n  }\n}\n\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","size_bytes":1348},"client/src/pages/CypherpunkModule1.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\nimport { BackButton } from \"@/components/ui/BackButton\";\nimport { TypewriterText } from \"@/components/ui/TypewriterText\";\nimport { usePageLoader } from \"@/hooks/use-page-loader\";\nimport { useCypherpunkProgress } from \"@/hooks/use-cypherpunk-progress\";\nimport { CryptoWarsTimeline } from \"@/components/cypherpunk/CryptoWarsTimeline\";\nimport { ManifestoQuiz } from \"@/components/cypherpunk/ManifestoQuiz\";\n\nexport default function CypherpunkModule1() {\n  const [, setLocation] = useLocation();\n  const [step, setStep] = useState(0);\n  const [terminalText, setTerminalText] = useState(\"\");\n  const [showNarrative, setShowNarrative] = useState(false);\n  const [showButton, setShowButton] = useState(false);\n  const { completeModule } = useCypherpunkProgress();\n  \n  usePageLoader();\n\n  // Terminal typing effect for intro\n  useEffect(() => {\n    if (step === 0) {\n      const text = \"> RUN GENESIS_ARCHIVE.EXE\";\n      let i = 0;\n      \n      const typeEffect = setInterval(() => {\n        if (i < text.length) {\n          setTerminalText(text.slice(0, i + 1));\n          i++;\n        } else {\n          clearInterval(typeEffect);\n          // Show narrative after typing completes\n          setTimeout(() => setShowNarrative(true), 1000);\n          // Show button after narrative appears\n          setTimeout(() => setShowButton(true), 3000);\n        }\n      }, 150);\n\n      return () => clearInterval(typeEffect);\n    }\n  }, [step]);\n\n  const handleNext = () => {\n    setStep(step + 1);\n  };\n\n  const handleQuizComplete = () => {\n    setTimeout(() => setStep(5), 1500);\n  };\n\n  const handleReturnToDashboard = () => {\n    completeModule(1);\n    setLocation('/lessons');\n  };\n\n  if (step === 0) {\n    // Intro Screen\n    return (\n      <>\n        <BackButton currentModule={1} />\n        <div className=\"min-h-screen bg-black flex items-center justify-center relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-900/10 to-purple-900/10\"></div>\n        \n        <div className=\"text-center z-10 max-w-4xl px-8\">\n          <div className=\"font-code text-cyan-400 text-xl mb-8\">\n            {terminalText}\n            <span className=\"animate-pulse\">|</span>\n          </div>\n          \n          {showNarrative && (\n            <div className=\"animate-fade-in\">\n              <p className=\"font-tech text-gray-300 text-lg leading-relaxed mb-8\">\n                What if your every digital whisper could be heard? What if your every transaction, \n                every message, every thought shared online was catalogued, analyzed, and stored forever? \n                In the shadows of the early internet, a group of digital rebels asked these very questions—\n                and decided to fight back with the most powerful weapon of all: code.\n              </p>\n            </div>\n          )}\n          \n          {showButton && (\n            <div className=\"animate-fade-in\">\n              <TechButton variant=\"accent\" size=\"lg\" onClick={handleNext}>\n                <span className=\"mr-2\">⚡</span>\n                BEGIN MISSION\n              </TechButton>\n            </div>\n          )}\n        </div>\n        </div>\n      </>\n    );\n  }\n\n  if (step === 1) {\n    // Chapter 1: The Digital Frontier\n    return (\n      <div className=\"min-h-screen bg-black py-20\">\n        <div className=\"container mx-auto px-4 max-w-4xl\">\n          <TechCard variant=\"cyan\" className=\"mb-8\">\n            <div className=\"p-8\">\n              <h1 className=\"font-space-gothic text-3xl text-cyan-400 mb-6\">Chapter 1: The Digital Frontier</h1>\n              \n              <div className=\"space-y-6 text-gray-300 leading-relaxed\">\n                <p>\n                  Before Bitcoin, before Ethereum, before the blockchain revolution took the world by storm, \n                  there existed a different kind of rebel—the Cypherpunk. These weren't your typical outlaws; \n                  they were mathematicians, programmers, and philosophers armed with cryptographic algorithms \n                  instead of six-shooters.\n                </p>\n                \n                <p>\n                  In the 1990s, as the internet began to take shape, these digital pioneers gathered in \n                  virtual spaces, sharing encrypted messages and debating the future of privacy, freedom, \n                  and democracy in the digital age. They believed that strong cryptography was not just \n                  a tool—it was a fundamental right.\n                </p>\n                \n                <p className=\"font-tech text-cyan-400 bg-cyan-500/10 p-4 rounded border-l-4 border-cyan-400\">\n                  \"Privacy is necessary for an open society in the electronic age... We cannot expect \n                  governments, corporations, or other large, faceless organizations to grant us privacy \n                  out of their beneficence.\"\n                </p>\n                \n                <p>\n                  This was their manifesto, their code of honor in the digital frontier.\n                </p>\n              </div>\n              \n              <div className=\"mt-8 flex justify-end\">\n                <TechButton variant=\"primary\" onClick={handleNext}>\n                  CONTINUE TO TIMELINE\n                  <span className=\"ml-2\">→</span>\n                </TechButton>\n              </div>\n            </div>\n          </TechCard>\n        </div>\n      </div>\n    );\n  }\n\n  if (step === 2) {\n    // Interactive Timeline\n    return (\n      <div className=\"min-h-screen bg-black py-20\">\n        <div className=\"container mx-auto px-4 max-w-6xl\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"font-space-gothic text-4xl text-cyan-400 mb-4\">The Crypto Wars Timeline</h1>\n            <p className=\"text-gray-400 font-tech\">Declassified: Key moments in the battle for digital freedom</p>\n          </div>\n          \n          <CryptoWarsTimeline onComplete={handleNext} />\n        </div>\n      </div>\n    );\n  }\n\n  if (step === 3) {\n    // Chapter 2: The Manifesto\n    return (\n      <div className=\"min-h-screen bg-black py-20\">\n        <div className=\"container mx-auto px-4 max-w-4xl\">\n          <TechCard variant=\"purple\" className=\"mb-8\">\n            <div className=\"p-8\">\n              <h1 className=\"font-space-gothic text-3xl text-purple-400 mb-6\">Chapter 2: A Cypherpunk's Manifesto</h1>\n              \n              <div className=\"space-y-6 text-gray-300 leading-relaxed\">\n                <p>\n                  On March 9, 1993, Eric Hughes published what would become the foundational document of \n                  the cypherpunk movement: \"A Cypherpunk's Manifesto.\" In it, he laid out the philosophical \n                  groundwork for everything that would follow—from PGP encryption to Bitcoin.\n                </p>\n                \n                <div className=\"bg-gray-800 p-6 rounded border-l-4 border-purple-400 font-code text-sm\">\n                  <p className=\"text-purple-400 mb-4\">[CLASSIFIED DOCUMENT - EYES ONLY]</p>\n                  <div className=\"mb-4 text-cyan-400\">\n                    <TypewriterText \n                      text=\"&quot;Privacy is not secrecy. A private matter is something one doesn't want the whole world to know, but a secret matter is something one doesn't want anybody to know. Privacy is the power to selectively reveal oneself to the world.&quot;\"\n                      speed={30}\n                      delay={500}\n                    />\n                  </div>\n                  <div className=\"text-cyan-400\">\n                    <TypewriterText \n                      text=\"&quot;Cypherpunks write code. We know that someone has to write software to defend privacy, and since we can't get privacy unless we all do, we're going to write it.&quot;\"\n                      speed={30}\n                      delay={4000}\n                    />\n                  </div>\n                </div>\n                \n                <p>\n                  This manifesto became the rallying cry for a generation of developers who would go on to \n                  create the tools and technologies that power today's decentralized web. They understood \n                  that code wasn't just instructions for computers—it was a form of political action.\n                </p>\n              </div>\n              \n              <div className=\"mt-8 flex justify-end\">\n                <TechButton variant=\"primary\" onClick={handleNext}>\n                  TEST YOUR KNOWLEDGE\n                  <span className=\"ml-2\">→</span>\n                </TechButton>\n              </div>\n            </div>\n          </TechCard>\n        </div>\n      </div>\n    );\n  }\n\n  if (step === 4) {\n    // Interactive Quiz\n    return (\n      <div className=\"min-h-screen bg-black py-20\">\n        <div className=\"container mx-auto px-4 max-w-4xl\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"font-space-gothic text-4xl text-cyan-400 mb-4\">Manifesto Quiz</h1>\n            <p className=\"text-gray-400 font-tech\">Prove your understanding of the cypherpunk philosophy</p>\n          </div>\n          \n          <ManifestoQuiz onComplete={handleQuizComplete} />\n        </div>\n      </div>\n    );\n  }\n\n  if (step === 5) {\n    // Completion Screen\n    return (\n      <div className=\"min-h-screen bg-black flex items-center justify-center\">\n        <div className=\"text-center max-w-2xl px-8\">\n          <div className=\"animate-pulse mb-8\">\n            <div className=\"w-32 h-32 bg-cyan-500/20 border border-cyan-400/30 rounded-full mx-auto flex items-center justify-center mb-6\">\n              <span className=\"text-4xl\">🛡️</span>\n            </div>\n          </div>\n          \n          <h1 className=\"font-titulo text-5xl text-cyan-400 mb-6\">\n            MISSION 1 COMPLETE\n          </h1>\n          \n          <div className=\"bg-cyan-500/10 border border-cyan-400/50 rounded-lg p-6 mb-8\">\n            <h2 className=\"font-space-gothic text-cyan-400 text-xl mb-4\">GENESIS BADGE ACQUIRED</h2>\n            <p className=\"text-gray-300\">\n              You've successfully completed \"The Genesis of a Movement\" and earned your first badge \n              in the Cypherpunk Legacy track. You now understand the philosophical foundations that \n              led to the blockchain revolution.\n            </p>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <TechButton variant=\"accent\" size=\"lg\" onClick={handleReturnToDashboard}>\n              <span className=\"mr-2\">🏠</span>\n              RETURN TO DASHBOARD\n            </TechButton>\n            \n            <p className=\"text-gray-400 text-sm font-code\">\n              Progress: 17% • Next: The Pillars of a Free Internet\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}","size_bytes":11027},"client/src/pages/CypherpunkModule2.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\nimport { BackButton } from \"@/components/ui/BackButton\";\nimport { usePageLoader } from \"@/hooks/use-page-loader\";\nimport { useCypherpunkProgress } from \"@/hooks/use-cypherpunk-progress\";\nimport { PrivacyScenario } from \"@/components/cypherpunk/PrivacyScenario\";\nimport { AnonymityGame } from \"@/components/cypherpunk/AnonymityGame\";\nimport { DecentralizationVisualization } from \"@/components/cypherpunk/DecentralizationVisualization\";\n\nexport default function CypherpunkModule2() {\n  const [, setLocation] = useLocation();\n  const [step, setStep] = useState(0);\n  const { completeModule } = useCypherpunkProgress();\n  \n  usePageLoader();\n\n  const handleNext = () => {\n    setStep(step + 1);\n  };\n\n  const handlePillarComplete = () => {\n    setStep(step + 1);\n  };\n\n  const handleModuleComplete = () => {\n    completeModule(2);\n    setLocation('/lessons');\n  };\n\n  if (step === 0) {\n    // Introduction Screen\n    return (\n      <>\n        <BackButton currentModule={2} />\n        <div className=\"min-h-screen bg-black py-20\">\n        <div className=\"container mx-auto px-4 max-w-4xl\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"font-titulo text-5xl text-cyan-400 mb-6\">\n              MODULE 2: THE PILLARS OF A FREE INTERNET\n            </h1>\n            <div className=\"w-24 h-1 bg-cyan-400 mx-auto mb-8\"></div>\n          </div>\n\n          <TechCard variant=\"cyan\" className=\"mb-8\">\n            <div className=\"p-8\">\n              <div className=\"space-y-6 text-gray-300 leading-relaxed\">\n                <p className=\"text-lg\">\n                  The cypherpunks didn't just dream of digital freedom—they identified the fundamental \n                  pillars that would support it. These technological and philosophical foundations became \n                  the blueprint for everything that followed.\n                </p>\n                \n                <div className=\"bg-cyan-500/10 border-l-4 border-cyan-400 p-6 rounded\">\n                  <h3 className=\"font-space-gothic text-cyan-400 text-lg mb-4\">The Four Pillars</h3>\n                  <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                    <div className=\"flex items-center\">\n                      <span className=\"w-2 h-2 bg-cyan-400 rounded-full mr-3\"></span>\n                      <span>Privacy Through Encryption</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <span className=\"w-2 h-2 bg-purple-400 rounded-full mr-3\"></span>\n                      <span>Anonymity Networks</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <span className=\"w-2 h-2 bg-cyan-400 rounded-full mr-3\"></span>\n                      <span>Decentralized Architecture</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <span className=\"w-2 h-2 bg-purple-400 rounded-full mr-3\"></span>\n                      <span>Resilient Networks</span>\n                    </div>\n                  </div>\n                </div>\n                \n                <p>\n                  Today, you'll experience these pillars firsthand through interactive scenarios that \n                  demonstrate why each one is crucial for digital freedom. Understanding these concepts \n                  is essential before we move into the technical implementation of blockchain systems.\n                </p>\n              </div>\n              \n              <div className=\"mt-8 flex justify-end\">\n                <TechButton variant=\"accent\" onClick={handleNext}>\n                  <span className=\"mr-2\">🏛️</span>\n                  EXPLORE THE PILLARS\n                </TechButton>\n              </div>\n            </div>\n          </TechCard>\n        </div>\n        </div>\n      </>\n    );\n  }\n\n  if (step === 1) {\n    // Pillar 1: Privacy Scenario\n    return (\n      <div className=\"min-h-screen bg-black py-20\">\n        <div className=\"container mx-auto px-4 max-w-5xl\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"font-space-gothic text-4xl text-cyan-400 mb-4\">PILLAR 1: PRIVACY THROUGH ENCRYPTION</h1>\n            <p className=\"text-gray-400 font-tech\">Real-world scenario simulation</p>\n          </div>\n          \n          <PrivacyScenario onComplete={handlePillarComplete} />\n        </div>\n      </div>\n    );\n  }\n\n  if (step === 2) {\n    // Pillar 2: Anonymity Game\n    return (\n      <div className=\"min-h-screen bg-black py-20\">\n        <div className=\"container mx-auto px-4 max-w-5xl\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"font-space-gothic text-4xl text-purple-400 mb-4\">PILLAR 2: ANONYMITY NETWORKS</h1>\n            <p className=\"text-gray-400 font-tech\">Interactive remailer demonstration</p>\n          </div>\n          \n          <AnonymityGame onComplete={handlePillarComplete} />\n        </div>\n      </div>\n    );\n  }\n\n  if (step === 3) {\n    // Pillar 3 & 4: Decentralization\n    return (\n      <div className=\"min-h-screen bg-gradient-to-b from-gray-900 to-tech-cyan-900 py-20\">\n        <div className=\"container mx-auto px-4 max-w-6xl\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"font-space-gothic text-4xl text-tech-cyan-400 mb-4\">PILLARS 3 & 4: DECENTRALIZATION & RESILIENCE</h1>\n            <p className=\"text-gray-400 font-tech\">Network architecture comparison</p>\n          </div>\n          \n          <DecentralizationVisualization onComplete={handlePillarComplete} />\n        </div>\n      </div>\n    );\n  }\n\n  if (step === 4) {\n    // Completion Screen\n    return (\n      <div className=\"min-h-screen bg-gradient-to-b from-gray-900 to-tech-purple-900 flex items-center justify-center\">\n        <div className=\"text-center max-w-2xl px-8\">\n          <div className=\"animate-pulse mb-8\">\n            <div className=\"w-32 h-32 bg-gradient-to-br from-tech-cyan-400 to-tech-purple-400 rounded-full mx-auto flex items-center justify-center mb-6\">\n              <span className=\"text-4xl\">🏛️</span>\n            </div>\n          </div>\n          \n          <h1 className=\"font-titulo text-5xl bg-gradient-to-r from-tech-cyan-400 to-tech-purple-400 bg-clip-text text-transparent mb-6\">\n            MISSION 2 COMPLETE\n          </h1>\n          \n          <div className=\"bg-tech-purple-900/30 border border-tech-purple-400/50 rounded-lg p-6 mb-8\">\n            <h2 className=\"font-space-gothic text-tech-purple-400 text-xl mb-4\">PILLARS BADGE ACQUIRED</h2>\n            <p className=\"text-gray-300\">\n              You've mastered the four foundational pillars of digital freedom: Privacy, Anonymity, \n              Decentralization, and Resilience. These principles guide all modern privacy-preserving \n              technologies including blockchain systems.\n            </p>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <TechButton variant=\"accent\" size=\"lg\" onClick={handleModuleComplete}>\n              <span className=\"mr-2\">🏠</span>\n              RETURN TO DASHBOARD\n            </TechButton>\n            \n            <p className=\"text-gray-400 text-sm font-code\">\n              Progress: 33% • Next: From Mailing List to Mainnet\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}","size_bytes":7528},"client/src/pages/CypherpunkModule3.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\nimport { BackButton } from \"@/components/ui/BackButton\";\nimport { usePageLoader } from \"@/hooks/use-page-loader\";\nimport { useCypherpunkProgress } from \"@/hooks/use-cypherpunk-progress\";\nimport { DoubleSpendProblem } from \"@/components/cypherpunk/DoubleSpendProblem\";\nimport { SatoshiMessage } from \"@/components/cypherpunk/SatoshiMessage\";\nimport { ConnectingTheDots } from \"@/components/cypherpunk/ConnectingTheDots\";\nimport { DAOHackDilemma } from \"@/components/cypherpunk/DAOHackDilemma\";\n\nexport default function CypherpunkModule3() {\n  const [, setLocation] = useLocation();\n  const [step, setStep] = useState(0);\n  const { completeModule } = useCypherpunkProgress();\n  \n  usePageLoader();\n\n  const handleNext = () => {\n    setStep(step + 1);\n  };\n\n  const handleComponentComplete = () => {\n    setStep(step + 1);\n  };\n\n  const handleModuleComplete = () => {\n    completeModule(3);\n    setLocation('/lessons');\n  };\n\n  if (step === 0) {\n    // Introduction Screen\n    return (\n      <>\n        <BackButton currentModule={3} />\n        <div className=\"min-h-screen bg-black py-20\">\n        <div className=\"container mx-auto px-4 max-w-4xl\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"font-titulo text-5xl text-cyan-400 mb-6\">\n              MODULE 3: FROM MAILING LIST TO MAINNET\n            </h1>\n            <div className=\"w-24 h-1 bg-cyan-400 mx-auto mb-8\"></div>\n          </div>\n\n          <TechCard variant=\"purple\" className=\"mb-8\">\n            <div className=\"p-8\">\n              <div className=\"space-y-6 text-gray-300 leading-relaxed\">\n                <p className=\"text-lg\">\n                  The cypherpunks laid the foundation, but one problem remained unsolved: \n                  how to create digital money without a central authority. The challenge seemed \n                  impossible until a mysterious figure emerged from the shadows.\n                </p>\n                \n                <div className=\"bg-purple-500/10 border-l-4 border-purple-400 p-6 rounded\">\n                  <h3 className=\"font-space-gothic text-purple-400 text-lg mb-4\">The Journey</h3>\n                  <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                    <div className=\"flex items-center\">\n                      <span className=\"w-2 h-2 bg-cyan-400 rounded-full mr-3\"></span>\n                      <span>The Double-Spend Problem</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <span className=\"w-2 h-2 bg-purple-400 rounded-full mr-3\"></span>\n                      <span>The Ghost in the Machine</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <span className=\"w-2 h-2 bg-cyan-400 rounded-full mr-3\"></span>\n                      <span>Connecting the Dots</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <span className=\"w-2 h-2 bg-purple-400 rounded-full mr-3\"></span>\n                      <span>The DAO Hack Dilemma</span>\n                    </div>\n                  </div>\n                </div>\n                \n                <p>\n                  This module reveals how cypherpunk principles evolved into the first successful \n                  cryptocurrency, and explores the philosophical challenges that emerged as these \n                  systems grew beyond their creators' original vision.\n                </p>\n              </div>\n              \n              <div className=\"mt-8 flex justify-end\">\n                <TechButton variant=\"accent\" onClick={handleNext}>\n                  <span className=\"mr-2\">🔗</span>\n                  TRACE THE CONNECTION\n                </TechButton>\n              </div>\n            </div>\n          </TechCard>\n        </div>\n        </div>\n      </>\n    );\n  }\n\n  if (step === 1) {\n    // Double-Spend Problem\n    return (\n      <div className=\"min-h-screen bg-black py-20\">\n        <div className=\"container mx-auto px-4 max-w-5xl\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"font-space-gothic text-4xl text-purple-400 mb-4\">THE DOUBLE-SPEND PROBLEM</h1>\n            <p className=\"text-gray-400 font-tech\">The core challenge of digital money</p>\n          </div>\n          \n          <DoubleSpendProblem onComplete={handleComponentComplete} />\n        </div>\n      </div>\n    );\n  }\n\n  if (step === 2) {\n    // Satoshi Message\n    return (\n      <div className=\"min-h-screen bg-black py-20\">\n        <div className=\"container mx-auto px-4 max-w-5xl\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"font-space-gothic text-4xl text-cyan-400 mb-4\">THE GHOST IN THE MACHINE</h1>\n            <p className=\"text-gray-400 font-tech\">October 31, 2008 • Cryptography Mailing List</p>\n          </div>\n          \n          <SatoshiMessage onComplete={handleComponentComplete} />\n        </div>\n      </div>\n    );\n  }\n\n  if (step === 3) {\n    // Connecting the Dots Game\n    return (\n      <div className=\"min-h-screen bg-gradient-to-b from-gray-900 to-tech-purple-900 py-20\">\n        <div className=\"container mx-auto px-4 max-w-6xl\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"font-space-gothic text-4xl text-tech-purple-400 mb-4\">CONNECTING THE DOTS</h1>\n            <p className=\"text-gray-400 font-tech\">Link cypherpunk concepts to Bitcoin features</p>\n          </div>\n          \n          <ConnectingTheDots onComplete={handleComponentComplete} />\n        </div>\n      </div>\n    );\n  }\n\n  if (step === 4) {\n    // DAO Hack Dilemma\n    return (\n      <div className=\"min-h-screen bg-gradient-to-b from-gray-900 to-tech-cyan-900 py-20\">\n        <div className=\"container mx-auto px-4 max-w-5xl\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"font-space-gothic text-4xl text-tech-cyan-400 mb-4\">THE DAO HACK DILEMMA</h1>\n            <p className=\"text-gray-400 font-tech\">When ideology meets reality</p>\n          </div>\n          \n          <DAOHackDilemma onComplete={handleComponentComplete} />\n        </div>\n      </div>\n    );\n  }\n\n  if (step === 5) {\n    // Completion Screen\n    return (\n      <div className=\"min-h-screen bg-gradient-to-b from-gray-900 to-tech-purple-900 flex items-center justify-center\">\n        <div className=\"text-center max-w-2xl px-8\">\n          <div className=\"animate-pulse mb-8\">\n            <div className=\"w-32 h-32 bg-gradient-to-br from-orange-400 to-tech-cyan-400 rounded-full mx-auto flex items-center justify-center mb-6\">\n              <span className=\"text-4xl\">₿</span>\n            </div>\n          </div>\n          \n          <h1 className=\"font-titulo text-5xl bg-gradient-to-r from-orange-400 to-tech-cyan-400 bg-clip-text text-transparent mb-6\">\n            MISSION 3 COMPLETE\n          </h1>\n          \n          <div className=\"bg-tech-purple-900/30 border border-tech-purple-400/50 rounded-lg p-6 mb-8\">\n            <h2 className=\"font-space-gothic text-tech-purple-400 text-xl mb-4\">BITCOIN GENESIS BADGE ACQUIRED</h2>\n            <p className=\"text-gray-300\">\n              You've traced the evolution from cypherpunk theory to Bitcoin implementation. \n              Understanding this connection reveals why blockchain technology embodies the \n              principles of digital freedom, privacy, and decentralization.\n            </p>\n          </div>\n          \n          <div className=\"space-y-4\">\n            <TechButton variant=\"accent\" size=\"lg\" onClick={handleModuleComplete}>\n              <span className=\"mr-2\">🏠</span>\n              RETURN TO DASHBOARD\n            </TechButton>\n            \n            <p className=\"text-gray-400 text-sm font-code\">\n              Progress: 50% • Next: Cryptographic Foundations\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}","size_bytes":8078},"client/src/pages/CypherpunkModule4.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\nimport { BackButton } from \"@/components/ui/BackButton\";\nimport { usePageLoader } from \"@/hooks/use-page-loader\";\nimport { useCypherpunkProgress } from \"@/hooks/use-cypherpunk-progress\";\nimport { Web2Montage } from \"@/components/cypherpunk/Web2Montage\";\nimport { PrincipledBuilder } from \"@/components/cypherpunk/PrincipledBuilder\";\n\nexport default function CypherpunkModule4() {\n  const [, setLocation] = useLocation();\n  const [step, setStep] = useState(0);\n  const { completeModule } = useCypherpunkProgress();\n  \n  usePageLoader();\n\n  const handleNext = () => {\n    setStep(step + 1);\n  };\n\n  const handleComponentComplete = () => {\n    setStep(step + 1);\n  };\n\n  const handleModuleComplete = () => {\n    completeModule(4);\n    setLocation('/lessons');\n  };\n\n  const handleBeginSolana = () => {\n    completeModule(4);\n    setLocation('/lessons');\n  };\n\n  if (step === 0) {\n    // Introduction Screen\n    return (\n      <>\n        <BackButton currentModule={4} />\n        <div className=\"min-h-screen bg-gradient-to-b from-gray-900 to-tech-purple-900 py-20\">\n        <div className=\"container mx-auto px-4 max-w-4xl\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"font-titulo text-5xl bg-gradient-to-r from-tech-purple-400 to-red-400 bg-clip-text text-transparent mb-6\">\n              MODULE 4: THE FIGHT FOR THE FUTURE\n            </h1>\n            <div className=\"w-24 h-1 bg-gradient-to-r from-tech-purple-400 to-red-400 mx-auto mb-8\"></div>\n          </div>\n\n          <TechCard variant=\"cyan\" className=\"mb-8\">\n            <div className=\"p-8\">\n              <div className=\"space-y-6 text-gray-300 leading-relaxed\">\n                <p className=\"text-lg\">\n                  The cypherpunks built the foundations. Bitcoin proved the concept. \n                  But as their vision became reality, new challenges emerged that they \n                  never anticipated.\n                </p>\n                \n                <div className=\"bg-red-900/20 border-l-4 border-red-400 p-6 rounded\">\n                  <h3 className=\"font-space-gothic text-red-400 text-lg mb-4\">The Current Battlefield</h3>\n                  <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                    <div className=\"flex items-center\">\n                      <span className=\"w-2 h-2 bg-red-400 rounded-full mr-3\"></span>\n                      <span>Surveillance Capitalism</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <span className=\"w-2 h-2 bg-tech-purple-400 rounded-full mr-3\"></span>\n                      <span>Platform Centralization</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <span className=\"w-2 h-2 bg-red-400 rounded-full mr-3\"></span>\n                      <span>Digital Censorship</span>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <span className=\"w-2 h-2 bg-tech-purple-400 rounded-full mr-3\"></span>\n                      <span>Ethical Dilemmas</span>\n                    </div>\n                  </div>\n                </div>\n                \n                <p>\n                  Today, you'll confront the reality of what we built versus what the \n                  cypherpunks envisioned. This final module challenges you to consider \n                  your role in shaping the future of digital freedom.\n                </p>\n              </div>\n              \n              <div className=\"mt-8 flex justify-end\">\n                <TechButton variant=\"accent\" onClick={handleNext}>\n                  <span className=\"mr-2\">⚔️</span>\n                  ENTER THE BATTLEFIELD\n                </TechButton>\n              </div>\n            </div>\n          </TechCard>\n        </div>\n        </div>\n      </>\n    );\n  }\n\n  if (step === 1) {\n    // Web2 Montage\n    return <Web2Montage onComplete={handleComponentComplete} />;\n  }\n\n  if (step === 2) {\n    // Principled Builder Dilemma\n    return (\n      <div className=\"min-h-screen bg-gradient-to-b from-gray-900 to-tech-cyan-900 py-20\">\n        <div className=\"container mx-auto px-4 max-w-5xl\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"font-space-gothic text-4xl text-tech-cyan-400 mb-4\">THE PRINCIPLED BUILDER</h1>\n            <p className=\"text-gray-400 font-tech\">When principles meet profit</p>\n          </div>\n          \n          <PrincipledBuilder onComplete={handleComponentComplete} />\n        </div>\n      </div>\n    );\n  }\n\n  if (step === 3) {\n    // Completion Screen with Solana CTA\n    return (\n      <div className=\"min-h-screen bg-gradient-to-b from-gray-900 via-tech-purple-900 to-green-900 flex items-center justify-center\">\n        <div className=\"text-center max-w-3xl px-8\">\n          <div className=\"animate-pulse mb-8\">\n            <div className=\"w-32 h-32 bg-gradient-to-br from-orange-400 to-tech-purple-400 rounded-full mx-auto flex items-center justify-center mb-6\">\n              <span className=\"text-4xl\">🔥</span>\n            </div>\n          </div>\n          \n          <h1 className=\"font-titulo text-5xl bg-gradient-to-r from-orange-400 to-tech-purple-400 bg-clip-text text-transparent mb-6\">\n            MISSION 4 COMPLETE\n          </h1>\n          \n          <div className=\"bg-tech-purple-900/30 border border-tech-purple-400/50 rounded-lg p-8 mb-8\">\n            <h2 className=\"font-space-gothic text-tech-purple-400 text-xl mb-4\">TORCHBEARER BADGE ACQUIRED</h2>\n            <p className=\"text-gray-300 leading-relaxed\">\n              You've journeyed through the complete cypherpunk legacy—from the philosophical foundations \n              to the technical implementations, from Bitcoin's creation to modern governance challenges. \n              You understand both the promise and the perils of our digital future.\n            </p>\n          </div>\n          \n          <div className=\"bg-gradient-to-r from-green-900/30 to-tech-cyan-900/30 border border-green-400/50 rounded-lg p-6 mb-8\">\n            <h3 className=\"font-space-gothic text-green-400 text-lg mb-3\">THE TORCH PASSES TO YOU</h3>\n            <p className=\"text-gray-300 text-sm\">\n              The cypherpunks gave us the tools. Now it's your turn to build the decentralized future. \n              Ready to learn the technical skills to make it reality?\n            </p>\n          </div>\n          \n          <div className=\"space-y-6\">\n            {/* Primary CTA - Solana Training */}\n            <div className=\"relative\">\n              <div className=\"absolute inset-0 bg-gradient-to-r from-green-400 to-tech-cyan-400 rounded-lg blur opacity-30 animate-pulse\"></div>\n              <TechButton \n                variant=\"accent\" \n                size=\"lg\" \n                onClick={handleBeginSolana}\n                className=\"relative bg-gradient-to-r from-green-600 to-tech-cyan-600 hover:from-green-500 hover:to-tech-cyan-500 text-white border-green-400 shadow-lg transform hover:scale-105 transition-all duration-300\"\n              >\n                <span className=\"mr-3 text-2xl\">⚡</span>\n                <span className=\"font-bold text-lg\">BEGIN SOLANA TRAINING</span>\n                <span className=\"ml-3 text-2xl\">⚡</span>\n              </TechButton>\n            </div>\n            \n            {/* Secondary option */}\n            <TechButton variant=\"secondary\" onClick={handleModuleComplete}>\n              <span className=\"mr-2\">🏠</span>\n              RETURN TO DASHBOARD\n            </TechButton>\n            \n            <p className=\"text-gray-400 text-sm font-code\">\n              Progress: 67% • Cypherpunk Legacy Track Complete\n            </p>\n            \n            <div className=\"mt-4 text-center\">\n              <p className=\"text-tech-cyan-400 text-xs font-code animate-pulse\">\n                Ready to build the future? Solana Corps of Engineers awaits...\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}","size_bytes":8225},"client/src/pages/CypherpunksEthos.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { Link } from \"wouter\";\nimport { TechButton } from \"@/components/ui/TechButton\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { usePageLoader } from \"@/hooks/use-page-loader\";\nimport { ChevronDown, ChevronUp } from \"lucide-react\";\n\ninterface Section {\n  id: string;\n  title: string;\n  shortTitle: string;\n  content: string;\n  variant: \"cyan\" | \"purple\";\n}\n\nconst sections: Section[] = [\n  {\n    id: \"foundation\",\n    title: \"A Foundation for Web3\",\n    shortTitle: \"Foundation\",\n    variant: \"cyan\",\n    content: \"The term \\\"Cypherpunk\\\" describes a collective of activists who, in the late 1980s and early 1990s, advocated for the widespread use of strong cryptography and privacy-enhancing technologies as a means to achieve social and political change. They believed that privacy was essential for a free society in the digital age, fearing that government surveillance and corporate control over information would erode civil liberties. Their motto, \\\"Cypherpunks write code,\\\" emphasized the importance of building tools rather than merely talking about problems.\"\n  },\n  {\n    id: \"pioneers\",\n    title: \"The Pioneers\",\n    shortTitle: \"Pioneers\",\n    variant: \"purple\",\n    content: \"Prominent figures like Eric Hughes, Timothy C. May, and John Gilmore formed informal groups, communicating primarily through mailing lists where they discussed ideas ranging from digital cash to anonymous communication systems. They foresaw many of the challenges that later emerged with the rise of the internet, including data exploitation, mass surveillance, and centralized control. Their radical proposals for cryptographic solutions were often dismissed as fringe ideas at the time, but many have since become fundamental components of modern digital infrastructure.\"\n  },\n  {\n    id: \"web3-connection\",\n    title: \"The Web3 Connection\",\n    shortTitle: \"Web3 Connection\",\n    variant: \"cyan\",\n    content: \"The Cypherpunk movement's enduring legacy is deeply intertwined with the very genesis of Web3. Concepts like decentralization, censorship resistance, digital identity, and peer-to-peer networks—core tenets of blockchain technology and Web3—can be traced directly back to their early manifestos and experiments. Bitcoin, for instance, is often seen as the culmination of the Cypherpunks' vision for digital cash, providing a way for individuals to transact without intermediaries or centralized control.\"\n  },\n  {\n    id: \"building-future\",\n    title: \"Building the Future\",\n    shortTitle: \"Building Future\",\n    variant: \"purple\",\n    content: \"For Web3 builders today, understanding the Cypherpunk ethos isn't just a historical curiosity; it's a moral imperative. It reminds us that the primary goal isn't just about building new financial instruments or decentralized applications, but about fundamentally re-architecting the internet to empower users, protect privacy, and resist centralization. Embracing this original spirit means focusing on open-source, community-driven development, ensuring true user ownership of data and digital assets, and maintaining the decentralized principles that make Web3 transformative.\"\n  }\n];\n\nexport default function CypherpunksEthos() {\n  usePageLoader();\n\n  // State management\n  const [activeSection, setActiveSection] = useState<string>(\"foundation\");\n  const [activeTab, setActiveTab] = useState<string>(\"foundation\");\n  const [showStickyNav, setShowStickyNav] = useState(false);\n  const [isVideoPlaying, setIsVideoPlaying] = useState(false);\n  const [videoLoaded, setVideoLoaded] = useState(false);\n  const [isMobile, setIsMobile] = useState(false);\n  const [expandedAccordions, setExpandedAccordions] = useState<Set<string>>(new Set([\"foundation\"]));\n\n  // Refs\n  const videoRef = useRef<HTMLIFrameElement>(null);\n  const heroRef = useRef<HTMLDivElement>(null);\n  const sectionRefs = useRef<{ [key: string]: HTMLDivElement | null }>({});\n  const tabNavRef = useRef<HTMLDivElement>(null);\n\n  // Check if mobile on mount and resize\n  useEffect(() => {\n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n    \n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    return () => window.removeEventListener('resize', checkMobile);\n  }, []);\n\n  // Intersection Observer for sticky navigation and active section tracking\n  useEffect(() => {\n    const observerOptions = {\n      rootMargin: '-20% 0px -60% 0px',\n      threshold: 0.1\n    };\n\n    const sectionObserver = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          setActiveSection(entry.target.id);\n          if (!isMobile) {\n            setActiveTab(entry.target.id);\n          }\n        }\n      });\n    }, observerOptions);\n\n    // Observe all sections\n    Object.values(sectionRefs.current).forEach((ref) => {\n      if (ref) sectionObserver.observe(ref);\n    });\n\n    // Observer for sticky navigation visibility\n    const heroObserver = new IntersectionObserver(\n      ([entry]) => {\n        setShowStickyNav(!entry.isIntersecting);\n      },\n      { threshold: 0.1 }\n    );\n\n    if (heroRef.current) {\n      heroObserver.observe(heroRef.current);\n    }\n\n    return () => {\n      sectionObserver.disconnect();\n      heroObserver.disconnect();\n    };\n  }, [isMobile]);\n\n  // Handle tab click\n  const handleTabClick = (sectionId: string) => {\n    setActiveTab(sectionId);\n    \n    if (isMobile) {\n      // For mobile: expand accordion and scroll to it\n      setExpandedAccordions(prev => new Set(Array.from(prev).concat(sectionId)));\n      setTimeout(() => {\n        scrollToSection(sectionId);\n      }, 150); // Allow accordion to expand first\n    } else {\n      // For desktop: just scroll to section\n      scrollToSection(sectionId);\n    }\n  };\n\n  // Toggle accordion (mobile only)\n  const toggleAccordion = (sectionId: string) => {\n    if (!isMobile) return;\n    \n    setExpandedAccordions(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sectionId)) {\n        newSet.delete(sectionId);\n      } else {\n        newSet.add(sectionId);\n      }\n      return newSet;\n    });\n  };\n\n  // Smooth scroll to section\n  const scrollToSection = (sectionId: string) => {\n    const element = sectionRefs.current[sectionId];\n    if (element) {\n      const offsetTop = isMobile ? 160 : 120; // Account for sticky nav height\n      const elementPosition = element.offsetTop - offsetTop;\n      \n      window.scrollTo({\n        top: elementPosition,\n        behavior: 'smooth'\n      });\n    }\n  };\n\n  // Video play handler\n  const handleVideoPlay = () => {\n    setIsVideoPlaying(true);\n    if (videoRef.current) {\n      const currentSrc = videoRef.current.src;\n      videoRef.current.src = currentSrc.replace('&autoplay=0', '&autoplay=1');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black text-gray-100\">\n      {/* Sticky Navigation */}\n      <div className={`fixed top-16 left-0 right-0 z-40 transition-all duration-300 ${\n        showStickyNav ? 'translate-y-0 opacity-100' : '-translate-y-full opacity-0'\n      }`}>\n        <div className=\"bg-black/95 backdrop-blur-md border-b border-cyan-400/20\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"flex items-center justify-between py-3\">\n              <span className=\"font-space-gothic text-cyan-400 text-sm hidden sm:block\">\n                CYPHERPUNK ETHOS\n              </span>\n              \n              {/* Desktop Navigation */}\n              <nav className=\"hidden md:flex items-center space-x-6\">\n                {sections.map((section) => (\n                  <button\n                    key={section.id}\n                    onClick={() => handleTabClick(section.id)}\n                    className={`font-mono text-sm uppercase tracking-wider transition-colors px-3 py-2 rounded ${\n                      activeTab === section.id\n                        ? 'text-cyan-400 bg-cyan-400/10'\n                        : 'text-gray-400 hover:text-cyan-400'\n                    }`}\n                  >\n                    {section.shortTitle}\n                  </button>\n                ))}\n              </nav>\n\n              {/* Mobile Navigation - Horizontal Scroll Tabs */}\n              <nav className=\"md:hidden flex items-center space-x-2 ethos-nav-scroll overflow-x-auto pb-1 w-full\">\n                {sections.map((section) => (\n                  <button\n                    key={section.id}\n                    onClick={() => handleTabClick(section.id)}\n                    className={`font-mono text-xs uppercase tracking-wider transition-all px-3 py-2 rounded-full whitespace-nowrap border ${\n                      activeTab === section.id\n                        ? 'text-cyan-400 bg-cyan-400/10 border-cyan-400/50'\n                        : 'text-gray-400 hover:text-cyan-400 border-gray-600/50 hover:border-cyan-400/30'\n                    }`}\n                  >\n                    {section.shortTitle}\n                  </button>\n                ))}\n              </nav>\n\n              {/* Progress Indicator */}\n              <div className=\"w-20 sm:w-32 bg-gray-700 rounded-full h-1 hidden sm:block\">\n                <div \n                  className=\"bg-gradient-to-r from-cyan-400 to-purple-400 h-1 rounded-full transition-all duration-300\"\n                  style={{ \n                    width: `${((sections.findIndex(s => s.id === activeTab) + 1) / sections.length) * 100}%` \n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 ethos-container\">\n        {/* Hero Section */}\n        <div ref={heroRef} className=\"py-12 sm:py-20\">\n          {/* Header with back button */}\n          <div className=\"mb-8 sm:mb-12\">\n            <Link href=\"/\">\n              <TechButton variant=\"secondary\" className=\"mb-6\">\n                ← Back to Ranch\n              </TechButton>\n            </Link>\n            \n            <h1 className=\"text-4xl sm:text-5xl md:text-6xl font-bold text-center text-cyan-400 font-space-gothic mb-4\">\n              the cypherpunk ethos\n            </h1>\n            <p className=\"text-center text-gray-400 font-mono text-sm sm:text-base\">\n              Understanding the philosophical foundation of Web3\n            </p>\n          </div>\n\n          {/* Video Section */}\n          <div className=\"relative aspect-video w-full mb-8 sm:mb-12 rounded-lg overflow-hidden shadow-xl border border-cyan-400/20 group\">\n            {!isVideoPlaying && (\n              <div className=\"absolute inset-0 z-10 flex items-center justify-center bg-black/50 cursor-pointer ethos-video-overlay transition-colors\"\n                   onClick={handleVideoPlay}>\n                <div className=\"w-20 h-20 sm:w-24 sm:h-24 bg-cyan-500/20 border-2 border-cyan-400 rounded-full flex items-center justify-center hover:bg-cyan-500/30 ethos-play-button transition-all\">\n                  <svg className=\"w-8 h-8 sm:w-10 sm:h-10 text-cyan-400 ml-1\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M8 5v14l11-7z\"/>\n                  </svg>\n                </div>\n                <div className=\"absolute bottom-4 left-4 right-4 text-center\">\n                  <p className=\"text-cyan-400 font-mono text-sm\">Click to play: The Cypherpunk Philosophy</p>\n                </div>\n              </div>\n            )}\n            \n            <iframe\n              ref={videoRef}\n              className=\"absolute top-0 left-0 w-full h-full\"\n              src=\"https://www.youtube.com/embed/-U9KE2w8-L0?si=WBOgFkKFaCh0b8MZ\"\n              title=\"The Cypherpunk Philosophy\"\n              frameBorder=\"0\"\n              allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\n              referrerPolicy=\"strict-origin-when-cross-origin\"\n              allowFullScreen\n              onLoad={() => setVideoLoaded(true)}\n            />\n          </div>\n\n          {/* Mobile Tab Navigation Below Video */}\n          {isMobile && (\n            <div ref={tabNavRef} className=\"mb-6 sticky top-16 z-30 bg-black/95 backdrop-blur-md py-3 -mx-4 px-4\">\n              <div className=\"flex items-center space-x-2 overflow-x-auto pb-2\">\n                {sections.map((section, index) => (\n                  <button\n                    key={section.id}\n                    onClick={() => handleTabClick(section.id)}\n                    className={`font-mono text-sm uppercase tracking-wider transition-all px-4 py-2 rounded-lg whitespace-nowrap border-2 min-h-[44px] ${\n                      activeTab === section.id\n                        ? 'text-cyan-400 bg-cyan-400/10 border-cyan-400/50 shadow-lg shadow-cyan-400/20'\n                        : 'text-gray-400 hover:text-cyan-400 border-gray-600/50 hover:border-cyan-400/30'\n                    }`}\n                  >\n                    <span className=\"mr-2\">{index + 1}</span>\n                    {section.shortTitle}\n                  </button>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Content Sections */}\n        <div className={isMobile ? \"space-y-4\" : \"space-y-8 sm:space-y-12\"}>\n          {sections.map((section, index) => {\n            const isExpanded = expandedAccordions.has(section.id);\n            const isActive = activeTab === section.id;\n            \n            return (\n              <section\n                key={section.id}\n                id={section.id}\n                ref={el => { sectionRefs.current[section.id] = el as HTMLDivElement; }}\n                className=\"scroll-mt-32\"\n              >\n                {isMobile ? (\n                  // Mobile: Accordion Style\n                  <div className={`border border-gray-700/50 rounded-lg overflow-hidden transition-all duration-300 ${\n                    isActive ? 'border-cyan-400/50 shadow-lg shadow-cyan-400/10' : ''\n                  }`}>\n                    {/* Accordion Header */}\n                    <button\n                      onClick={() => toggleAccordion(section.id)}\n                      className={`w-full px-4 py-4 text-left flex items-center justify-between transition-colors min-h-[60px] ${\n                        section.variant === 'cyan' \n                          ? 'bg-gray-900/50 hover:bg-gray-800/50' \n                          : 'bg-gray-900/50 hover:bg-gray-800/50'\n                      }`}\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <div className={`w-8 h-8 rounded-full border-2 flex items-center justify-center font-space-gothic text-sm ${\n                          section.variant === 'cyan' \n                            ? 'border-cyan-400 text-cyan-400' \n                            : 'border-purple-400 text-purple-400'\n                        }`}>\n                          {index + 1}\n                        </div>\n                        <h2 className={`text-lg font-bold font-space-gothic ${\n                          section.variant === 'cyan' ? 'text-cyan-400' : 'text-purple-400'\n                        }`}>\n                          {section.title}\n                        </h2>\n                      </div>\n                      <div className={`transition-transform duration-200 ${\n                        isExpanded ? 'rotate-180' : ''\n                      }`}>\n                        <ChevronDown className=\"w-5 h-5 text-gray-400\" />\n                      </div>\n                    </button>\n                    \n                    {/* Accordion Content */}\n                    <div className={`transition-all duration-300 ease-in-out overflow-hidden ${\n                      isExpanded ? 'max-h-[1000px] opacity-100' : 'max-h-0 opacity-0'\n                    }`}>\n                      <div className=\"p-4 pt-0\">\n                        <p className=\"text-gray-300 text-sm leading-relaxed font-mono\">\n                          {section.content}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ) : (\n                  // Desktop: Card Style\n                  <TechCard \n                    variant={section.variant} \n                    className={`transition-all duration-500 ${\n                      activeSection === section.id \n                        ? 'ring-2 ring-cyan-400/50 shadow-lg shadow-cyan-400/10' \n                        : ''\n                    }`}\n                  >\n                    <div className=\"p-6 sm:p-8\">\n                      <div className=\"flex items-start space-x-4\">\n                        {/* Section Number */}\n                        <div className={`flex-shrink-0 w-10 h-10 sm:w-12 sm:h-12 rounded-full border-2 flex items-center justify-center font-space-gothic text-sm sm:text-base ${\n                          section.variant === 'cyan' \n                            ? 'border-cyan-400 text-cyan-400' \n                            : 'border-purple-400 text-purple-400'\n                        }`}>\n                          {index + 1}\n                        </div>\n                        \n                        {/* Content */}\n                        <div className=\"flex-1 min-w-0\">\n                          <h2 className={`text-xl sm:text-2xl font-bold mb-4 font-space-gothic ${\n                            section.variant === 'cyan' ? 'text-cyan-400' : 'text-purple-400'\n                          }`}>\n                            {section.title}\n                          </h2>\n                          <p className=\"text-gray-300 text-sm sm:text-base leading-relaxed font-mono\">\n                            {section.content}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </TechCard>\n                )}\n              </section>\n            );\n          })}\n        </div>\n\n        {/* Quote Section */}\n        <div className=\"my-12 sm:my-16\">\n          <TechCard variant=\"cyan\" className=\"text-center\">\n            <div className=\"p-6 sm:p-8 lg:p-12\">\n              <div className=\"max-w-3xl mx-auto\">\n                <blockquote className=\"text-2xl sm:text-3xl lg:text-4xl font-bold text-cyan-400 mb-4 font-space-gothic\">\n                  \"Cypherpunks write code.\"\n                </blockquote>\n                <p className=\"text-gray-400 italic text-sm sm:text-base\">\n                  The foundation principle that drives our mission at Shadow Ranch\n                </p>\n              </div>\n            </div>\n          </TechCard>\n        </div>\n\n        {/* Call to Action */}\n        <div className=\"text-center pb-12 sm:pb-20\">\n          <Link href=\"/lessons\">\n            <TechButton variant=\"accent\" size=\"lg\" className=\"group min-h-[56px]\">\n              Start Your Cypherpunk Journey\n            </TechButton>\n          </Link>\n          <p className=\"text-gray-400 font-mono text-xs sm:text-sm mt-4\">\n            Begin your transformation from observer to builder\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":19212},"client/src/pages/Home.tsx":{"content":"import { Link } from \"wouter\";\nimport { WesternButton } from \"@/components/ui/WesternButton\";\nimport { WesternCard } from \"@/components/ui/WesternCard\";\nimport { TypewriterText } from \"@/components/ui/TypewriterText\";\nimport DecryptedText from \"@/components/ui/DecryptedText\";\nimport LetterGlitch from \"@/components/ui/LetterGlitch\";\nimport { useGameStore } from \"@/hooks/use-game-store\";\nimport { formatRanchCoin } from \"@/lib/utils\";\nimport { usePageLoader } from \"@/hooks/use-page-loader\";\n\nexport default function Home() {\n  const { ranchData } = useGameStore();\n  usePageLoader();\n\n  return (\n    <div>\n      {/* Hero Section */}\n      <section className=\"min-h-screen flex items-center justify-center relative overflow-hidden\">\n        {/* Background sparkle effects */}\n        <div className=\"absolute inset-0 opacity-30\">\n          <div className=\"sparkle-effect\" style={{ top: '20%', left: '10%', animationDelay: '0s' }} />\n          <div className=\"sparkle-effect\" style={{ top: '60%', left: '80%', animationDelay: '0.5s' }} />\n          <div className=\"sparkle-effect\" style={{ top: '40%', left: '30%', animationDelay: '1s' }} />\n          <div className=\"sparkle-effect\" style={{ top: '80%', left: '60%', animationDelay: '1.5s' }} />\n        </div>\n        \n        <div className=\"container mx-auto px-4 text-center relative z-10\">\n          <div className=\"animate-fade-in\">\n            <div className=\"mb-8 flex justify-center\">\n              <img \n                src=\"/shadow-ranch-logo.png\" \n                alt=\"@shadow ranch.xyz\" \n                className=\"h-24 md:h-32 lg:h-40 w-auto animate-glow-pulse\"\n              />\n            </div>\n            <h1 className=\"font-space-gothic text-4xl md:text-6xl text-desert-400 mb-6 font-bold tracking-wider\">welcome to shadow ranch</h1>\n            <p className=\"font-deputy md:text-2xl text-gray-300 mb-8 max-w-3xl mx-auto text-[22px] font-medium\">\n              <TypewriterText \n                text=\"Learn to write Solana Programs through gamified challenges. Cypherpunks write code.\"\n                speed={60}\n                delay={1000}\n              />\n            </p>\n            <div className=\"flex flex-col md:flex-row gap-4 justify-center items-center\">\n              <Link href=\"/cypherpunks-ethos\">\n                <WesternButton variant=\"primary\" className=\"text-lg bg-gradient-to-r from-tech-cyan-600 to-tech-purple-600 hover:from-tech-cyan-500 hover:to-tech-purple-500\">\n                  <i className=\"fas fa-shield-alt mr-2\" />\n                  Learn the Ethos\n                </WesternButton>\n              </Link>\n              <Link href=\"/lessons\">\n                <WesternButton variant=\"secondary\" className=\"text-lg\">\n                  <i className=\"fas fa-code mr-2\" />\n                  Start Coding\n                </WesternButton>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n      {/* Features Section */}\n      <section className=\"py-20 bg-gradient-to-b from-gray-900 to-gray-800\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"font-western text-4xl md:text-5xl text-sunset-400 mb-6\">Why Choose Shadow Ranch?</h2>\n            <p className=\"font-deputy text-lg text-gray-300 max-w-2xl mx-auto\">\n              Experience the most immersive way to learn blockchain development\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <WesternCard className=\"p-6 hover:scale-105 transition-transform duration-200 animate-slide-up\">\n              <div className=\"text-center\">\n                <i className=\"fas fa-code text-4xl text-desert-400 mb-4\" />\n                <h3 className=\"font-space-gothic text-xl text-desert-400 mb-3\">Interactive Coding</h3>\n                <p className=\"text-gray-300 font-mono text-sm\">\n                  Learn by doing with our interactive code editor and real-time feedback system.\n                </p>\n              </div>\n            </WesternCard>\n\n            <WesternCard className=\"p-6 hover:scale-105 transition-transform duration-200 animate-slide-up\">\n              <div className=\"text-center\">\n                <i className=\"fas fa-gamepad text-4xl text-sage-400 mb-4\" />\n                <h3 className=\"font-space-gothic text-xl text-sage-400 mb-3\">Gamified Learning</h3>\n                <p className=\"text-gray-300 font-mono text-sm\">\n                  Build your virtual ranch, collect characters, and earn rewards as you progress.\n                </p>\n              </div>\n            </WesternCard>\n\n            <WesternCard className=\"p-6 hover:scale-105 transition-transform duration-200 animate-slide-up\">\n              <div className=\"text-center\">\n                <i className=\"fas fa-graduation-cap text-4xl text-sunset-400 mb-4\" />\n                <h3 className=\"font-space-gothic text-xl text-sunset-400 mb-3\">Expert Curriculum</h3>\n                <p className=\"text-gray-300 font-mono text-sm\">Learn the principles crypto was built on through carefully crafted lessons and challenges.</p>\n              </div>\n            </WesternCard>\n          </div>\n        </div>\n      </section>\n      {/* Letter Glitch Background Section */}\n      <section className=\"relative w-full h-96 overflow-hidden\">\n        <LetterGlitch\n          glitchSpeed={50}\n          centerVignette={true}\n          outerVignette={false}\n          smooth={true}\n        />\n        \n      </section>\n      {/* Cypherpunk Blueprint Section */}\n      <section className=\"py-16 bg-gray-900 text-white text-center rounded-xl mx-auto max-w-4xl mt-12 px-6\">\n        <h2 className=\"text-5xl font-extrabold mb-6\">\n          <DecryptedText\n            text=\"The Cypherpunk Blueprint\"\n            animateOn=\"view\"\n            revealDirection=\"center\"\n            speed={100}\n            sequential={true}\n            characters=\"01!@#$%^&*()_+\"\n            className=\"text-indigo-400\"\n            parentClassName=\"block\"\n          />\n        </h2>\n        <p className=\"text-xl leading-relaxed text-gray-300 mb-8\">\n          Don't just code; create movements. Learn the foundational ethos that drives meaningful software and redefine what's possible on the internet.\n        </p>\n        <div className=\"flex justify-center\">\n          <Link href=\"/cypherpunks-ethos\">\n            <WesternButton variant=\"primary\" className=\"bg-gradient-to-r from-tech-cyan-600 to-tech-purple-600 hover:from-tech-cyan-500 hover:to-tech-purple-500\">\n              <i className=\"fas fa-shield-alt mr-2\" />\n              Explore the Ethos\n            </WesternButton>\n          </Link>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":6715},"client/src/pages/HomeMobile.tsx":{"content":"import { Link } from \"wouter\";\nimport { TechButton } from \"@/components/ui/TechButton\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TypewriterText } from \"@/components/ui/TypewriterText\";\nimport { useGameStore } from \"@/hooks/use-game-store\";\nimport { formatRanchCoin } from \"@/lib/utils\";\nimport { usePageLoader } from \"@/hooks/use-page-loader\";\n\nexport default function HomeMobile() {\n  const { ranchData } = useGameStore();\n  usePageLoader();\n\n  return (\n    <div className=\"space-y-8 sm:space-y-12\">\n      {/* Mobile-first Hero Section */}\n      <section className=\"min-h-[80vh] flex items-center justify-center relative px-4\">\n        {/* Background sparkle effects - reduced for mobile */}\n        <div className=\"absolute inset-0 opacity-20\">\n          <div className=\"sparkle-effect\" style={{ top: '20%', left: '10%', animationDelay: '0s' }} />\n          <div className=\"sparkle-effect\" style={{ top: '60%', left: '80%', animationDelay: '1s' }} />\n          <div className=\"sparkle-effect\" style={{ top: '40%', left: '30%', animationDelay: '2s' }} />\n        </div>\n        \n        <div className=\"text-center relative z-10 max-w-md sm:max-w-2xl mx-auto\">\n          <div className=\"animate-fade-in space-y-6 sm:space-y-8\">\n            <h1 className=\"font-space-gothic text-mobile-3xl sm:text-4xl md:text-6xl lg:text-8xl text-cyan-400 font-bold tracking-wider leading-tight\">\n              welcome to shadow ranch\n            </h1>\n            <p className=\"text-mobile-base sm:text-mobile-lg md:text-xl text-gray-300 leading-relaxed\">\n              <TypewriterText \n                text=\"Learn to write Solana Programs through gamified challenges. Cypherpunks write code.\"\n                speed={60}\n                delay={1000}\n              />\n            </p>\n            <div className=\"flex flex-col space-y-4 sm:flex-row sm:space-y-0 sm:space-x-4 sm:justify-center\">\n              <Link href=\"/cypherpunks-ethos\">\n                <TechButton variant=\"primary\" size=\"lg\" className=\"w-full sm:w-auto bg-cyan-500 hover:bg-cyan-400 border-cyan-400 text-black font-bold\">\n                  <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M2.166 4.999A11.954 11.954 0 0010 1.944 11.954 11.954 0 0017.834 5c.11.65.166 1.32.166 2.001 0 5.225-3.34 9.67-8 11.317C5.34 16.67 2 12.225 2 7c0-.682.057-1.35.166-2.001zm11.541 3.708a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\n                  </svg>\n                  Learn the Ethos\n                </TechButton>\n              </Link>\n              <Link href=\"/lessons\">\n                <TechButton variant=\"secondary\" size=\"lg\" className=\"w-full sm:w-auto bg-gray-800 hover:bg-gray-700 border-gray-600 text-cyan-400\">\n                  <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path fillRule=\"evenodd\" d=\"M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n                  </svg>\n                  Start Coding\n                </TechButton>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Mobile-optimized Features Section */}\n      <section className=\"py-8 sm:py-12 lg:py-20\">\n        <div className=\"space-y-8 sm:space-y-12\">\n          <div className=\"text-center space-y-4\">\n            <h2 className=\"font-space-gothic text-mobile-2xl sm:text-3xl md:text-4xl lg:text-5xl text-cyan-400\">\n              Why Choose Shadow Ranch?\n            </h2>\n            <p className=\"text-mobile-base sm:text-mobile-lg text-gray-300 max-w-xl mx-auto px-4\">\n              Experience the most immersive way to learn blockchain development\n            </p>\n          </div>\n\n          <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-3\">\n            <TechCard variant=\"cyan\" className=\"hover:scale-105 transition-transform duration-200 animate-slide-up bg-gray-900/50 border-cyan-400/30\">\n              <div className=\"text-center space-y-4\">\n                <svg className=\"w-12 h-12 text-cyan-400 mx-auto\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M12.316 3.051a1 1 0 01.633 1.265l-4 12a1 1 0 11-1.898-.632l4-12a1 1 0 011.265-.633zM5.707 6.293a1 1 0 010 1.414L3.414 10l2.293 2.293a1 1 0 11-1.414 1.414l-3-3a1 1 0 010-1.414l3-3a1 1 0 011.414 0zm8.586 0a1 1 0 011.414 0l3 3a1 1 0 010 1.414l-3 3a1 1 0 11-1.414-1.414L16.586 10l-2.293-2.293a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n                </svg>\n                <h3 className=\"font-mono text-mobile-xl text-cyan-400 font-bold\">Interactive Coding</h3>\n                <p className=\"text-gray-300 text-mobile-sm leading-relaxed\">\n                  Learn by doing with our interactive code editor and real-time feedback system.\n                </p>\n              </div>\n            </TechCard>\n\n            <TechCard variant=\"purple\" className=\"hover:scale-105 transition-transform duration-200 animate-slide-up bg-gray-900/50 border-purple-400/30\">\n              <div className=\"text-center space-y-4\">\n                <svg className=\"w-12 h-12 text-purple-400 mx-auto\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"/>\n                </svg>\n                <h3 className=\"font-mono text-mobile-xl text-purple-400 font-bold\">NFT Rewards</h3>\n                <p className=\"text-gray-300 text-mobile-sm leading-relaxed\">\n                  Earn unique NFT certificates as you complete challenges and master new concepts.\n                </p>\n              </div>\n            </TechCard>\n\n            <TechCard variant=\"neutral\" className=\"hover:scale-105 transition-transform duration-200 animate-slide-up sm:col-span-2 lg:col-span-1 bg-gray-900/50 border-gray-600/30\">\n              <div className=\"text-center space-y-4\">\n                <svg className=\"w-12 h-12 text-cyan-400 mx-auto\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" clipRule=\"evenodd\" />\n                </svg>\n                <h3 className=\"font-mono text-mobile-xl text-cyan-400 font-bold\">Gamified Learning</h3>\n                <p className=\"text-gray-300 text-mobile-sm leading-relaxed\">\n                  Build your virtual ranch while mastering Solana development through engaging gameplay.\n                </p>\n              </div>\n            </TechCard>\n          </div>\n        </div>\n      </section>\n\n      {/* Blueshift-style Stats Section */}\n      {ranchData && (\n        <section className=\"py-8 bg-gray-900/30 border border-cyan-400/20 rounded-xl mx-4 sm:mx-0\">\n          <div className=\"text-center space-y-6\">\n            <h2 className=\"font-space-gothic text-mobile-xl sm:text-2xl text-cyan-400\">\n              Your Progress\n            </h2>\n            <div className=\"grid grid-cols-2 gap-6 sm:grid-cols-4 max-w-2xl mx-auto\">\n              <div className=\"text-center\">\n                <div className=\"text-mobile-2xl sm:text-3xl font-bold text-cyan-400\">\n                  {formatRanchCoin(ranchData.coins)}\n                </div>\n                <div className=\"text-mobile-sm text-gray-400 font-mono\">Ranch Coins</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-mobile-2xl sm:text-3xl font-bold text-purple-400\">\n                  {ranchData.experience}\n                </div>\n                <div className=\"text-mobile-sm text-gray-400 font-mono\">Experience</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-mobile-2xl sm:text-3xl font-bold text-cyan-300\">\n                  {ranchData.level}\n                </div>\n                <div className=\"text-mobile-sm text-gray-400 font-mono\">Level</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-mobile-2xl sm:text-3xl font-bold text-cyan-400\">\n                  {0}\n                </div>\n                <div className=\"text-mobile-sm text-gray-400 font-mono\">Buildings</div>\n              </div>\n            </div>\n          </div>\n        </section>\n      )}\n\n      {/* Blueshift-style CTA Section */}\n      <section className=\"py-8 sm:py-12 text-center space-y-6\">\n        <h2 className=\"font-space-gothic text-mobile-2xl sm:text-3xl md:text-4xl text-cyan-400\">\n          Ready to Start Your Journey?\n        </h2>\n        <p className=\"text-mobile-base sm:text-mobile-lg text-gray-300 max-w-md mx-auto px-4\">\n          Join thousands of developers learning Solana development the fun way.\n        </p>\n        <div className=\"flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 sm:justify-center\">\n          <Link href=\"/cypherpunks-ethos\">\n            <TechButton variant=\"primary\" size=\"lg\" className=\"w-full sm:w-auto bg-cyan-500 hover:bg-cyan-400 border-cyan-400 text-black font-bold\">\n              Begin Your Adventure\n            </TechButton>\n          </Link>\n          <Link href=\"/wallet-test\">\n            <TechButton variant=\"secondary\" size=\"lg\" className=\"w-full sm:w-auto bg-gray-800 hover:bg-gray-700 border-gray-600 text-cyan-400\">\n              Test Wallet Connection\n            </TechButton>\n          </Link>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":9796},"client/src/pages/LessonDetail.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useRoute } from \"wouter\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\nimport { NarrativeBox } from \"@/components/lessons/NarrativeBox\";\nimport { LessonLayout } from \"@/components/lessons/LessonLayout\";\nimport { QuizStep } from \"@/components/lessons/QuizStep\";\nimport { CodingStep } from \"@/components/lessons/CodingStep\";\nimport { HintCharacter, type HintCharacterRef } from \"@/components/lessons/HintCharacter\";\nimport { ChallengeReward } from \"@/components/game/ChallengeReward\";\nimport { GameCanvas } from \"@/components/game/GameCanvas\";\nimport { useLessonStore } from \"@/hooks/use-lesson-store\";\nimport { useGameStore } from \"@/hooks/use-enhanced-game-store\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatRanchCoin } from \"@/lib/utils\";\nimport { solanaCodingLessons, type Lesson } from \"@/data/lessons\";\nimport { usePageLoader } from \"@/hooks/use-page-loader\";\nimport nftRobotUrl from \"@assets/brb-nft-ai-robot.png\";\n\nexport default function LessonDetail() {\n  const [, params] = useRoute(\"/lessons/:id\");\n  const lessonId = parseInt(params?.id || \"0\");\n  \n  const [currentStep, setCurrentStep] = useState(1);\n  const [language, setLanguage] = useState(\"rust\");\n  const [hintVisible, setHintVisible] = useState(false);\n  const [validationResults, setValidationResults] = useState<any>(null);\n\n  \n  usePageLoader();\n  \n  const hintCharacterRef = useRef<HintCharacterRef>(null);\n\n  // Get lesson from client-side data\n  const lesson = solanaCodingLessons.find(l => l.id === lessonId);\n\n  const { getLessonProgress, updateLessonAttempt, completeLesson, completeStep, isStepCompleted, setCurrentLesson } = useLessonStore();\n  const { \n    triggerSparkleAnimation, \n    triggerCoinFall, \n    triggerDataStreamAnimation,\n    triggerChallengeReward,\n    showChallengeReward,\n    currentRewardNftUrl,\n    dataStreamActive,\n    earnRanchCoin,\n    addExperience,\n    ranchData,\n    buildings,\n    characters\n  } = useGameStore();\n  const { toast } = useToast();\n\n  const progress = getLessonProgress(lessonId);\n  const currentStepData = lesson?.content.steps.find((step: any) => step.id === currentStep);\n\n  useEffect(() => {\n    if (lesson) {\n      setCurrentLesson(lessonId);\n      const savedProgress = getLessonProgress(lessonId);\n      if (savedProgress && savedProgress.currentStep > 0) {\n        setCurrentStep(savedProgress.currentStep);\n      }\n\n      // Reset validation results when step changes\n      setValidationResults(null);\n\n      // Proactive Hint for Lesson 1, Step 1 (onboarding assistance)\n      if (lesson.id === 1 && currentStep === 1) {\n        const initialHint = lesson.content.steps[0].hintMessage || \"Welcome! Let's get started on your Solana Adventure!\";\n        setTimeout(() => {\n          hintCharacterRef.current?.showHint(initialHint);\n        }, 1000); // Show hint after 1 second delay for better UX\n      }\n    }\n  }, [lesson, lessonId, currentStep, language]);\n\n  // Preload the NFT reward image for instant display\n  useEffect(() => {\n    const img = new Image();\n    img.src = '/assets/images/brb-nft-ai-robot.png';\n  }, []);\n\n  const progressPercentage = lesson ? (currentStep / lesson.content.steps.length) * 100 : 0;\n  const currentStepCompleted = isStepCompleted(lessonId, currentStep);\n  \n  // Calculate navigation logic - Updated to include stepCompleted state\n  const totalStepsInCurrentLesson = lesson?.content.steps.length || 0;\n  const isLastStepOfCurrentLesson = currentStep === totalStepsInCurrentLesson;\n  const canGoToNextStep = currentStep < totalStepsInCurrentLesson && currentStepCompleted;\n  const canGoToNextLesson = isLastStepOfCurrentLesson && currentStepCompleted;\n  \n  const hasPrevious = currentStep > 1;\n  const hasNext = canGoToNextStep || canGoToNextLesson;\n  const nextButtonText = canGoToNextStep ? \"Next Step\" : (canGoToNextLesson ? \"Next Lesson\" : \"Next\");\n  const canGoNext = currentStepCompleted || validationResults?.success || false;\n  const isCompleted = isLastStepOfCurrentLesson && currentStepCompleted;\n\n  const handleCodeRun = (data: any) => {\n    if (data.success) {\n      triggerSparkleAnimation();\n      triggerCoinFall();\n    }\n    setValidationResults(data);\n  };\n\n  // Handle step completion - this will be called by child components\n  const handleStepComplete = () => {\n    updateLessonAttempt(lessonId, currentStep);\n    completeStep(lessonId, currentStep);\n\n    \n    // Trigger visual effects\n    if (currentStepData?.visualEffectTrigger) {\n      triggerSparkleAnimation();\n    }\n    \n    const rewardNftUrl = lessonId === 2 && currentStep === 3 \n      ? \"/assets/images/purple-box-nft.png\" \n      : nftRobotUrl;\n    \n    // Trigger special data stream animation for PDA lesson\n    if (lessonId === 2 && currentStep === 3) {\n      triggerDataStreamAnimation();\n    }\n    \n    triggerChallengeReward(\n      rewardNftUrl,\n      lessonId,\n      `${lesson?.title} - Step ${currentStep} Completion Badge`\n    );\n    \n    // Always trigger sparkles and coin fall for successful completion\n    triggerSparkleAnimation();\n    triggerCoinFall();\n    \n    // Enhanced success feedback with hint character\n    hintCharacterRef.current?.showHint(\n      `Excellent work! You've completed ${lesson?.title} - Step ${currentStep}. Moving to the next challenge!`\n    );\n    \n    toast({\n      title: \"Step Completed!\",\n      description: \"Great progress! Step completed successfully.\",\n    });\n  };\n\n  const handleNext = () => {\n    if (canGoToNextStep) {\n      // Move to next step within current lesson\n      const nextStep = currentStep + 1;\n      setCurrentStep(nextStep);\n      setValidationResults(null);\n      setHintVisible(false);\n\n    } else if (canGoToNextLesson) {\n      // Navigate to next lesson\n      window.location.href = `/lessons/${lessonId + 1}`;\n    }\n  };\n\n  const handlePrevious = () => {\n    if (currentStep > 1) {\n      const prevStep = currentStep - 1;\n      setCurrentStep(prevStep);\n      setValidationResults(null);\n      setHintVisible(false);\n\n    }\n  };\n\n  const handleComplete = () => {\n    completeLesson(lessonId);\n    earnRanchCoin(100);\n    addExperience(50);\n    triggerCoinFall();\n    \n    toast({\n      title: \"Lesson Completed!\",\n      description: `You earned ${formatRanchCoin(100)} Ranch Coins and 50 XP!`,\n    });\n  };\n\n\n\n  if (!lesson) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <TechCard className=\"p-8 text-center\">\n          <span className=\"text-4xl mb-4 block\">⚠️</span>\n          <h2 className=\"font-space-gothic text-2xl text-gray-300 mb-4\">LESSON NOT FOUND</h2>\n          <p className=\"font-code text-gray-400\">The requested lesson could not be found.</p>\n        </TechCard>\n      </div>\n    );\n  }\n\n  return (\n    <LessonLayout\n      title={lesson.title}\n      currentStep={currentStep}\n      totalSteps={lesson.content.steps.length}\n      progress={progressPercentage}\n      onPrevious={handlePrevious}\n      onNext={handleNext}\n      onComplete={handleComplete}\n      canGoNext={canGoNext}\n      hasPrevious={hasPrevious}\n      hasNext={hasNext}\n      nextButtonText={nextButtonText}\n      isCompleted={isCompleted}\n    >\n      <div className=\"grid grid-cols-1 xl:grid-cols-5 gap-8 h-[calc(100vh-300px)]\">\n        {/* Primary Content: Code Editor or Narrative Display */}\n        <div className=\"xl:col-span-3 space-y-8\">\n          {currentStepData?.isCodingChallenge ? (\n            <CodingStep\n              currentStepData={currentStepData}\n              lessonId={lessonId}\n              currentStep={currentStep}\n              language={language}\n              onStepComplete={handleStepComplete}\n              onCodeRun={handleCodeRun}\n            />\n          ) : (\n            /* Narrative Content Display for Ethos Lessons */\n            <TechCard variant=\"cyan\" className=\"h-full\">\n              <div className=\"p-8 h-full overflow-y-auto\">\n                <div className=\"prose prose-invert prose-cyan max-w-none\">\n                  {/* Content will be rendered by components based on step data */}\n                  \n                  {/* Quiz Section for Narrative Lessons */}\n                  {currentStepData?.quiz && (\n                    <QuizStep\n                      currentStepData={currentStepData}\n                      lessonId={lessonId}\n                      currentStep={currentStep}\n                      onStepComplete={handleStepComplete}\n                    />\n                  )}\n\n                  {/* Deploy Button for Non-Quiz Narrative Steps */}\n                  {!currentStepData?.quiz && (\n                    <div className=\"mt-8 p-6 bg-gradient-to-r from-purple-900/30 to-cyan-900/30 rounded-lg border border-cyan-500/30\">\n                      <h3 className=\"text-lg font-bold text-cyan-300 mb-4\">Ready to Continue?</h3>\n                      <p className=\"text-gray-300 mb-4\">\n                        Reflect on the concepts above, then click the \"Deploy\" button to confirm your understanding and move forward.\n                      </p>\n                      <TechButton\n                        onClick={() => {\n                          setValidationResults({\n                            success: true,\n                            message: currentStepData?.successMessage || \"Understanding confirmed!\",\n                            errors: []\n                          });\n                          handleStepComplete();\n                        }}\n                        variant=\"primary\"\n                        className=\"w-full\"\n                      >\n                        Deploy Understanding\n                      </TechButton>\n                    </div>\n                  )}\n\n                  {/* Validation Results for Narrative Lessons */}\n                  {validationResults && !currentStepData?.isCodingChallenge && (\n                    <div className=\"mt-4 p-4 bg-gradient-to-r from-purple-900/30 to-cyan-900/30 rounded-lg border border-cyan-500/30\">\n                      <div className={`text-sm font-code ${\n                        validationResults.success \n                          ? 'text-green-300'\n                          : 'text-red-300'\n                      }`}>\n                        <div className=\"flex items-center mb-2\">\n                          <span className=\"mr-2\">{validationResults.success ? '✅' : '❌'}</span>\n                          {validationResults.message}\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </TechCard>\n          )}\n        </div>\n\n        {/* Side Panel: Instructions & Status */}\n        <div className=\"xl:col-span-2 space-y-6\">\n          <TechCard variant=\"purple\" className=\"overflow-hidden\">\n            <div className=\"p-6 overflow-y-auto max-h-96\">\n              {currentStepData && (\n                <>\n                  <NarrativeBox variant=\"story\" icon=\"📋\" title=\"Mission Brief\">\n                    {currentStepData.challenge}\n                  </NarrativeBox>\n\n                  <NarrativeBox variant=\"challenge\" icon=\"🎯\" title=\"System Requirements\">\n                    <div className=\"space-y-3\">\n                      <div className=\"flex items-start\">\n                        <span className={`mr-2 mt-1 ${\n                          validationResults?.passed ? 'text-tech-cyan-400' : 'text-gray-500'\n                        }`}>\n                          {validationResults?.passed ? '✓' : '○'}\n                        </span>\n                        <span className=\"text-gray-300\">Complete the coding challenge above</span>\n                      </div>\n                    </div>\n                  </NarrativeBox>\n\n                  {currentStepData.hintMessage && (\n                    <div className=\"bg-gradient-to-r from-tech-pink-800/30 to-tech-pink-700/30 border border-tech-pink-600 p-4 rounded-lg\">\n                      <TechButton \n                        variant=\"accent\"\n                        className=\"w-full\"\n                        onClick={() => {\n                          if (currentStepData.hintMessage) {\n                            hintCharacterRef.current?.showHint(currentStepData.hintMessage);\n                          }\n                        }}\n                      >\n                        <span className=\"mr-2\">🤖</span>\n                        REQUEST AI ASSISTANCE\n                      </TechButton>\n                    </div>\n                  )}\n                </>\n              )}\n            </div>\n          </TechCard>\n\n          {/* Lab Status */}\n\n        </div>\n      </div>\n\n      {/* Hint Character */}\n      <HintCharacter \n        ref={hintCharacterRef} \n        stepHints={currentStepData?.hintMessage ? [currentStepData.hintMessage] : []}\n        currentStep={currentStep}\n      />\n      \n      {/* Challenge Reward Overlay */}\n      <ChallengeReward\n        isVisible={showChallengeReward}\n        nftImageUrl={currentRewardNftUrl}\n      />\n\n      {/* Game Canvas for Visual Effects */}\n      <GameCanvas\n        dataStreamActive={dataStreamActive}\n      />\n    </LessonLayout>\n  );\n}\n","size_bytes":13229},"client/src/pages/Lessons.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { TechButton } from \"@/components/ui/TechButton\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { usePageLoader } from \"@/hooks/use-page-loader\";\nimport { useCypherpunkProgress } from \"@/hooks/use-cypherpunk-progress\";\nimport { solanaCodingLessons } from '@/data/lessons';\nimport solanaLogo from '@assets/solanaLogoMark_1755774382889.png';\nimport srLogo from '@assets/@sr_logo__1755774706436.png';\n\nexport default function Lessons() {\n  const [, setLocation] = useLocation();\n  const { getTrackProgress, getCurrentModule } = useCypherpunkProgress();\n  usePageLoader();\n\n  const trackProgress = getTrackProgress();\n  const currentModule = getCurrentModule();\n  \n  const handleCypherpunkTrackClick = () => {\n    if (currentModule === 1) {\n      setLocation('/cypherpunk-module-1');\n    } else if (currentModule === 2) {\n      setLocation('/cypherpunk-module-2');\n    } else if (currentModule === 3) {\n      setLocation('/cypherpunk-module-3');\n    } else if (currentModule === 4) {\n      setLocation('/cypherpunk-module-4');\n    } else {\n      // Future modules\n      setLocation('/cypherpunk-module-1');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <div className=\"container mx-auto px-4 py-20\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"font-space-gothic text-5xl md:text-6xl text-cyan-400 mb-6\">\n            choose your path\n          </h1>\n          <p className=\"font-tech text-lg text-gray-300 max-w-3xl mx-auto leading-relaxed\">\n            Two tracks await at Shadow Ranch. Master the philosophical foundations before diving into the technical depths.\n          </p>\n        </div>\n\n        {/* Learning Tracks */}\n        <div className=\"grid lg:grid-cols-2 gap-12 max-w-6xl mx-auto\">\n          {/* Cypherpunk Track */}\n          <TechCard variant=\"cyan\" className=\"group hover:scale-105 transition-all duration-300\">\n            <div className=\"p-8\">\n              <div className=\"flex items-center mb-6\">\n                <div className=\"w-16 h-16 bg-cyan-500/20 border border-cyan-400/30 rounded-lg flex items-center justify-center mr-4\">\n                  <img src={srLogo} alt=\"Shadow Ranch Logo\" className=\"w-12 h-8\" />\n                </div>\n                <div>\n                  <h2 className=\"font-space-gothic text-2xl text-cyan-400 mb-2\">THE CYPHERPUNK LEGACY</h2>\n                  <p className=\"text-sm text-gray-400 font-code\">FOUNDATIONAL TRACK</p>\n                </div>\n              </div>\n              \n              <p className=\"text-gray-300 mb-6 leading-relaxed\">\n                Discover the philosophical foundations of digital freedom. Learn about the rebels who dreamed of a decentralized future before blockchain existed.\n              </p>\n\n              <div className=\"space-y-3 mb-8\">\n                <div className=\"flex items-center text-sm text-gray-400\">\n                  <span className={`w-2 h-2 rounded-full mr-3 ${trackProgress >= 17 ? 'bg-cyan-400' : 'bg-gray-600'}`}></span>\n                  The Genesis of a Movement\n                </div>\n                <div className=\"flex items-center text-sm text-gray-400\">\n                  <span className={`w-2 h-2 rounded-full mr-3 ${trackProgress >= 33 ? 'bg-cyan-400' : currentModule === 2 ? 'bg-cyan-400/50' : 'bg-gray-600'}`}></span>\n                  The Pillars of a Free Internet\n                </div>\n                <div className=\"flex items-center text-sm text-gray-400\">\n                  <span className={`w-2 h-2 rounded-full mr-3 ${trackProgress >= 50 ? 'bg-cyan-400' : currentModule === 3 ? 'bg-cyan-400/50' : 'bg-gray-600'}`}></span>\n                  From Mailing List to Mainnet\n                </div>\n                <div className=\"flex items-center text-sm text-gray-400\">\n                  <span className={`w-2 h-2 rounded-full mr-3 ${trackProgress >= 67 ? 'bg-cyan-400' : currentModule === 4 ? 'bg-cyan-400/50' : 'bg-gray-600'}`}></span>\n                  The Fight for the Future\n                </div>\n                <div className=\"flex items-center text-sm text-gray-400\">\n                  <span className=\"w-2 h-2 bg-gray-600 rounded-full mr-3\"></span>\n                  Cryptographic Foundations\n                </div>\n                <div className=\"flex items-center text-sm text-gray-400\">\n                  <span className=\"w-2 h-2 bg-gray-600 rounded-full mr-3\"></span>\n                  Building the Decentralized Web\n                </div>\n              </div>\n\n              <div className=\"flex justify-between items-center mb-6\">\n                <div className=\"flex space-x-4\">\n                  <span className=\"px-3 py-1 bg-cyan-500/20 text-cyan-400 rounded-full text-xs font-code\">\n                    PHILOSOPHY\n                  </span>\n                  <span className=\"px-3 py-1 bg-cyan-500/20 text-cyan-400 rounded-full text-xs font-code\">\n                    HISTORY\n                  </span>\n                </div>\n                <span className=\"text-xs text-gray-500 font-code\">6 MODULES</span>\n              </div>\n\n              {/* Progress Bar */}\n              <div className=\"w-full bg-gray-700 rounded-full h-2 mb-6\">\n                <div className=\"bg-gradient-to-r from-cyan-500 to-cyan-400 h-2 rounded-full transition-all duration-500\" style={{ width: `${trackProgress}%` }}></div>\n              </div>\n\n              {trackProgress >= 50 ? (\n                <TechButton \n                  variant=\"accent\" \n                  className=\"w-full bg-gradient-to-r from-green-600 to-tech-cyan-600 hover:from-green-500 hover:to-tech-cyan-500 border-green-400\"\n                  onClick={() => setLocation('/cypherpunk-module-4')}\n                >\n                  <span className=\"mr-2\">⚡</span>\n                  COMPLETE FINAL MISSION\n                  <span className=\"ml-2\">⚡</span>\n                </TechButton>\n              ) : (\n                <TechButton \n                  variant=\"accent\" \n                  className=\"w-full\"\n                  onClick={handleCypherpunkTrackClick}\n                >\n                  {trackProgress > 0 ? 'CONTINUE TRACK' : 'START LEGACY TRACK'}\n                </TechButton>\n              )}\n            </div>\n          </TechCard>\n\n          {/* Solana Programming Track */}\n          <TechCard variant=\"purple\" className={`group hover:scale-105 transition-all duration-300 ${trackProgress >= 17 ? '' : 'opacity-60'}`}>\n            <div className=\"p-8\">\n              <div className=\"flex items-center mb-6\">\n                <div className=\"w-16 h-16 bg-gradient-to-br from-tech-purple-500 to-tech-purple-600 rounded-lg flex items-center justify-center mr-4\">\n                  <img src={solanaLogo} alt=\"Solana Logo\" className=\"w-10 h-10 ml-[0px] mr-[0px] mt-[1px] mb-[1px] pl-[4px] pr-[4px] pt-[8px] pb-[8px]\" />\n                </div>\n                <div>\n                  <h2 className=\"font-space-gothic text-2xl text-tech-purple-400 mb-2\">SOLANA PROGRAM DEVELOPMENT</h2>\n                  <p className=\"text-sm text-gray-400 font-code\">TECHNICAL TRACK</p>\n                </div>\n              </div>\n              \n              <p className=\"text-gray-300 mb-6 leading-relaxed\">\n                Master the technical arts of Solana development. Build, deploy, and optimize high-performance blockchain applications.\n              </p>\n\n              <div className=\"space-y-3 mb-8\">\n                {solanaCodingLessons.map(lesson => (\n                  <div key={lesson.id} className=\"flex items-center text-sm text-gray-400\">\n                    <span className=\"w-2 h-2 bg-gray-600 rounded-full mr-3\"></span>\n                    {lesson.title}\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"flex justify-between items-center mb-6\">\n                <div className=\"flex space-x-4\">\n                  <span className=\"px-3 py-1 bg-tech-purple-900/50 text-tech-purple-400 rounded-full text-xs font-code\">\n                    RUST\n                  </span>\n                  <span className=\"px-3 py-1 bg-tech-purple-900/50 text-tech-purple-400 rounded-full text-xs font-code\">\n                    SOLANA\n                  </span>\n                </div>\n                <span className=\"text-xs text-gray-500 font-code\">12 MODULES</span>\n              </div>\n\n              {/* Progress Bar */}\n              <div className=\"w-full bg-gray-700 rounded-full h-2 mb-6\">\n                <div className=\"bg-gradient-to-r from-tech-purple-500 to-tech-purple-400 h-2 rounded-full\" style={{ width: '0%' }}></div>\n              </div>\n\n              {trackProgress >= 17 ? (\n                <div className=\"space-y-3\">\n                  <TechButton \n                    variant=\"accent\" \n                    className=\"w-full bg-gradient-to-r from-purple-600 to-cyan-600 hover:from-purple-500 hover:to-cyan-500 border-purple-400\"\n                    onClick={() => setLocation('/solana-challenges/1')}\n                  >\n                    START CODING CHALLENGES\n                  </TechButton>\n                  \n                  <TechButton \n                    variant=\"secondary\" \n                    className=\"w-full\"\n                    onClick={() => {\n                      console.log('Navigating to Solana track - lesson 1');\n                      setLocation('/lessons/1');\n                    }}\n                  >\n                    START SOLANA TRACK\n                  </TechButton>\n                </div>\n              ) : (\n                <TechButton \n                  variant=\"secondary\" \n                  className=\"w-full cursor-not-allowed\"\n                  disabled\n                >\n                  <span className=\"mr-2\">🔒</span>\n                  COMPLETE FIRST CYPHERPUNK MODULE\n                </TechButton>\n              )}\n            </div>\n          </TechCard>\n        </div>\n\n        {/* Bottom Navigation */}\n        <div className=\"text-center mt-16\">\n          <Link href=\"/\">\n            <TechButton variant=\"secondary\" size=\"sm\">\n              <span className=\"mr-2\">←</span>\n              BACK TO DASHBOARD\n            </TechButton>\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10261},"client/src/pages/Playground.tsx":{"content":"import { useState } from \"react\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\nimport { MonacoEditor } from \"@/components/editor/MonacoEditor\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useGameStore } from \"@/hooks/use-game-store\";\n\ninterface CodeTemplate {\n  name: string;\n  language: string;\n  code: string;\n  description: string;\n  icon: string;\n}\n\nconst codeTemplates: CodeTemplate[] = [\n  {\n    name: \"Hello Solana\",\n    language: \"rust\",\n    description: \"Basic Rust program structure\",\n    icon: \"fa-code\",\n    code: `fn main() {\n    println!(\"Hello, Solana!\");\n    \n    // Your code here\n    let message = \"Welcome to the blockchain!\";\n    println!(\"{}\", message);\n}`\n  },\n  {\n    name: \"Anchor Program\",\n    language: \"rust\",\n    description: \"Basic Anchor program template\",\n    icon: \"fa-anchor\",\n    code: `use anchor_lang::prelude::*;\n\ndeclare_id!(\"Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS\");\n\n#[program]\npub mod my_program {\n    use super::*;\n\n    pub fn initialize(ctx: Context<Initialize>) -> Result<()> {\n        msg!(\"Greetings from Solana!\");\n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct Initialize {}\n`\n  },\n  {\n    name: \"Seahorse Program\",\n    language: \"python\",\n    description: \"Python Seahorse template\",\n    icon: \"fa-python\",\n    code: `# Seahorse Python Program\nfrom seahorse.prelude import *\n\ndeclare_id('Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS')\n\n@instruction\ndef initialize():\n    print(\"Hello from Seahorse!\")\n    \n    # Your Python code here\n    message = \"Python + Solana = Magic!\"\n    print(message)\n`\n  },\n  {\n    name: \"Token Program\",\n    language: \"rust\",\n    description: \"Basic token operations\",\n    icon: \"fa-coins\",\n    code: `use anchor_lang::prelude::*;\nuse anchor_spl::token::{self, Token, TokenAccount, Mint};\n\ndeclare_id!(\"Fg6PaFpoGXkYsidMpWTK6W2BeZ7FEfcYkg476zPFsLnS\");\n\n#[program]\npub mod token_program {\n    use super::*;\n\n    pub fn mint_token(ctx: Context<MintToken>, amount: u64) -> Result<()> {\n        msg!(\"Minting {} tokens\", amount);\n        \n        // Token minting logic here\n        \n        Ok(())\n    }\n}\n\n#[derive(Accounts)]\npub struct MintToken<'info> {\n    #[account(mut)]\n    pub mint: Account<'info, Mint>,\n    #[account(mut)]\n    pub to: Account<'info, TokenAccount>,\n    pub token_program: Program<'info, Token>,\n}\n`\n  }\n];\n\nexport default function Playground() {\n  const [code, setCode] = useState(codeTemplates[0].code);\n  const [language, setLanguage] = useState(\"rust\");\n  const [selectedTemplate, setSelectedTemplate] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [output, setOutput] = useState<string[]>([\n    \"$ Welcome to the Playground\",\n    \"Ready to experiment with Solana development!\",\n    \"Select a template or write your own code.\"\n  ]);\n\n  const { toast } = useToast();\n  const gameStore = useGameStore();\n\n  const handleTemplateSelect = (index: number) => {\n    const template = codeTemplates[index];\n    setSelectedTemplate(index);\n    setCode(template.code);\n    setLanguage(template.language);\n  };\n\n  const handleRun = async () => {\n    setIsRunning(true);\n    gameStore.triggerNetworkPing();\n    \n    // Simulate code execution\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    const newOutput = [\n      `$ ${language === 'rust' ? 'cargo run' : 'python main.py'}`,\n      language === 'rust' ? 'Compiling playground v0.1.0' : 'Running Python script...',\n      '   Finished in 0.75s',\n      'Program executed successfully!',\n      '',\n      '=== Output ===',\n      language === 'rust' ? 'Hello, Solana!' : 'Hello from Seahorse!',\n      'Experimental code ran without errors.'\n    ];\n    \n    setOutput(newOutput);\n    setIsRunning(false);\n    \n    // Reward experimentation\n    gameStore.earnRanchCoin(5);\n    gameStore.addExperience(10);\n    gameStore.triggerSparkleAnimation();\n    \n    toast({\n      title: \"Code Executed!\",\n      description: \"Great experimentation! +5 Ranch Coins, +10 XP\",\n    });\n  };\n\n  const handleSave = () => {\n    const timestamp = new Date().toLocaleString();\n    gameStore.setLastStoredMessage(`Code saved at ${timestamp}`);\n    \n    toast({\n      title: \"Code Saved\",\n      description: \"Your experimental code has been saved to your ranch.\",\n    });\n  };\n\n  const handleClear = () => {\n    setCode(\"\");\n    setOutput([\n      \"$ Playground cleared\",\n      \"Ready for new experiments!\"\n    ]);\n  };\n\n  return (\n    <div className=\"py-20 bg-gradient-to-b from-tech-purple-900 to-tech-cyan-900\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16\">\n          <h1 className=\"font-titulo text-4xl md:text-5xl bg-gradient-to-r from-tech-cyan-400 to-tech-purple-400 bg-clip-text text-transparent mb-6\">\n            CODE LABORATORY\n          </h1>\n          <p className=\"font-tech text-lg text-gray-300 max-w-2xl mx-auto uppercase tracking-wider\">\n            Experiment with blockchain protocols! Test algorithms, validate concepts, and earn rewards for innovation.\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 xl:grid-cols-5 gap-8 h-[calc(100vh-400px)]\">\n          {/* Primary Content: Code Editor */}\n          <div className=\"xl:col-span-3 space-y-6\">\n            <TechCard variant=\"cyan\" className=\"h-full\">\n              <div className=\"p-6 h-full flex flex-col\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h2 className=\"font-space-gothic text-xl text-tech-cyan-400 uppercase tracking-wider\">MAIN TERMINAL</h2>\n                  <div className=\"flex space-x-2\">\n                    <TechButton variant=\"primary\" size=\"sm\" onClick={handleRunCode} disabled={isRunning}>\n                      <span className=\"mr-1\">⚡</span>\n                      {isRunning ? \"EXECUTING...\" : \"RUN\"}\n                    </TechButton>\n                    <TechButton variant=\"secondary\" size=\"sm\" onClick={handleSave}>\n                      <span className=\"mr-1\">💾</span>\n                      SAVE\n                    </TechButton>\n                    <TechButton variant=\"outline\" size=\"sm\" onClick={handleClear}>\n                      <span className=\"mr-1\">🗑️</span>\n                      CLEAR\n                    </TechButton>\n                  </div>\n                </div>\n                <div className=\"flex-1\">\n                  <MonacoEditor\n                    value={code}\n                    onChange={setCode}\n                    language={language}\n                    onLanguageChange={setLanguage}\n                    height=\"600px\"\n                    onRun={handleCodeRun}\n                  />\n                </div>\n              </div>\n            </TechCard>\n          </div>\n\n          {/* Side Panel: Templates & Console */}\n          <div className=\"xl:col-span-2 space-y-6\">\n            {/* Template Selector */}\n            <TechCard variant=\"purple\" className=\"overflow-hidden\">\n              <div className=\"p-6\">\n                <h3 className=\"font-space-gothic text-lg text-tech-purple-400 mb-4 uppercase tracking-wider\">PROTOCOL TEMPLATES</h3>\n                <div className=\"space-y-3\">\n                  {codeTemplates.map((template, index) => (\n                    <TechButton\n                      key={index}\n                      variant={selectedTemplate === index ? \"primary\" : \"outline\"}\n                      className=\"w-full text-left p-3 h-auto\"\n                      onClick={() => handleTemplateSelect(index)}\n                    >\n                      <div className=\"flex flex-col items-start\">\n                        <div className=\"flex items-center mb-2\">\n                          <span className=\"mr-2\">{template.icon === 'fa-code' ? '💻' : template.icon === 'fa-anchor' ? '⚓' : '🪙'}</span>\n                          <span className=\"font-tech font-semibold\">{template.name}</span>\n                        </div>\n                        <p className=\"text-xs font-code text-gray-400\">\n                          {template.description}\n                        </p>\n                        <div className=\"mt-2\">\n                          <span className={`text-xs px-2 py-1 rounded font-code ${\n                            template.language === 'rust' \n                              ? 'bg-tech-purple-600/30 text-tech-purple-400' \n                              : 'bg-tech-cyan-600/30 text-tech-cyan-400'\n                          }`}>\n                            {template.language === 'rust' ? 'Rust' : 'Python'}\n                          </span>\n                        </div>\n                      </div>\n                    </TechButton>\n                  ))}\n                </div>\n              </div>\n            </TechCard>\n\n            {/* Quick Actions */}\n            <WesternCard className=\"mt-6\">\n              <WesternCardHeader>\n                <WesternCardTitle className=\"text-lg\">Quick Actions</WesternCardTitle>\n              </WesternCardHeader>\n              <WesternCardContent>\n                <div className=\"space-y-3\">\n                  <WesternButton \n                    variant=\"primary\" \n                    className=\"w-full\"\n                    onClick={handleRun}\n                    disabled={isRunning}\n                  >\n                    {isRunning ? (\n                      <>\n                        <i className=\"fas fa-spinner fa-spin mr-2\" />\n                        Running...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-play mr-2\" />\n                        Run Code\n                      </>\n                    )}\n                  </WesternButton>\n                  <WesternButton \n                    variant=\"secondary\" \n                    className=\"w-full\"\n                    onClick={handleSave}\n                  >\n                    <i className=\"fas fa-save mr-2\" />\n                    Save Code\n                  </WesternButton>\n                  <WesternButton \n                    variant=\"ghost\" \n                    className=\"w-full\"\n                    onClick={handleClear}\n                  >\n                    <i className=\"fas fa-trash mr-2\" />\n                    Clear\n                  </WesternButton>\n                </div>\n              </WesternCardContent>\n            </WesternCard>\n          </div>\n\n          {/* Code Editor */}\n          <div className=\"lg:col-span-2\">\n            <WesternCard className=\"h-[700px]\">\n              <WesternCardContent className=\"p-6 h-full\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"font-deputy text-xl text-sunset-400\">\n                    Experimental Editor\n                  </h3>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm font-mono text-gray-400\">\n                      {language === 'rust' ? 'Rust (Anchor)' : 'Python (Seahorse)'}\n                    </span>\n                    <div className={`w-3 h-3 rounded-full ${\n                      isRunning ? 'bg-yellow-500 animate-pulse' : 'bg-green-500'\n                    }`} />\n                  </div>\n                </div>\n\n                <div className=\"h-[calc(100%-80px)]\">\n                  <div className=\"code-editor rounded-lg overflow-hidden h-full\">\n                    <div className=\"bg-gray-800 px-4 py-2 border-b border-gray-600 flex items-center justify-between\">\n                      <span className=\"text-sm text-gray-400 font-mono\">\n                        playground.{language === 'rust' ? 'rs' : 'py'}\n                      </span>\n                      <div className=\"flex space-x-2\">\n                        <div className=\"w-3 h-3 bg-red-500 rounded-full\" />\n                        <div className=\"w-3 h-3 bg-yellow-500 rounded-full\" />\n                        <div className=\"w-3 h-3 bg-green-500 rounded-full\" />\n                      </div>\n                    </div>\n                    <textarea \n                      className=\"w-full h-[calc(100%-48px)] bg-gray-900 text-gray-300 p-4 font-mono text-sm resize-none border-none outline-none\"\n                      placeholder=\"// Start experimenting...\"\n                      value={code}\n                      onChange={(e) => setCode(e.target.value)}\n                    />\n                  </div>\n                </div>\n              </WesternCardContent>\n            </WesternCard>\n          </div>\n\n          {/* Output & Stats */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            {/* Console Output */}\n            <WesternCard>\n              <WesternCardHeader>\n                <WesternCardTitle className=\"text-lg\">Console Output</WesternCardTitle>\n              </WesternCardHeader>\n              <WesternCardContent>\n                <div className=\"bg-gray-900 rounded border border-gray-700 p-4 h-64 overflow-y-auto font-mono text-sm\">\n                  {output.map((line, index) => (\n                    <div \n                      key={index} \n                      className={\n                        line.startsWith('$') ? 'text-green-400' :\n                        line.includes('Compiling') || line.includes('Running') || line.includes('Finished') ? 'text-gray-400' :\n                        line.includes('===') ? 'text-blue-400 font-bold' :\n                        line.includes('error') ? 'text-red-400' :\n                        line.includes('Hello') || line.includes('success') ? 'text-white' :\n                        'text-gray-300'\n                      }\n                    >\n                      {line}\n                    </div>\n                  ))}\n                </div>\n              </WesternCardContent>\n            </WesternCard>\n\n            {/* Experiment Stats */}\n            <WesternCard>\n              <WesternCardHeader>\n                <WesternCardTitle className=\"text-lg\">Experiment Stats</WesternCardTitle>\n              </WesternCardHeader>\n              <WesternCardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"font-mono text-gray-400\">Ranch Coins</span>\n                    <span className=\"font-deputy text-sunset-400\">\n                      {gameStore.ranchData.coins}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"font-mono text-gray-400\">Experience</span>\n                    <span className=\"font-deputy text-sage-400\">\n                      {gameStore.ranchData.experience}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"font-mono text-gray-400\">Code Lines</span>\n                    <span className=\"font-deputy text-desert-400\">\n                      {code.split('\\n').length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center text-sm\">\n                    <span className=\"font-mono text-gray-400\">Language</span>\n                    <span className=\"font-deputy text-rust-400\">\n                      {language === 'rust' ? 'Rust' : 'Python'}\n                    </span>\n                  </div>\n                </div>\n              </WesternCardContent>\n            </WesternCard>\n\n            {/* Tips */}\n            <WesternCard>\n              <WesternCardHeader>\n                <WesternCardTitle className=\"text-lg\">Pro Tips</WesternCardTitle>\n              </WesternCardHeader>\n              <WesternCardContent>\n                <div className=\"space-y-2 text-sm font-mono text-gray-300\">\n                  <div className=\"flex items-start\">\n                    <i className=\"fas fa-lightbulb text-desert-400 mr-2 mt-1\" />\n                    <span>Experiment with different templates to learn new patterns</span>\n                  </div>\n                  <div className=\"flex items-start\">\n                    <i className=\"fas fa-star text-sage-400 mr-2 mt-1\" />\n                    <span>Save interesting code snippets for later reference</span>\n                  </div>\n                  <div className=\"flex items-start\">\n                    <i className=\"fas fa-rocket text-sunset-400 mr-2 mt-1\" />\n                    <span>Each successful run earns you experience and coins</span>\n                  </div>\n                </div>\n              </WesternCardContent>\n            </WesternCard>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16698},"client/src/pages/Ranch.tsx":{"content":"import { useState } from \"react\";\nimport { WesternCard, WesternCardContent, WesternCardHeader, WesternCardTitle } from \"@/components/ui/WesternCard\";\nimport { WesternButton } from \"@/components/ui/WesternButton\";\nimport { useGameStore } from \"@/hooks/use-enhanced-game-store\";\nimport { useLessonStore } from \"@/hooks/use-lesson-store\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { RewardNftGallery } from \"@/components/ranch/RewardNftGallery\";\nimport { formatRanchCoin, getRarityColor, getRarityBorder } from \"@/lib/utils\";\nimport { usePageLoader } from \"@/hooks/use-page-loader\";\n\ninterface ShopItem {\n  id: string;\n  name: string;\n  type: string;\n  category: 'building' | 'character';\n  cost: number;\n  description: string;\n  icon: string;\n}\n\nconst shopItems: ShopItem[] = [\n  {\n    id: 'water_tower',\n    name: 'Water Tower',\n    type: 'water_tower',\n    category: 'building',\n    cost: 500,\n    description: 'Essential for ranch operations',\n    icon: 'fa-tint'\n  },\n  {\n    id: 'library',\n    name: 'Code Library',\n    type: 'library',\n    category: 'building',\n    cost: 750,\n    description: 'Store your coding knowledge',\n    icon: 'fa-book'\n  },\n  {\n    id: 'deputy',\n    name: 'Deputy',\n    type: 'deputy',\n    category: 'character',\n    cost: 1000,\n    description: 'A helpful coding companion',\n    icon: 'fa-user-tie'\n  },\n  {\n    id: 'merchant',\n    name: 'Code Merchant',\n    type: 'merchant',\n    category: 'character',\n    cost: 1500,\n    description: 'Trades coding tips for coins',\n    icon: 'fa-user-ninja'\n  }\n];\n\nconst achievements = [\n  { name: 'First Steps', icon: 'fa-star', unlocked: true, description: 'Complete your first lesson' },\n  { name: 'Ranch Builder', icon: 'fa-home', unlocked: true, description: 'Build your first structure' },\n  { name: 'Code Master', icon: 'fa-code', unlocked: false, description: 'Complete 10 lessons' },\n  { name: 'Solana Pioneer', icon: 'fa-rocket', unlocked: false, description: 'Deploy your first program' }\n];\n\nexport default function Ranch() {\n  const gameStore = useGameStore();\n  const { getCompletedLessonsCount } = useLessonStore();\n  const { toast } = useToast();\n  const [selectedTab, setSelectedTab] = useState<'overview' | 'shop' | 'achievements'>('overview');\n\n  const completedLessons = getCompletedLessonsCount();\n\n  const handlePurchase = (item: ShopItem) => {\n    const success = gameStore.spendRanchCoin(item.cost);\n    \n    if (success) {\n      if (item.category === 'building') {\n        gameStore.addBuilding({\n          name: item.name,\n          type: item.type,\n          level: 1,\n          position: { \n            x: Math.random() * 60 + 20, \n            y: Math.random() * 40 + 40 \n          },\n          isActive: true\n        });\n      } else {\n        gameStore.addCharacter({\n          name: item.name,\n          type: item.type,\n          rarity: 'common',\n          level: 1,\n          experience: 0,\n          position: { \n            x: Math.random() * 60 + 20, \n            y: Math.random() * 40 + 40 \n          },\n          isActive: true\n        });\n      }\n      \n      gameStore.triggerCoinFall();\n      toast({\n        title: \"Purchase Successful!\",\n        description: `You've added ${item.name} to your ranch!`,\n      });\n    } else {\n      toast({\n        title: \"Insufficient Funds\",\n        description: `You need ${formatRanchCoin(item.cost)} Ranch Coins to purchase ${item.name}.`,\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"py-20 bg-gradient-to-b from-gray-800 to-gray-900\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"text-center mb-16\">\n          <h1 className=\"font-western text-4xl md:text-5xl text-rust-400 mb-6\">Your Shadow Ranch</h1>\n          <p className=\"font-deputy text-lg text-gray-300 max-w-2xl mx-auto\">\n            Build and customize your virtual ranch as you progress through lessons. Each achievement unlocks new buildings and characters.\n          </p>\n        </div>\n\n        {/* NFT Reward Collection */}\n        {gameStore.rewardNfts.length > 0 && (\n          <div className=\"mb-8\">\n            <RewardNftGallery rewards={gameStore.rewardNfts} />\n          </div>\n        )}\n\n        {/* Tab Navigation */}\n        <div className=\"flex justify-center mb-8\">\n          <div className=\"flex bg-gray-800 rounded-lg p-1\">\n            {[\n              { key: 'overview', label: 'Overview', icon: 'fa-home' },\n              { key: 'shop', label: 'Shop', icon: 'fa-store' },\n              { key: 'achievements', label: 'Achievements', icon: 'fa-trophy' }\n            ].map((tab) => (\n              <WesternButton\n                key={tab.key}\n                variant={selectedTab === tab.key ? 'primary' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setSelectedTab(tab.key as any)}\n                className=\"mx-1\"\n              >\n                <i className={`fas ${tab.icon} mr-2`} />\n                {tab.label}\n              </WesternButton>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"grid lg:grid-cols-4 gap-8\">\n          {/* Ranch Overview */}\n          <div className=\"lg:col-span-3\">\n            {selectedTab === 'overview' && (\n              <WesternCard className=\"h-96 relative overflow-hidden\">\n                <WesternCardContent className=\"p-6 h-full\">\n                  <h3 className=\"font-space-gothic text-xl text-rust-400 mb-4\">Ranch Overview</h3>\n                  \n                  {/* Expanded ranch view */}\n                  <div className=\"absolute inset-6 bg-gradient-to-b from-sunset-500/30 via-desert-500/20 to-desert-800/40 rounded-lg border-2 border-desert-600\">\n                    {/* Buildings */}\n                    {gameStore.buildings.map((building, index) => (\n                      <div\n                        key={building.id}\n                        className=\"absolute bg-leather-700 rounded border-2 border-leather-600 shadow-lg cursor-pointer hover:scale-110 transition-transform\"\n                        style={{\n                          left: `${building.position.x}%`,\n                          bottom: '10%',\n                          width: '60px',\n                          height: building.type === 'saloon' ? '48px' : building.type === 'stable' ? '52px' : '40px'\n                        }}\n                        title={`${building.name} (Level ${building.level})`}\n                      >\n                        <div className={`w-full h-4 ${\n                          building.type === 'saloon' ? 'bg-rust-600' :\n                          building.type === 'stable' ? 'bg-sage-600' :\n                          building.type === 'library' ? 'bg-mystic-600' :\n                          'bg-desert-600'\n                        } rounded-t`} />\n                        <div className=\"text-xs text-center text-white font-mono mt-1 px-1 truncate\">\n                          {building.name}\n                        </div>\n                      </div>\n                    ))}\n                    \n                    {/* Characters */}\n                    {gameStore.characters.map((character) => (\n                      <div\n                        key={character.id}\n                        className={`absolute w-8 h-10 rounded-full shadow-lg cursor-pointer hover:scale-110 transition-transform ${\n                          getRarityBorder(character.rarity)\n                        } border-2`}\n                        style={{\n                          left: `${character.position.x}%`,\n                          bottom: '15%',\n                          backgroundColor: character.type === 'sheriff' ? '#b8824c' : \n                                         character.type === 'deputy' ? '#87a96b' : '#6a5acd'\n                        }}\n                        title={`${character.name} - ${character.type} (Level ${character.level})`}\n                      >\n                        <div className=\"w-6 h-6 bg-leather-600 rounded-full mx-auto mt-1\" />\n                        <div className={`text-xs text-center font-mono mt-1 ${getRarityColor(character.rarity)} font-bold`}>\n                          {character.name}\n                        </div>\n                      </div>\n                    ))}\n                    \n                    {/* Instructions */}\n                    <div className=\"absolute top-4 left-4 bg-black/70 rounded px-3 py-2\">\n                      <div className=\"text-xs text-gray-300 font-mono\">\n                        Click on buildings and characters to interact\n                      </div>\n                    </div>\n                  </div>\n                </WesternCardContent>\n              </WesternCard>\n            )}\n\n            {selectedTab === 'shop' && (\n              <WesternCard>\n                <WesternCardHeader>\n                  <WesternCardTitle>Ranch Shop</WesternCardTitle>\n                </WesternCardHeader>\n                <WesternCardContent>\n                  <div className=\"grid md:grid-cols-2 gap-6\">\n                    {shopItems.map((item) => (\n                      <div key={item.id} className=\"bg-gray-800 rounded-lg p-4 border border-gray-700\">\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div className=\"flex items-center\">\n                            <i className={`fas ${item.icon} text-2xl text-desert-400 mr-3`} />\n                            <div>\n                              <h4 className=\"font-deputy text-lg text-white\">{item.name}</h4>\n                              <p className=\"text-sm text-gray-400 font-mono\">{item.description}</p>\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"font-mono text-sunset-400 font-bold\">\n                            {formatRanchCoin(item.cost)} RC\n                          </span>\n                          <WesternButton\n                            variant=\"primary\"\n                            size=\"sm\"\n                            onClick={() => handlePurchase(item)}\n                            disabled={gameStore.ranchData.coins < item.cost}\n                          >\n                            <i className=\"fas fa-shopping-cart mr-1\" />\n                            Buy\n                          </WesternButton>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </WesternCardContent>\n              </WesternCard>\n            )}\n\n            {selectedTab === 'achievements' && (\n              <WesternCard>\n                <WesternCardHeader>\n                  <WesternCardTitle>Achievements</WesternCardTitle>\n                </WesternCardHeader>\n                <WesternCardContent>\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    {achievements.map((achievement, index) => (\n                      <div \n                        key={index}\n                        className={`p-4 rounded-lg border-2 ${\n                          achievement.unlocked \n                            ? 'bg-gradient-to-r from-green-800/30 to-green-700/30 border-green-600'\n                            : 'bg-gray-800/50 border-gray-600'\n                        }`}\n                      >\n                        <div className=\"flex items-center\">\n                          <i className={`fas ${achievement.icon} text-2xl mr-3 ${\n                            achievement.unlocked ? 'text-green-400' : 'text-gray-500'\n                          }`} />\n                          <div>\n                            <h4 className={`font-deputy text-lg ${\n                              achievement.unlocked ? 'text-white' : 'text-gray-500'\n                            }`}>\n                              {achievement.name}\n                            </h4>\n                            <p className={`text-sm font-mono ${\n                              achievement.unlocked ? 'text-green-300' : 'text-gray-500'\n                            }`}>\n                              {achievement.description}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </WesternCardContent>\n              </WesternCard>\n            )}\n          </div>\n\n          {/* Ranch Stats & Management */}\n          <div className=\"space-y-6\">\n            {/* Stats Card */}\n            <WesternCard>\n              <WesternCardHeader>\n                <WesternCardTitle className=\"text-lg\">Ranch Stats</WesternCardTitle>\n              </WesternCardHeader>\n              <WesternCardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-300 font-mono text-sm\">Ranch Coins</span>\n                    <span className=\"text-sunset-400 font-deputy text-lg\">\n                      {formatRanchCoin(gameStore.ranchData.coins)}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-300 font-mono text-sm\">Total XP</span>\n                    <span className=\"text-sage-400 font-deputy text-lg\">\n                      {gameStore.ranchData.experience}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-300 font-mono text-sm\">Level</span>\n                    <span className=\"text-desert-400 font-deputy text-lg\">\n                      {gameStore.ranchData.level}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-300 font-mono text-sm\">Buildings</span>\n                    <span className=\"text-rust-400 font-deputy text-lg\">\n                      {gameStore.buildings.length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-300 font-mono text-sm\">Characters</span>\n                    <span className=\"text-mystic-400 font-deputy text-lg\">\n                      {gameStore.characters.length}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-gray-300 font-mono text-sm\">Lessons Complete</span>\n                    <span className=\"text-green-400 font-deputy text-lg\">\n                      {completedLessons}\n                    </span>\n                  </div>\n                </div>\n              </WesternCardContent>\n            </WesternCard>\n\n            {/* Quick Actions */}\n            <WesternCard>\n              <WesternCardHeader>\n                <WesternCardTitle className=\"text-lg\">Quick Actions</WesternCardTitle>\n              </WesternCardHeader>\n              <WesternCardContent>\n                <div className=\"space-y-3\">\n                  <WesternButton \n                    variant=\"secondary\" \n                    className=\"w-full\"\n                    onClick={() => gameStore.triggerSparkleAnimation()}\n                  >\n                    <i className=\"fas fa-sparkles mr-2\" />\n                    Collect Daily Bonus\n                  </WesternButton>\n                  <WesternButton \n                    variant=\"tertiary\" \n                    className=\"w-full\"\n                    onClick={() => gameStore.triggerCoinFall()}\n                  >\n                    <i className=\"fas fa-coins mr-2\" />\n                    Check Earnings\n                  </WesternButton>\n                  <WesternButton \n                    variant=\"ghost\" \n                    className=\"w-full\"\n                    onClick={() => setSelectedTab('shop')}\n                  >\n                    <i className=\"fas fa-store mr-2\" />\n                    Visit Shop\n                  </WesternButton>\n                </div>\n              </WesternCardContent>\n            </WesternCard>\n\n            {/* Ranch Info */}\n            <WesternCard>\n              <WesternCardHeader>\n                <WesternCardTitle className=\"text-lg\">Ranch Info</WesternCardTitle>\n              </WesternCardHeader>\n              <WesternCardContent>\n                <div className=\"text-sm text-gray-300 font-mono space-y-2\">\n                  <p><strong className=\"text-desert-400\">Name:</strong> {gameStore.ranchData.name}</p>\n                  <p><strong className=\"text-desert-400\">Established:</strong> Recently</p>\n                  <p><strong className=\"text-desert-400\">Location:</strong> Shadow Valley</p>\n                  <p><strong className=\"text-desert-400\">Specialty:</strong> Solana Development</p>\n                </div>\n              </WesternCardContent>\n            </WesternCard>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17128},"client/src/pages/WalletTest.tsx":{"content":"import { useWallet } from \"@/hooks/use-wallet\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\n\nexport function WalletTest() {\n  const { connected, address, connecting, connect, disconnect, walletInstalled } = useWallet();\n\n  return (\n    <div className=\"min-h-screen bg-black p-6\">\n      <div className=\"container mx-auto max-w-2xl\">\n        <TechCard variant=\"cyan\" className=\"p-8\">\n          <h1 className=\"font-space-gothic text-3xl text-cyan-400 mb-8 text-center\">\n            Wallet Connection Test\n          </h1>\n          \n          <div className=\"space-y-6\">\n            <div className=\"bg-gray-800 rounded-lg p-4\">\n              <h3 className=\"text-cyan-400 font-space-gothic mb-2\">Wallet Status:</h3>\n              <div className=\"space-y-2 text-sm font-mono\">\n                <div>Wallet Installed: <span className={walletInstalled ? \"text-green-400\" : \"text-red-400\"}>\n                  {walletInstalled ? \"YES\" : \"NO\"}\n                </span></div>\n                <div>Connected: <span className={connected ? \"text-green-400\" : \"text-red-400\"}>\n                  {connected ? \"YES\" : \"NO\"}\n                </span></div>\n                <div>Connecting: <span className={connecting ? \"text-yellow-400\" : \"text-gray-400\"}>\n                  {connecting ? \"YES\" : \"NO\"}\n                </span></div>\n                <div>Address: <span className=\"text-cyan-400\">\n                  {address || \"None\"}\n                </span></div>\n              </div>\n            </div>\n\n            <div className=\"bg-gray-800 rounded-lg p-4\">\n              <h3 className=\"text-cyan-400 font-space-gothic mb-2\">What happens when you click Connect:</h3>\n              <div className=\"text-sm text-gray-300 space-y-1\">\n                {!walletInstalled && <div>• Will show error and open Phantom website</div>}\n                {walletInstalled && !connected && <div>• Will call window.phantom.solana.connect()</div>}\n                {walletInstalled && !connected && <div>• Will request wallet approval</div>}\n                {walletInstalled && !connected && <div>• Will show your real wallet address</div>}\n                {connected && <div>• Will disconnect from wallet</div>}\n              </div>\n            </div>\n\n            <div className=\"flex justify-center space-x-4\">\n              <TechButton\n                onClick={connected ? disconnect : connect}\n                disabled={connecting}\n                variant={connected ? \"secondary\" : \"accent\"}\n                className=\"min-w-[150px]\"\n              >\n                {connecting ? \"Connecting...\" : connected ? \"Disconnect\" : \"Connect Wallet\"}\n              </TechButton>\n            </div>\n\n            {!walletInstalled && (\n              <div className=\"bg-red-900/20 border border-red-400 rounded-lg p-4\">\n                <h3 className=\"text-red-400 font-space-gothic mb-2\">No Wallet Detected</h3>\n                <p className=\"text-gray-300 text-sm mb-3\">\n                  Install Phantom wallet to test real Solana wallet connection.\n                </p>\n                <TechButton\n                  onClick={() => window.open('https://phantom.app/', '_blank')}\n                  variant=\"secondary\"\n                  size=\"sm\"\n                >\n                  Install Phantom\n                </TechButton>\n              </div>\n            )}\n          </div>\n        </TechCard>\n      </div>\n    </div>\n  );\n}","size_bytes":3464},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/cypherpunk/AnonymityGame.tsx":{"content":"import { useState } from \"react\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\n\ninterface AnonymityGameProps {\n  onComplete: () => void;\n}\n\nexport function AnonymityGame({ onComplete }: AnonymityGameProps) {\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [animationStep, setAnimationStep] = useState(0);\n  const [showExplanation, setShowExplanation] = useState(false);\n\n  const handleSendMessage = async () => {\n    setIsAnimating(true);\n    setAnimationStep(0);\n    \n    // Animate through each remailer node\n    for (let i = 1; i <= 4; i++) {\n      await new Promise(resolve => setTimeout(resolve, 800));\n      setAnimationStep(i);\n    }\n    \n    await new Promise(resolve => setTimeout(resolve, 1000));\n    setIsAnimating(false);\n    setShowExplanation(true);\n  };\n\n  const handleContinue = () => {\n    onComplete();\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Explanation */}\n      <TechCard variant=\"purple\">\n        <div className=\"p-6\">\n          <h2 className=\"font-space-gothic text-2xl text-tech-purple-400 mb-4\">Anonymous Remailer Network</h2>\n          <p className=\"text-gray-300 mb-4\">\n            Watch how a message travels through multiple remailer nodes to achieve anonymity. \n            Each node strips away identifying information, making it impossible to trace the \n            original sender.\n          </p>\n          <div className=\"bg-tech-purple-900/20 border-l-4 border-tech-purple-400 p-4 rounded\">\n            <p className=\"font-code text-tech-purple-400 text-sm\">\n              DEMO: Click \"Send Message\" to see anonymity in action\n            </p>\n          </div>\n        </div>\n      </TechCard>\n\n      {/* Visual Demonstration */}\n      <TechCard variant=\"cyan\" className=\"relative overflow-hidden\">\n        <div className=\"p-8\">\n          <div className=\"relative h-64 flex items-center justify-between\">\n            {/* Sender */}\n            <div className=\"flex flex-col items-center\">\n              <div className=\"w-16 h-16 bg-tech-cyan-600 rounded-full flex items-center justify-center mb-2\">\n                <span className=\"text-xl\">👤</span>\n              </div>\n              <span className=\"text-tech-cyan-400 font-code text-sm\">YOU</span>\n            </div>\n\n            {/* Remailer Nodes */}\n            <div className=\"flex-1 flex justify-center space-x-8\">\n              {[1, 2, 3].map((nodeId) => (\n                <div key={nodeId} className=\"flex flex-col items-center\">\n                  <div className={`w-12 h-12 rounded-lg flex items-center justify-center mb-2 transition-all duration-500 ${\n                    animationStep >= nodeId ? 'bg-tech-purple-600 scale-110' : 'bg-gray-700'\n                  }`}>\n                    <span className=\"text-lg\">🔄</span>\n                  </div>\n                  <span className=\"text-gray-400 font-code text-xs\">NODE {nodeId}</span>\n                </div>\n              ))}\n            </div>\n\n            {/* Recipient */}\n            <div className=\"flex flex-col items-center\">\n              <div className=\"w-16 h-16 bg-tech-cyan-600 rounded-full flex items-center justify-center mb-2\">\n                <span className=\"text-xl\">📰</span>\n              </div>\n              <span className=\"text-tech-cyan-400 font-code text-sm\">RECIPIENT</span>\n            </div>\n\n            {/* Message Packet Animation */}\n            {isAnimating && (\n              <div className={`absolute transition-all duration-800 ease-in-out ${\n                animationStep === 0 ? 'left-16' :\n                animationStep === 1 ? 'left-1/4' :\n                animationStep === 2 ? 'left-1/2' :\n                animationStep === 3 ? 'left-3/4' :\n                'right-16'\n              }`} style={{ top: '50%', transform: 'translateY(-50%)' }}>\n                <div className=\"bg-tech-purple-400 rounded-lg p-2 text-xs font-code text-black\">\n                  <div>FROM: {\n                    animationStep === 0 ? 'journalist@secure.net' :\n                    animationStep === 1 ? 'user████@████.███' :\n                    animationStep === 2 ? '████████@████.███' :\n                    animationStep === 3 ? '████████@████.███' :\n                    'ANONYMOUS'\n                  }</div>\n                  <div>TO: editor@newspaper.com</div>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Connection Lines */}\n          <div className=\"absolute inset-0 flex items-center justify-center pointer-events-none\">\n            <div className=\"w-full h-0.5 bg-gradient-to-r from-tech-cyan-400 via-tech-purple-400 to-tech-cyan-400 opacity-30\"></div>\n          </div>\n        </div>\n      </TechCard>\n\n      {/* Controls */}\n      <div className=\"text-center\">\n        {!showExplanation ? (\n          <TechButton \n            variant=\"accent\" \n            size=\"lg\" \n            onClick={handleSendMessage}\n            disabled={isAnimating}\n          >\n            {isAnimating ? (\n              <>\n                <span className=\"mr-2\">🔄</span>\n                ROUTING MESSAGE...\n              </>\n            ) : (\n              <>\n                <span className=\"mr-2\">📤</span>\n                SEND MESSAGE\n              </>\n            )}\n          </TechButton>\n        ) : (\n          <div className=\"space-y-6 animate-fade-in\">\n            <TechCard variant=\"purple\">\n              <div className=\"p-6\">\n                <h3 className=\"font-space-gothic text-tech-purple-400 text-lg mb-4\">Anonymity Achieved</h3>\n                <div className=\"space-y-3 text-gray-300 text-sm\">\n                  <p>\n                    <strong>What happened:</strong> Your message passed through 3 remailer nodes. \n                    Each node removed identifying information and re-encrypted the message before \n                    forwarding it.\n                  </p>\n                  <p>\n                    <strong>Result:</strong> The recipient receives the message, but cannot trace it \n                    back to you. Even if one node is compromised, your identity remains protected.\n                  </p>\n                  <div className=\"bg-tech-purple-900/20 border-l-4 border-tech-purple-400 p-3 rounded\">\n                    <p className=\"text-tech-purple-400 font-code text-xs\">\n                      ANONYMITY PILLAR: Multiple hops break the connection between sender and receiver\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </TechCard>\n            \n            <TechButton variant=\"accent\" size=\"lg\" onClick={handleContinue}>\n              PROCEED TO PILLARS 3 & 4\n              <span className=\"ml-2\">→</span>\n            </TechButton>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":6894},"client/src/components/cypherpunk/ConnectingTheDots.tsx":{"content":"import { useState } from \"react\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\n\ninterface Connection {\n  id: number;\n  concept: string;\n  feature: string;\n  conceptDescription: string;\n  featureDescription: string;\n}\n\ninterface ConnectingTheDotsProps {\n  onComplete: () => void;\n}\n\nconst connections: Connection[] = [\n  {\n    id: 1,\n    concept: \"Anonymous eCash\",\n    feature: \"Pseudonymous Addresses\",\n    conceptDescription: \"Digital cash that protects user identity\",\n    featureDescription: \"Bitcoin addresses hide real-world identity\"\n  },\n  {\n    id: 2,\n    concept: \"Decentralized Servers\",\n    feature: \"Peer-to-Peer Network\",\n    conceptDescription: \"No single point of control or failure\",\n    featureDescription: \"Network of independent nodes\"\n  },\n  {\n    id: 3,\n    concept: \"\\\"We Write Code\\\"\",\n    feature: \"Open Source Codebase\",\n    conceptDescription: \"Cypherpunk philosophy of building solutions\",\n    featureDescription: \"Bitcoin code is publicly auditable\"\n  },\n  {\n    id: 4,\n    concept: \"Digital Signatures\",\n    feature: \"Public/Private Key Crypto\",\n    conceptDescription: \"Cryptographic proof of ownership\",\n    featureDescription: \"Mathematical verification of transactions\"\n  }\n];\n\nexport function ConnectingTheDots({ onComplete }: ConnectingTheDotsProps) {\n  const [selectedConcept, setSelectedConcept] = useState<number | null>(null);\n  const [completedConnections, setCompletedConnections] = useState<number[]>([]);\n  const [activeConnections, setActiveConnections] = useState<{[key: number]: number}>({});\n  const [showCompletion, setShowCompletion] = useState(false);\n\n  const handleConceptClick = (conceptId: number) => {\n    if (completedConnections.includes(conceptId)) return;\n    setSelectedConcept(conceptId);\n  };\n\n  const handleFeatureClick = (featureId: number) => {\n    if (!selectedConcept || completedConnections.includes(selectedConcept)) return;\n    \n    const connection = connections.find(c => c.id === selectedConcept);\n    const targetFeature = connections.find(c => c.id === featureId);\n    \n    if (connection && targetFeature && connection.id === targetFeature.id) {\n      // Correct connection\n      setCompletedConnections(prev => [...prev, selectedConcept]);\n      setActiveConnections(prev => ({...prev, [selectedConcept]: featureId}));\n      setSelectedConcept(null);\n      \n      if (completedConnections.length + 1 === connections.length) {\n        setTimeout(() => setShowCompletion(true), 1000);\n      }\n    } else {\n      // Incorrect connection - show feedback\n      setTimeout(() => setSelectedConcept(null), 500);\n    }\n  };\n\n  const handleContinue = () => {\n    onComplete();\n  };\n\n  const isAllComplete = completedConnections.length === connections.length;\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Instructions */}\n      <TechCard variant=\"purple\">\n        <div className=\"p-6\">\n          <h2 className=\"font-space-gothic text-2xl text-tech-purple-400 mb-4\">Connection Analysis</h2>\n          <p className=\"text-gray-300 mb-4\">\n            Connect each cypherpunk concept to its corresponding Bitcoin implementation. \n            Click a concept on the left, then click its matching feature on the right.\n          </p>\n          <div className=\"bg-tech-purple-900/20 border-l-4 border-tech-purple-400 p-4 rounded\">\n            <p className=\"font-code text-tech-purple-400 text-sm\">\n              PROGRESS: {completedConnections.length} / {connections.length} connections made\n            </p>\n          </div>\n        </div>\n      </TechCard>\n\n      {/* Connection Game */}\n      <div className=\"grid lg:grid-cols-2 gap-12\">\n        {/* Cypherpunk Concepts */}\n        <div className=\"space-y-4\">\n          <h3 className=\"font-tech text-tech-cyan-400 text-xl text-center mb-6\">\n            CYPHERPUNK CONCEPTS\n          </h3>\n          \n          {connections.map((connection) => (\n            <TechCard \n              key={`concept-${connection.id}`}\n              variant=\"cyan\"\n              className={`cursor-pointer transition-all duration-300 relative ${\n                completedConnections.includes(connection.id) \n                  ? 'opacity-50 ring-2 ring-green-400' \n                  : selectedConcept === connection.id\n                  ? 'ring-2 ring-tech-cyan-400 scale-105'\n                  : 'hover:scale-105 hover:ring-1 hover:ring-tech-cyan-400'\n              }`}\n              onClick={() => handleConceptClick(connection.id)}\n            >\n              <div className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-tech text-tech-cyan-400 text-lg mb-2\">\n                      {connection.concept}\n                    </h4>\n                    <p className=\"text-gray-300 text-sm\">\n                      {connection.conceptDescription}\n                    </p>\n                  </div>\n                  \n                  <div className=\"ml-4\">\n                    {completedConnections.includes(connection.id) ? (\n                      <div className=\"w-8 h-8 bg-green-600 rounded-full flex items-center justify-center\">\n                        <span className=\"text-white font-bold text-sm\">✓</span>\n                      </div>\n                    ) : selectedConcept === connection.id ? (\n                      <div className=\"w-8 h-8 bg-tech-cyan-400 rounded-full animate-pulse\"></div>\n                    ) : (\n                      <div className=\"w-8 h-8 bg-gray-600 rounded-full\"></div>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Connection Line */}\n              {activeConnections[connection.id] && (\n                <div className=\"absolute top-1/2 right-0 w-12 h-0.5 bg-green-400 transform translate-x-full -translate-y-1/2 z-10\">\n                  <div className=\"absolute right-0 top-1/2 w-2 h-2 bg-green-400 rounded-full transform translate-x-1/2 -translate-y-1/2\"></div>\n                </div>\n              )}\n            </TechCard>\n          ))}\n        </div>\n\n        {/* Bitcoin Features */}\n        <div className=\"space-y-4\">\n          <h3 className=\"font-tech text-tech-purple-400 text-xl text-center mb-6\">\n            BITCOIN FEATURES\n          </h3>\n          \n          {connections.map((connection) => (\n            <TechCard \n              key={`feature-${connection.id}`}\n              variant=\"purple\"\n              className={`cursor-pointer transition-all duration-300 relative ${\n                completedConnections.includes(connection.id)\n                  ? 'opacity-50 ring-2 ring-green-400'\n                  : selectedConcept && !completedConnections.includes(selectedConcept)\n                  ? 'hover:scale-105 hover:ring-1 hover:ring-tech-purple-400'\n                  : 'opacity-70'\n              }`}\n              onClick={() => handleFeatureClick(connection.id)}\n            >\n              <div className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"ml-4\">\n                    {completedConnections.includes(connection.id) ? (\n                      <div className=\"w-8 h-8 bg-green-600 rounded-full flex items-center justify-center\">\n                        <span className=\"text-white font-bold text-sm\">✓</span>\n                      </div>\n                    ) : (\n                      <div className=\"w-8 h-8 bg-gray-600 rounded-full\"></div>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <h4 className=\"font-tech text-tech-purple-400 text-lg mb-2\">\n                      {connection.feature}\n                    </h4>\n                    <p className=\"text-gray-300 text-sm\">\n                      {connection.featureDescription}\n                    </p>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Connection Line */}\n              {activeConnections[connection.id] && (\n                <div className=\"absolute top-1/2 left-0 w-12 h-0.5 bg-green-400 transform -translate-x-full -translate-y-1/2 z-10\">\n                  <div className=\"absolute left-0 top-1/2 w-2 h-2 bg-green-400 rounded-full transform -translate-x-1/2 -translate-y-1/2\"></div>\n                </div>\n              )}\n            </TechCard>\n          ))}\n        </div>\n      </div>\n\n      {/* Completion Screen */}\n      {showCompletion && (\n        <TechCard variant=\"cyan\" className=\"animate-fade-in\">\n          <div className=\"p-8 text-center\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-tech-cyan-400 to-tech-purple-400 rounded-full mx-auto flex items-center justify-center mb-4\">\n              <span className=\"text-2xl\">🔗</span>\n            </div>\n            \n            <h3 className=\"font-tech text-tech-cyan-400 text-xl mb-4\">\n              ALL CONNECTIONS ESTABLISHED\n            </h3>\n            \n            <p className=\"text-gray-300 mb-6\">\n              You've successfully traced how cypherpunk principles evolved into Bitcoin's core features. \n              Each concept laid the groundwork for Satoshi's revolutionary design.\n            </p>\n            \n            <div className=\"bg-tech-cyan-900/20 border-l-4 border-tech-cyan-400 p-4 rounded mb-6\">\n              <p className=\"text-tech-cyan-400 font-code text-sm\">\n                INSIGHT: Bitcoin didn't emerge from nothing—it was the culmination of decades of cypherpunk innovation\n              </p>\n            </div>\n            \n            <TechButton variant=\"accent\" size=\"lg\" onClick={handleContinue}>\n              EXPLORE THE NEXT CHALLENGE\n              <span className=\"ml-2\">→</span>\n            </TechButton>\n          </div>\n        </TechCard>\n      )}\n\n      {/* Progress Indicator */}\n      {!showCompletion && (\n        <div className=\"text-center\">\n          <div className=\"inline-flex space-x-2\">\n            {connections.map((_, index) => (\n              <div\n                key={index}\n                className={`w-3 h-3 rounded-full transition-colors duration-300 ${\n                  completedConnections.length > index ? 'bg-green-400' : 'bg-gray-600'\n                }`}\n              ></div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":10409},"client/src/components/cypherpunk/CryptoWarsTimeline.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\n\ninterface TimelineEvent {\n  year: string;\n  title: string;\n  description: string;\n  impact: string;\n  classification: string;\n}\n\nconst events: TimelineEvent[] = [\n  {\n    year: \"1976\",\n    title: \"Public Key Cryptography Discovered\",\n    description: \"Whitfield Diffie and Martin Hellman publish 'New Directions in Cryptography', introducing the concept of public-key cryptography. This breakthrough allows secure communication without sharing secret keys.\",\n    impact: \"Foundation for all modern secure communications\",\n    classification: \"DECLASSIFIED\"\n  },\n  {\n    year: \"1991\", \n    title: \"PGP Released to the World\",\n    description: \"Phil Zimmermann releases Pretty Good Privacy (PGP), making military-grade encryption available to civilians. The US government considers this a violation of arms export restrictions.\",\n    impact: \"Democratized encryption for the masses\",\n    classification: \"RESTRICTED\"\n  },\n  {\n    year: \"1993\",\n    title: \"The Clipper Chip Controversy\",\n    description: \"The US government proposes the Clipper Chip—an encryption device with a government backdoor. Cypherpunks rally against this attempt to weaken privacy, ultimately defeating the proposal.\",\n    impact: \"Established precedent against government backdoors\",\n    classification: \"TOP SECRET\"\n  },\n  {\n    year: \"1995\",\n    title: \"SSL Protocol Introduced\",\n    description: \"Netscape introduces Secure Sockets Layer (SSL), bringing cryptographic security to web browsing. This protocol becomes the foundation for HTTPS and secure e-commerce.\",\n    impact: \"Enabled secure web commerce and communications\",\n    classification: \"DECLASSIFIED\"\n  },\n  {\n    year: \"2001\",\n    title: \"Advanced Encryption Standard (AES)\",\n    description: \"The US government adopts AES as the official encryption standard, replacing DES. This cipher, originally called Rijndael, becomes the worldwide standard for symmetric encryption.\",\n    impact: \"Standardized modern encryption globally\",\n    classification: \"DECLASSIFIED\"\n  }\n];\n\ninterface CryptoWarsTimelineProps {\n  onComplete?: () => void;\n}\n\nexport function CryptoWarsTimeline({ onComplete }: CryptoWarsTimelineProps) {\n  // State for automated progression\n  const [currentEventIndex, setCurrentEventIndex] = useState(-1);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [hasStarted, setHasStarted] = useState(false);\n  const [visibleEvents, setVisibleEvents] = useState<number[]>([]);\n  const [isComplete, setIsComplete] = useState(false);\n  \n  // Refs for scroll management\n  const timelineRef = useRef<HTMLDivElement>(null);\n  const eventRefs = useRef<(HTMLDivElement | null)[]>([]);\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Auto-progression timing (3 seconds per event)\n  const PROGRESSION_DELAY = 3000;\n\n  // Initialize event refs array\n  useEffect(() => {\n    eventRefs.current = eventRefs.current.slice(0, events.length);\n  }, []);\n\n  // Automated progression logic\n  useEffect(() => {\n    if (isPlaying && hasStarted) {\n      intervalRef.current = setInterval(() => {\n        setCurrentEventIndex(prev => {\n          const nextIndex = prev + 1;\n          if (nextIndex >= events.length) {\n            setIsPlaying(false);\n            setIsComplete(true);\n            return prev;\n          }\n          return nextIndex;\n        });\n      }, PROGRESSION_DELAY);\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n        intervalRef.current = null;\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    };\n  }, [isPlaying, hasStarted]);\n\n  // Update visible events and scroll when current event changes\n  useEffect(() => {\n    if (currentEventIndex >= 0) {\n      setVisibleEvents(prev => {\n        if (!prev.includes(currentEventIndex)) {\n          return [...prev, currentEventIndex];\n        }\n        return prev;\n      });\n\n      // Scroll to current event (with delay for animation)\n      setTimeout(() => {\n        const eventElement = eventRefs.current[currentEventIndex];\n        if (eventElement && timelineRef.current) {\n          eventElement.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center',\n            inline: 'nearest'\n          });\n        }\n      }, 200);\n    }\n  }, [currentEventIndex]);\n\n  // Control functions\n  const startProgression = () => {\n    setHasStarted(true);\n    setIsPlaying(true);\n    if (currentEventIndex === -1) {\n      setCurrentEventIndex(0);\n    }\n  };\n\n  const pauseProgression = () => {\n    setIsPlaying(false);\n  };\n\n  const goToNextEvent = () => {\n    if (currentEventIndex < events.length - 1) {\n      setCurrentEventIndex(prev => prev + 1);\n    } else if (currentEventIndex === events.length - 1) {\n      setIsComplete(true);\n    }\n  };\n\n  const goToPreviousEvent = () => {\n    if (currentEventIndex > 0) {\n      setCurrentEventIndex(prev => prev - 1);\n    }\n  };\n\n  const resetTimeline = () => {\n    setCurrentEventIndex(-1);\n    setVisibleEvents([]);\n    setIsPlaying(false);\n    setHasStarted(false);\n    setIsComplete(false);\n    if (timelineRef.current) {\n      timelineRef.current.scrollTo({ top: 0, behavior: 'smooth' });\n    }\n  };\n\n  return (\n    <div className=\"relative w-full max-w-6xl mx-auto\">\n      {/* Control Panel */}\n      <div className=\"sticky top-4 z-30 mb-8\">\n        <TechCard variant=\"cyan\" className=\"bg-black/90 backdrop-blur-sm border-cyan-400/50\">\n          <div className=\"p-4\">\n            <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n              {/* Progress Indicator */}\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"font-code text-cyan-400 text-sm\">\n                  CLASSIFIED INTEL: {currentEventIndex + 1} / {events.length}\n                </span>\n                <div className=\"w-32 sm:w-48 bg-gray-700 rounded-full h-2\">\n                  <div \n                    className=\"bg-gradient-to-r from-cyan-400 to-purple-400 h-2 rounded-full transition-all duration-500\"\n                    style={{ width: `${((currentEventIndex + 1) / events.length) * 100}%` }}\n                  ></div>\n                </div>\n              </div>\n\n              {/* Control Buttons */}\n              <div className=\"flex items-center space-x-2 timeline-controls\">\n                {!hasStarted ? (\n                  <TechButton variant=\"accent\" size=\"sm\" onClick={startProgression}>\n                    <span className=\"mr-2\">▶</span>\n                    START INTEL BRIEFING\n                  </TechButton>\n                ) : (\n                  <>\n                    <TechButton \n                      variant=\"secondary\" \n                      size=\"sm\" \n                      onClick={goToPreviousEvent}\n                      disabled={currentEventIndex <= 0}\n                    >\n                      <span>←</span>\n                    </TechButton>\n\n                    <TechButton \n                      variant=\"primary\" \n                      size=\"sm\" \n                      onClick={isPlaying ? pauseProgression : startProgression}\n                    >\n                      <span className=\"mr-2\">{isPlaying ? '⏸' : '▶'}</span>\n                      {isPlaying ? 'PAUSE' : 'PLAY'}\n                    </TechButton>\n\n                    <TechButton \n                      variant=\"secondary\" \n                      size=\"sm\" \n                      onClick={goToNextEvent}\n                      disabled={currentEventIndex >= events.length - 1}\n                    >\n                      <span>→</span>\n                    </TechButton>\n\n                    <TechButton \n                      variant=\"secondary\" \n                      size=\"sm\" \n                      onClick={resetTimeline}\n                    >\n                      <span className=\"mr-2\">↻</span>\n                      RESET\n                    </TechButton>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        </TechCard>\n      </div>\n\n      {/* Timeline Container */}\n      <div ref={timelineRef} className=\"relative min-h-screen\">\n        {/* Central Timeline Line - Responsive */}\n        <div className=\"absolute left-4 sm:left-1/2 sm:transform sm:-translate-x-0.5 w-1 bg-gradient-to-b from-cyan-400 via-purple-400 to-cyan-400 opacity-50\" \n             style={{ height: 'calc(100% - 8rem)' }}>\n        </div>\n        \n        {/* Timeline Events */}\n        <div className=\"space-y-8 sm:space-y-16 timeline-mobile-cards sm:pl-0\">\n          {events.map((event, index) => {\n            const isVisible = visibleEvents.includes(index);\n            const isActive = currentEventIndex === index;\n            const isMobile = typeof window !== 'undefined' && window.innerWidth < 640;\n            \n            return (\n              <div \n                key={event.year}\n                ref={el => eventRefs.current[index] = el}\n                className={`relative transition-all duration-1000 ${\n                  isVisible \n                    ? 'opacity-100 transform translate-y-0 timeline-reveal' \n                    : 'opacity-0 transform translate-y-8'\n                } ${\n                  isMobile \n                    ? 'flex flex-col' \n                    : `flex items-center ${index % 2 === 0 ? 'flex-row' : 'flex-row-reverse'}`\n                }`}\n              >\n                {/* Event Card - Mobile: Full width, Desktop: Alternating sides */}\n                <div className={`${\n                  isMobile \n                    ? 'w-full' \n                    : `w-5/12 ${index % 2 === 0 ? 'pr-8' : 'pl-8'}`\n                }`}>\n                  <TechCard \n                    variant={index % 2 === 0 ? \"cyan\" : \"purple\"} \n                    className={`relative transition-all duration-500 ${\n                      isActive ? 'ring-2 ring-cyan-400 shadow-lg shadow-cyan-400/20 scale-105' : ''\n                    }`}\n                  >\n                    <div className=\"p-4 sm:p-6\">\n                      {/* Classification Badge */}\n                      <div className=\"absolute top-2 right-2 sm:top-4 sm:right-4\">\n                        <span className={`px-2 py-1 text-xs font-code rounded ${\n                          event.classification === 'DECLASSIFIED' ? 'bg-green-900 text-green-400' :\n                          event.classification === 'RESTRICTED' ? 'bg-yellow-900 text-yellow-400' :\n                          'bg-red-900 text-red-400'\n                        } ${isActive ? 'animate-pulse' : ''}`}>\n                          {event.classification}\n                        </span>\n                      </div>\n                      \n                      {/* Event Header */}\n                      <div className=\"mb-4\">\n                        <span className={`text-2xl sm:text-3xl font-titulo ${\n                          index % 2 === 0 ? 'text-cyan-400' : 'text-purple-400'\n                        } ${isActive ? 'animate-pulse' : ''}`}>\n                          {event.year}\n                        </span>\n                        <h3 className=\"font-tech text-base sm:text-lg text-white mt-2 leading-tight\">\n                          {event.title}\n                        </h3>\n                      </div>\n                      \n                      {/* Event Description */}\n                      <p className=\"text-gray-300 text-sm sm:text-base mb-4 leading-relaxed\">\n                        {event.description}\n                      </p>\n                      \n                      {/* Impact Section */}\n                      <div className={`border-l-4 pl-4 ${\n                        index % 2 === 0 ? 'border-cyan-400' : 'border-purple-400'\n                      }`}>\n                        <p className={`text-xs sm:text-sm font-code ${\n                          index % 2 === 0 ? 'text-cyan-400' : 'text-purple-400'\n                        }`}>\n                          IMPACT: {event.impact}\n                        </p>\n                      </div>\n\n                      {/* Active Event Indicator */}\n                      {isActive && (\n                        <div className=\"absolute -top-1 -left-1 -right-1 -bottom-1 border-2 border-cyan-400 rounded-lg animate-pulse pointer-events-none\"></div>\n                      )}\n                    </div>\n                  </TechCard>\n                </div>\n                \n                {/* Central Timeline Node - Hidden on mobile */}\n                {!isMobile && (\n                  <div className={`w-8 h-8 rounded-full border-4 bg-gray-900 z-10 flex items-center justify-center transition-all duration-500 ${\n                    index % 2 === 0 ? 'border-cyan-400' : 'border-purple-400'\n                  } ${isActive ? 'scale-125 shadow-lg' : ''} ${\n                    isVisible ? 'animate-pulse' : ''\n                  }`}>\n                    <div className={`w-3 h-3 rounded-full transition-all duration-500 ${\n                      index % 2 === 0 ? 'bg-cyan-400' : 'bg-purple-400'\n                    } ${isActive ? 'scale-150' : ''}`}></div>\n                  </div>\n                )}\n                \n                {/* Spacer for desktop layout */}\n                {!isMobile && <div className=\"w-5/12\"></div>}\n\n                {/* Mobile Timeline Node */}\n                {isMobile && (\n                  <div className={`absolute -left-8 top-8 w-6 h-6 rounded-full border-2 bg-gray-900 z-10 flex items-center justify-center transition-all duration-500 ${\n                    index % 2 === 0 ? 'border-cyan-400' : 'border-purple-400'\n                  } ${isActive ? 'scale-125 shadow-lg' : ''} ${\n                    isVisible ? 'animate-pulse' : ''\n                  }`}>\n                    <div className={`w-2 h-2 rounded-full transition-all duration-500 ${\n                      index % 2 === 0 ? 'bg-cyan-400' : 'bg-purple-400'\n                    } ${isActive ? 'scale-150' : ''}`}></div>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n        \n        {/* Timeline End Decoration */}\n        {isComplete && (\n          <div className=\"mt-16 sm:mt-32 text-center timeline-fade-in\">\n            <div className=\"inline-block bg-gray-800 px-4 sm:px-6 py-2 sm:py-3 rounded border border-cyan-400/50 mb-8\">\n              <span className=\"font-code text-cyan-400 text-xs sm:text-sm\">\n                END OF TIMELINE • CLASSIFICATION LEVEL: EYES ONLY\n              </span>\n            </div>\n            \n            {onComplete && (\n              <div className=\"animate-bounce\">\n                <TechButton variant=\"accent\" size=\"lg\" onClick={onComplete}>\n                  <span className=\"mr-2\">🚀</span>\n                  PROCEED TO CHAPTER 2\n                </TechButton>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n\n    </div>\n  );\n}","size_bytes":15064},"client/src/components/cypherpunk/DAOHackDilemma.tsx":{"content":"import { useState } from \"react\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\n\ninterface DAOHackDilemmaProps {\n  onComplete: () => void;\n}\n\nexport function DAOHackDilemma({ onComplete }: DAOHackDilemmaProps) {\n  const [userReflection, setUserReflection] = useState(\"\");\n  const [showAnalysis, setShowAnalysis] = useState(false);\n\n  const handleSubmitReflection = () => {\n    if (userReflection.trim().length > 50) {\n      setShowAnalysis(true);\n    }\n  };\n\n  const handleContinue = () => {\n    onComplete();\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Background */}\n      <TechCard variant=\"cyan\">\n        <div className=\"p-8\">\n          <h2 className=\"font-space-gothic text-2xl text-tech-cyan-400 mb-6\">The Philosophy Meets Reality</h2>\n          \n          <div className=\"space-y-4 text-gray-300 leading-relaxed\">\n            <p>\n              By 2016, Bitcoin had inspired Ethereum—a platform for \"smart contracts\" that could \n              execute automatically without human intervention. The cypherpunk dream seemed realized: \n              unstoppable code governing digital assets.\n            </p>\n            \n            <div className=\"bg-tech-cyan-900/20 border-l-4 border-tech-cyan-400 p-4 rounded\">\n              <p className=\"font-code text-tech-cyan-400 text-sm\">\n                JUNE 17, 2016: The DAO (Decentralized Autonomous Organization) launches with $150M\n              </p>\n            </div>\n            \n            <p>\n              The DAO was revolutionary—a venture fund with no human management, governed entirely \n              by smart contract code. Investors could fund projects through voting, and the code \n              would execute decisions automatically.\n            </p>\n            \n            <p className=\"text-tech-cyan-400 font-medium\">\n              Then disaster struck.\n            </p>\n          </div>\n        </div>\n      </TechCard>\n\n      {/* The Crisis */}\n      <TechCard variant=\"purple\" className=\"relative\">\n        <div className=\"p-8\">\n          <div className=\"absolute top-4 right-4\">\n            <span className=\"px-3 py-1 bg-red-900 text-red-400 text-xs font-code rounded animate-pulse\">\n              CRISIS EVENT\n            </span>\n          </div>\n          \n          <h3 className=\"font-space-gothic text-tech-purple-400 text-xl mb-6\">The Hack</h3>\n          \n          <div className=\"space-y-4 text-gray-300 text-sm\">\n            <p>\n              A hacker discovered a flaw in The DAO's smart contract code. They exploited it to drain \n              approximately $50 million worth of Ethereum into a child DAO they controlled.\n            </p>\n            \n            <div className=\"bg-red-900/20 border border-red-400/50 rounded p-4\">\n              <h4 className=\"text-red-400 font-code text-sm mb-2\">TECHNICAL DETAILS:</h4>\n              <ul className=\"text-xs space-y-1 text-gray-300\">\n                <li>• Recursive call vulnerability in withdrawal function</li>\n                <li>• Attacker repeatedly called withdraw before balance update</li>\n                <li>• $50M+ drained over several hours</li>\n                <li>• Funds locked in child DAO for 28 days</li>\n              </ul>\n            </div>\n            \n            <p>\n              The Ethereum community faced an unprecedented philosophical crisis. The code had worked \n              exactly as written—but the result was catastrophic theft.\n            </p>\n          </div>\n        </div>\n      </TechCard>\n\n      {/* The Dilemma */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <TechCard variant=\"cyan\">\n          <div className=\"p-6\">\n            <h4 className=\"font-tech text-tech-cyan-400 text-lg mb-4\">Position A: \"Code is Law\"</h4>\n            <div className=\"space-y-3 text-gray-300 text-sm\">\n              <p>\n                <strong>The Purist View:</strong> Smart contracts are immutable by design. \n                If we change the rules now, we destroy the entire premise of unstoppable code.\n              </p>\n              \n              <div className=\"bg-tech-cyan-900/20 border-l-4 border-tech-cyan-400 p-3 rounded\">\n                <p className=\"text-tech-cyan-400 font-code text-xs\">\n                  \"The hack was technically legal according to the code\"\n                </p>\n              </div>\n              \n              <ul className=\"text-xs space-y-1\">\n                <li>• Maintains blockchain immutability principle</li>\n                <li>• Preserves censorship resistance</li>\n                <li>• Upholds \"unstoppable code\" philosophy</li>\n                <li>• Investors knew the risks</li>\n              </ul>\n            </div>\n          </div>\n        </TechCard>\n\n        <TechCard variant=\"purple\">\n          <div className=\"p-6\">\n            <h4 className=\"font-tech text-tech-purple-400 text-lg mb-4\">Position B: Human Intervention</h4>\n            <div className=\"space-y-3 text-gray-300 text-sm\">\n              <p>\n                <strong>The Pragmatic View:</strong> This was clearly theft, not intended behavior. \n                We have the power to fix this injustice and should use it.\n              </p>\n              \n              <div className=\"bg-tech-purple-900/20 border-l-4 border-tech-purple-400 p-3 rounded\">\n                <p className=\"text-tech-purple-400 font-code text-xs\">\n                  \"Moral obligations supersede technical purism\"\n                </p>\n              </div>\n              \n              <ul className=\"text-xs space-y-1\">\n                <li>• Prevents massive financial loss</li>\n                <li>• Protects innocent investors</li>\n                <li>• Demonstrates community responsibility</li>\n                <li>• Malicious exploitation shouldn't be rewarded</li>\n              </ul>\n            </div>\n          </div>\n        </TechCard>\n      </div>\n\n      {/* User Reflection */}\n      <TechCard variant=\"cyan\">\n        <div className=\"p-8\">\n          <h3 className=\"font-space-gothic text-tech-cyan-400 text-lg mb-4\">Your Perspective</h3>\n          <p className=\"text-gray-300 mb-4\">\n            The Ethereum community ultimately chose to \"hard fork\"—creating a new version of the \n            blockchain that returned the stolen funds. This decision split the community forever.\n          </p>\n          <p className=\"text-gray-300 mb-6\">\n            What would you have done? Share your thoughts on this fundamental conflict between \n            ideological purity and pragmatic intervention:\n          </p>\n          \n          <textarea\n            value={userReflection}\n            onChange={(e) => setUserReflection(e.target.value)}\n            placeholder=\"Consider the tensions between immutability, justice, and community consensus. How do we balance cypherpunk ideals with real-world consequences?\"\n            className=\"w-full h-32 bg-black border-2 border-tech-cyan-400 rounded p-4 text-green-400 font-mono text-sm placeholder-gray-500 focus:outline-none focus:border-tech-cyan-300 resize-none\"\n          />\n          \n          <div className=\"flex items-center justify-between mt-4\">\n            <span className=\"text-gray-400 text-xs font-code\">\n              {userReflection.length}/1000 characters\n            </span>\n            \n            <TechButton \n              variant=\"accent\" \n              onClick={handleSubmitReflection}\n              disabled={userReflection.trim().length < 50}\n            >\n              SUBMIT REFLECTION\n            </TechButton>\n          </div>\n        </div>\n      </TechCard>\n\n      {/* Analysis and Conclusion */}\n      {showAnalysis && (\n        <TechCard variant=\"purple\" className=\"animate-fade-in\">\n          <div className=\"p-8\">\n            <h3 className=\"font-space-gothic text-tech-purple-400 text-lg mb-4\">The Lasting Impact</h3>\n            \n            <div className=\"space-y-4 text-gray-300 text-sm\">\n              <p>\n                Your reflection highlights the central tension in blockchain governance. \n                The DAO hack forced the crypto community to confront uncomfortable questions \n                about immutability, justice, and collective decision-making.\n              </p>\n              \n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"bg-tech-purple-900/20 border-l-4 border-tech-purple-400 p-4 rounded\">\n                  <h4 className=\"text-tech-purple-400 font-code text-sm mb-2\">THE FORK:</h4>\n                  <p className=\"text-xs\">\n                    Ethereum hard forked, returning stolen funds. The original chain became \n                    \"Ethereum Classic,\" maintaining the hack's results.\n                  </p>\n                </div>\n                \n                <div className=\"bg-tech-cyan-900/20 border-l-4 border-tech-cyan-400 p-4 rounded\">\n                  <h4 className=\"text-tech-cyan-400 font-code text-sm mb-2\">THE LESSON:</h4>\n                  <p className=\"text-xs\">\n                    Technology alone cannot solve governance. Human judgment and community \n                    consensus remain essential for complex decisions.\n                  </p>\n                </div>\n              </div>\n              \n              <p>\n                This crisis revealed that \"code is law\" is more complex than early cypherpunks imagined. \n                As blockchain technology matures, balancing ideological purity with practical governance \n                remains one of its greatest challenges.\n              </p>\n            </div>\n            \n            <div className=\"mt-8 text-center\">\n              <TechButton variant=\"accent\" size=\"lg\" onClick={handleContinue}>\n                COMPLETE MODULE 3\n                <span className=\"ml-2\">→</span>\n              </TechButton>\n            </div>\n          </div>\n        </TechCard>\n      )}\n    </div>\n  );\n}","size_bytes":9942},"client/src/components/cypherpunk/DecentralizationVisualization.tsx":{"content":"import { useState } from \"react\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\n\ninterface DecentralizationVisualizationProps {\n  onComplete: () => void;\n}\n\ninterface NetworkNode {\n  id: number;\n  x: number;\n  y: number;\n  isActive: boolean;\n  isCentral?: boolean;\n}\n\nexport function DecentralizationVisualization({ onComplete }: DecentralizationVisualizationProps) {\n  const [centralizedNodes, setCentralizedNodes] = useState<NetworkNode[]>([\n    { id: 0, x: 50, y: 50, isActive: true, isCentral: true },\n    { id: 1, x: 20, y: 20, isActive: true },\n    { id: 2, x: 80, y: 20, isActive: true },\n    { id: 3, x: 20, y: 80, isActive: true },\n    { id: 4, x: 80, y: 80, isActive: true },\n    { id: 5, x: 50, y: 15, isActive: true },\n    { id: 6, x: 50, y: 85, isActive: true },\n  ]);\n\n  const [decentralizedNodes, setDecentralizedNodes] = useState<NetworkNode[]>([\n    { id: 0, x: 25, y: 25, isActive: true },\n    { id: 1, x: 75, y: 25, isActive: true },\n    { id: 2, x: 25, y: 75, isActive: true },\n    { id: 3, x: 75, y: 75, isActive: true },\n    { id: 4, x: 50, y: 15, isActive: true },\n    { id: 5, x: 15, y: 50, isActive: true },\n    { id: 6, x: 85, y: 50, isActive: true },\n    { id: 7, x: 50, y: 85, isActive: true },\n  ]);\n\n  const [centralizedFailed, setCentralizedFailed] = useState(false);\n  const [decentralizedFailedNode, setDecentralizedFailedNode] = useState<number | null>(null);\n  const [showExplanation, setShowExplanation] = useState(false);\n\n  const handleCentralizedClick = (nodeId: number) => {\n    if (nodeId === 0) { // Central server\n      setCentralizedNodes(nodes => nodes.map(node => ({ ...node, isActive: false })));\n      setCentralizedFailed(true);\n      setShowExplanation(true);\n    }\n  };\n\n  const handleDecentralizedClick = (nodeId: number) => {\n    setDecentralizedNodes(nodes => nodes.map(node => \n      node.id === nodeId ? { ...node, isActive: false } : node\n    ));\n    setDecentralizedFailedNode(nodeId);\n    if (!showExplanation) setShowExplanation(true);\n  };\n\n  const resetNetworks = () => {\n    setCentralizedNodes(nodes => nodes.map(node => ({ ...node, isActive: true })));\n    setDecentralizedNodes(nodes => nodes.map(node => ({ ...node, isActive: true })));\n    setCentralizedFailed(false);\n    setDecentralizedFailedNode(null);\n    setShowExplanation(false);\n  };\n\n  const handleContinue = () => {\n    onComplete();\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Explanation */}\n      <TechCard variant=\"cyan\">\n        <div className=\"p-6\">\n          <h2 className=\"font-space-gothic text-2xl text-tech-cyan-400 mb-4\">Network Architecture Comparison</h2>\n          <p className=\"text-gray-300 mb-4\">\n            Explore the fundamental difference between centralized and decentralized networks. \n            Click on nodes to see how each architecture responds to failures.\n          </p>\n          <div className=\"bg-tech-cyan-900/20 border-l-4 border-tech-cyan-400 p-4 rounded\">\n            <p className=\"font-code text-tech-cyan-400 text-sm\">\n              INTERACTIVE DEMO: Click nodes to simulate attacks or failures\n            </p>\n          </div>\n        </div>\n      </TechCard>\n\n      {/* Network Visualizations */}\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Centralized Network */}\n        <TechCard variant=\"purple\">\n          <div className=\"p-6\">\n            <h3 className=\"font-tech text-tech-purple-400 text-lg mb-4 text-center\">\n              CENTRALIZED NETWORK\n            </h3>\n            \n            <div className=\"relative h-64 bg-gray-900 rounded-lg border border-tech-purple-600/30 overflow-hidden\">\n              <svg className=\"w-full h-full\">\n                {/* Connection lines */}\n                {centralizedNodes.filter(node => !node.isCentral).map(node => (\n                  <line\n                    key={`line-${node.id}`}\n                    x1={`${centralizedNodes[0].x}%`}\n                    y1={`${centralizedNodes[0].y}%`}\n                    x2={`${node.x}%`}\n                    y2={`${node.y}%`}\n                    stroke={node.isActive && centralizedNodes[0].isActive ? '#8b5cf6' : '#ef4444'}\n                    strokeWidth=\"2\"\n                    className=\"transition-all duration-500\"\n                    opacity={node.isActive && centralizedNodes[0].isActive ? 0.8 : 0.3}\n                  />\n                ))}\n                \n                {/* Nodes */}\n                {centralizedNodes.map(node => (\n                  <circle\n                    key={node.id}\n                    cx={`${node.x}%`}\n                    cy={`${node.y}%`}\n                    r={node.isCentral ? \"16\" : \"8\"}\n                    fill={node.isActive ? (node.isCentral ? '#8b5cf6' : '#a855f7') : '#ef4444'}\n                    className=\"cursor-pointer transition-all duration-500 hover:r-12\"\n                    onClick={() => handleCentralizedClick(node.id)}\n                  />\n                ))}\n                \n                {/* Labels */}\n                {centralizedNodes.map(node => (\n                  <text\n                    key={`label-${node.id}`}\n                    x={`${node.x}%`}\n                    y={`${node.y + (node.isCentral ? 8 : 5)}%`}\n                    textAnchor=\"middle\"\n                    fill=\"white\"\n                    fontSize=\"10\"\n                    className=\"font-code\"\n                  >\n                    {node.isCentral ? 'SERVER' : `U${node.id}`}\n                  </text>\n                ))}\n              </svg>\n              \n              {centralizedFailed && (\n                <div className=\"absolute inset-0 flex items-center justify-center bg-red-900/50\">\n                  <span className=\"text-red-400 font-code text-lg\">NETWORK FAILURE</span>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"mt-4 text-center\">\n              <p className=\"text-gray-400 text-sm mb-2\">Click the central server to simulate failure</p>\n              <div className=\"flex items-center justify-center text-xs\">\n                <span className=\"w-2 h-2 bg-tech-purple-400 rounded-full mr-2\"></span>\n                <span className=\"text-gray-500\">Single point of failure</span>\n              </div>\n            </div>\n          </div>\n        </TechCard>\n\n        {/* Decentralized Network */}\n        <TechCard variant=\"cyan\">\n          <div className=\"p-6\">\n            <h3 className=\"font-tech text-tech-cyan-400 text-lg mb-4 text-center\">\n              DECENTRALIZED NETWORK\n            </h3>\n            \n            <div className=\"relative h-64 bg-gray-900 rounded-lg border border-tech-cyan-600/30 overflow-hidden\">\n              <svg className=\"w-full h-full\">\n                {/* Connection lines - mesh topology */}\n                {decentralizedNodes.map(node1 => \n                  decentralizedNodes.filter(node2 => {\n                    const distance = Math.sqrt(\n                      Math.pow(node1.x - node2.x, 2) + Math.pow(node1.y - node2.y, 2)\n                    );\n                    return distance < 40 && node1.id !== node2.id;\n                  }).map(node2 => (\n                    <line\n                      key={`line-${node1.id}-${node2.id}`}\n                      x1={`${node1.x}%`}\n                      y1={`${node1.y}%`}\n                      x2={`${node2.x}%`}\n                      y2={`${node2.y}%`}\n                      stroke={node1.isActive && node2.isActive ? '#06b6d4' : '#64748b'}\n                      strokeWidth=\"2\"\n                      className=\"transition-all duration-500\"\n                      opacity={node1.isActive && node2.isActive ? 0.6 : 0.2}\n                    />\n                  ))\n                )}\n                \n                {/* Nodes */}\n                {decentralizedNodes.map(node => (\n                  <circle\n                    key={node.id}\n                    cx={`${node.x}%`}\n                    cy={`${node.y}%`}\n                    r=\"10\"\n                    fill={node.isActive ? '#06b6d4' : '#ef4444'}\n                    className=\"cursor-pointer transition-all duration-500 hover:r-12\"\n                    onClick={() => handleDecentralizedClick(node.id)}\n                  />\n                ))}\n                \n                {/* Labels */}\n                {decentralizedNodes.map(node => (\n                  <text\n                    key={`label-${node.id}`}\n                    x={`${node.x}%`}\n                    y={`${node.y + 6}%`}\n                    textAnchor=\"middle\"\n                    fill=\"white\"\n                    fontSize=\"10\"\n                    className=\"font-code\"\n                  >\n                    N{node.id}\n                  </text>\n                ))}\n              </svg>\n            </div>\n            \n            <div className=\"mt-4 text-center\">\n              <p className=\"text-gray-400 text-sm mb-2\">Click any node to simulate failure</p>\n              <div className=\"flex items-center justify-center text-xs\">\n                <span className=\"w-2 h-2 bg-tech-cyan-400 rounded-full mr-2\"></span>\n                <span className=\"text-gray-500\">Fault-tolerant mesh network</span>\n              </div>\n            </div>\n          </div>\n        </TechCard>\n      </div>\n\n      {/* Controls */}\n      <div className=\"text-center space-y-4\">\n        <TechButton variant=\"secondary\" onClick={resetNetworks}>\n          <span className=\"mr-2\">🔄</span>\n          RESET NETWORKS\n        </TechButton>\n      </div>\n\n      {/* Explanation */}\n      {showExplanation && (\n        <TechCard variant=\"purple\" className=\"animate-fade-in\">\n          <div className=\"p-6\">\n            <h3 className=\"font-tech text-tech-purple-400 text-lg mb-4\">\n              {centralizedFailed ? 'Centralized Network Failure' : 'Decentralized Network Resilience'}\n            </h3>\n            \n            <div className=\"space-y-3 text-gray-300 text-sm\">\n              {centralizedFailed ? (\n                <>\n                  <p>\n                    <strong>What happened:</strong> When the central server failed, the entire network \n                    became unusable. All communication paths were severed simultaneously.\n                  </p>\n                  <p>\n                    <strong>Real-world impact:</strong> This is why centralized services can be easily \n                    censored or shut down by authorities. A single point of failure affects everyone.\n                  </p>\n                  <div className=\"bg-red-900/20 border-l-4 border-red-400 p-3 rounded\">\n                    <p className=\"text-red-400 font-code text-xs\">\n                      VULNERABILITY: All eggs in one basket makes the system fragile\n                    </p>\n                  </div>\n                </>\n              ) : (\n                <>\n                  <p>\n                    <strong>What happened:</strong> Even with node failures, the decentralized network \n                    continues operating. Other nodes route around the failed components.\n                  </p>\n                  <p>\n                    <strong>Real-world benefit:</strong> This resilience makes decentralized networks \n                    extremely difficult to censor or completely shut down.\n                  </p>\n                  <div className=\"bg-green-900/20 border-l-4 border-green-400 p-3 rounded\">\n                    <p className=\"text-green-400 font-code text-xs\">\n                      RESILIENCE PILLARS: Redundancy and mesh connectivity ensure survival\n                    </p>\n                  </div>\n                </>\n              )}\n            </div>\n            \n            <div className=\"mt-6 text-center\">\n              <TechButton variant=\"accent\" size=\"lg\" onClick={handleContinue}>\n                COMPLETE MODULE 2\n                <span className=\"ml-2\">→</span>\n              </TechButton>\n            </div>\n          </div>\n        </TechCard>\n      )}\n    </div>\n  );\n}","size_bytes":11992},"client/src/components/cypherpunk/DoubleSpendProblem.tsx":{"content":"import { useState } from \"react\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\n\ninterface DoubleSpendProblemProps {\n  onComplete: () => void;\n}\n\nexport function DoubleSpendProblem({ onComplete }: DoubleSpendProblemProps) {\n  const [showAnimation, setShowAnimation] = useState(false);\n  const [animationStep, setAnimationStep] = useState(0);\n  const [showExplanation, setShowExplanation] = useState(false);\n\n  const handleDemonstrate = async () => {\n    setShowAnimation(true);\n    setAnimationStep(0);\n    \n    // Animation sequence\n    for (let i = 1; i <= 4; i++) {\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      setAnimationStep(i);\n    }\n    \n    await new Promise(resolve => setTimeout(resolve, 1500));\n    setShowExplanation(true);\n  };\n\n  const handleContinue = () => {\n    onComplete();\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Problem Explanation */}\n      <TechCard variant=\"purple\">\n        <div className=\"p-8\">\n          <h2 className=\"font-space-gothic text-2xl text-tech-purple-400 mb-6\">The Digital Money Challenge</h2>\n          \n          <div className=\"space-y-4 text-gray-300 leading-relaxed mb-8\">\n            <p>\n              Physical coins can't be in two places at once. But digital files can be copied infinitely. \n              This creates a fundamental problem for digital money: how do you prevent someone from \n              spending the same digital coin twice?\n            </p>\n            \n            <div className=\"bg-tech-purple-900/20 border-l-4 border-tech-purple-400 p-4 rounded\">\n              <p className=\"font-code text-tech-purple-400 text-sm\">\n                CORE PROBLEM: Digital information can be duplicated without destroying the original\n              </p>\n            </div>\n            \n            <p>\n              Traditional solutions required a central authority—a bank—to track all transactions. \n              But cypherpunks wanted digital money without central control. The challenge seemed impossible.\n            </p>\n          </div>\n        </div>\n      </TechCard>\n\n      {/* Animation Demo */}\n      <TechCard variant=\"cyan\" className=\"relative overflow-hidden\">\n        <div className=\"p-8\">\n          <h3 className=\"font-tech text-tech-cyan-400 text-lg mb-6 text-center\">\n            Double-Spend Attack Demonstration\n          </h3>\n          \n          <div className=\"relative h-64 flex items-center justify-between\">\n            {/* Alice */}\n            <div className=\"flex flex-col items-center\">\n              <div className=\"w-16 h-16 bg-tech-cyan-600 rounded-full flex items-center justify-center mb-2\">\n                <span className=\"text-xl\">👤</span>\n              </div>\n              <span className=\"text-tech-cyan-400 font-code text-sm\">ALICE</span>\n              <span className=\"text-gray-400 font-code text-xs mt-1\">Has 1 Digital Coin</span>\n            </div>\n\n            {/* Digital Coin */}\n            <div className=\"flex-1 flex justify-center relative\">\n              <div className={`transition-all duration-1000 ${\n                animationStep >= 1 ? 'scale-110' : ''\n              }`}>\n                <div className=\"w-20 h-20 bg-gradient-to-br from-yellow-400 to-orange-400 rounded-full flex items-center justify-center mb-2\">\n                  <span className=\"text-2xl\">🪙</span>\n                </div>\n                <span className=\"block text-center font-code text-xs text-yellow-400\">COIN_001</span>\n              </div>\n              \n              {/* Duplication Effect */}\n              {animationStep >= 2 && (\n                <div className=\"absolute top-0 left-12 transition-all duration-1000 transform\">\n                  <div className=\"w-20 h-20 bg-gradient-to-br from-yellow-400 to-orange-400 rounded-full flex items-center justify-center mb-2 opacity-80\">\n                    <span className=\"text-2xl\">🪙</span>\n                  </div>\n                  <span className=\"block text-center font-code text-xs text-yellow-400\">COIN_001</span>\n                  <span className=\"block text-center font-code text-xs text-red-400\">COPY</span>\n                </div>\n              )}\n            </div>\n\n            {/* Merchants */}\n            <div className=\"flex flex-col space-y-8\">\n              <div className=\"flex flex-col items-center\">\n                <div className={`w-14 h-14 rounded-lg flex items-center justify-center mb-2 transition-all duration-500 ${\n                  animationStep >= 3 ? 'bg-green-600 scale-110' : 'bg-gray-700'\n                }`}>\n                  <span className=\"text-lg\">🏪</span>\n                </div>\n                <span className=\"text-gray-400 font-code text-xs\">SHOP A</span>\n                {animationStep >= 3 && (\n                  <span className=\"text-green-400 font-code text-xs mt-1\">PAID ✓</span>\n                )}\n              </div>\n              \n              <div className=\"flex flex-col items-center\">\n                <div className={`w-14 h-14 rounded-lg flex items-center justify-center mb-2 transition-all duration-500 ${\n                  animationStep >= 4 ? 'bg-green-600 scale-110' : 'bg-gray-700'\n                }`}>\n                  <span className=\"text-lg\">🏪</span>\n                </div>\n                <span className=\"text-gray-400 font-code text-xs\">SHOP B</span>\n                {animationStep >= 4 && (\n                  <span className=\"text-green-400 font-code text-xs mt-1\">PAID ✓</span>\n                )}\n              </div>\n            </div>\n\n            {/* Attack Arrows */}\n            {animationStep >= 3 && (\n              <>\n                <div className=\"absolute left-1/3 top-16 w-32 h-0.5 bg-red-400 transform -rotate-12 animate-pulse\"></div>\n                <div className=\"absolute left-1/3 bottom-16 w-32 h-0.5 bg-red-400 transform rotate-12 animate-pulse\"></div>\n              </>\n            )}\n          </div>\n\n          {animationStep >= 4 && (\n            <div className=\"absolute inset-0 flex items-center justify-center bg-red-900/50 backdrop-blur-sm\">\n              <div className=\"text-center\">\n                <span className=\"text-red-400 font-code text-xl block mb-2\">DOUBLE-SPEND ATTACK</span>\n                <span className=\"text-red-300 font-code text-sm\">Same coin spent twice!</span>\n              </div>\n            </div>\n          )}\n        </div>\n      </TechCard>\n\n      {/* Controls */}\n      <div className=\"text-center\">\n        {!showExplanation ? (\n          <TechButton \n            variant=\"accent\" \n            size=\"lg\" \n            onClick={handleDemonstrate}\n            disabled={showAnimation}\n          >\n            {showAnimation ? (\n              <>\n                <span className=\"mr-2\">⚡</span>\n                DEMONSTRATING ATTACK...\n              </>\n            ) : (\n              <>\n                <span className=\"mr-2\">🎯</span>\n                DEMONSTRATE PROBLEM\n              </>\n            )}\n          </TechButton>\n        ) : (\n          <div className=\"space-y-6 animate-fade-in\">\n            <TechCard variant=\"cyan\">\n              <div className=\"p-6\">\n                <h3 className=\"font-space-gothic text-tech-cyan-400 text-lg mb-4\">Why This Matters</h3>\n                <div className=\"space-y-3 text-gray-300 text-sm\">\n                  <p>\n                    <strong>The Problem:</strong> Alice copied her digital coin and spent it at two different \n                    shops simultaneously. Both shops accepted the payment, but Alice only had one coin.\n                  </p>\n                  <p>\n                    <strong>Traditional Solution:</strong> Banks prevent this by maintaining a central ledger \n                    and checking every transaction. But this requires trusting the bank.\n                  </p>\n                  <p>\n                    <strong>The Challenge:</strong> How do you solve double-spending without a trusted authority? \n                    This puzzle stumped computer scientists for decades.\n                  </p>\n                  <div className=\"bg-tech-cyan-900/20 border-l-4 border-tech-cyan-400 p-3 rounded\">\n                    <p className=\"text-tech-cyan-400 font-code text-xs\">\n                      BREAKTHROUGH: A mysterious figure would soon propose an elegant solution\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </TechCard>\n            \n            <TechButton variant=\"accent\" size=\"lg\" onClick={handleContinue}>\n              DISCOVER THE SOLUTION\n              <span className=\"ml-2\">→</span>\n            </TechButton>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":8729},"client/src/components/cypherpunk/ManifestoQuiz.tsx":{"content":"import { useState } from \"react\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\n\ninterface QuizQuestion {\n  id: number;\n  question: string;\n  options: string[];\n  correctAnswer: number;\n}\n\nconst questions: QuizQuestion[] = [\n  {\n    id: 1,\n    question: \"According to the Cypherpunk Manifesto, what is the key difference between privacy and secrecy?\",\n    options: [\n      \"Privacy is about hiding illegal activities, secrecy is about protecting personal information\",\n      \"Privacy is selective revelation to the world, secrecy is hiding from everyone\",\n      \"Privacy is for individuals, secrecy is for governments\",\n      \"There is no difference between privacy and secrecy\"\n    ],\n    correctAnswer: 1\n  },\n  {\n    id: 2,\n    question: \"What did cypherpunks believe was the primary tool for defending digital freedom?\",\n    options: [\n      \"Government legislation and regulation\",\n      \"Corporate privacy policies\",\n      \"Writing code and creating cryptographic tools\",\n      \"Peaceful protests and demonstrations\"\n    ],\n    correctAnswer: 2\n  }\n];\n\ninterface ManifestoQuizProps {\n  onComplete: () => void;\n}\n\nexport function ManifestoQuiz({ onComplete }: ManifestoQuizProps) {\n  const [answers, setAnswers] = useState<{ [key: number]: number }>({});\n  const [submitted, setSubmitted] = useState(false);\n  const [showResults, setShowResults] = useState(false);\n\n  const handleAnswerSelect = (questionId: number, answerIndex: number) => {\n    if (!submitted) {\n      setAnswers(prev => ({\n        ...prev,\n        [questionId]: answerIndex\n      }));\n    }\n  };\n\n  const handleSubmit = () => {\n    if (Object.keys(answers).length === questions.length) {\n      setSubmitted(true);\n      setShowResults(true);\n      \n      // Check if all answers are correct\n      const allCorrect = questions.every(q => answers[q.id] === q.correctAnswer);\n      \n      if (allCorrect) {\n        setTimeout(() => onComplete(), 2000);\n      }\n    }\n  };\n\n  const isAnswerCorrect = (questionId: number) => {\n    const question = questions.find(q => q.id === questionId);\n    return question && answers[questionId] === question.correctAnswer;\n  };\n\n  const allAnswered = Object.keys(answers).length === questions.length;\n  const allCorrect = submitted && questions.every(q => isAnswerCorrect(q.id));\n\n  return (\n    <div className=\"space-y-8\">\n      {questions.map((question) => (\n        <TechCard key={question.id} variant=\"purple\" className=\"relative\">\n          <div className=\"p-6\">\n            <div className=\"flex items-start justify-between mb-6\">\n              <h3 className=\"font-space-gothic text-lg text-white pr-4\">{question.question}</h3>\n              {submitted && (\n                <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n                  isAnswerCorrect(question.id) ? 'bg-green-600' : 'bg-red-600'\n                }`}>\n                  <span className=\"text-white font-bold\">\n                    {isAnswerCorrect(question.id) ? '✓' : '✗'}\n                  </span>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"space-y-3\">\n              {question.options.map((option, index) => {\n                const isSelected = answers[question.id] === index;\n                const isCorrect = index === question.correctAnswer;\n                \n                let buttonClass = \"w-full text-left p-4 rounded border transition-all duration-200 \";\n                \n                if (submitted) {\n                  if (isCorrect) {\n                    buttonClass += \"bg-green-900/50 border-green-400 text-green-300\";\n                  } else if (isSelected && !isCorrect) {\n                    buttonClass += \"bg-red-900/50 border-red-400 text-red-300\";\n                  } else {\n                    buttonClass += \"bg-gray-800 border-gray-600 text-gray-400\";\n                  }\n                } else {\n                  if (isSelected) {\n                    buttonClass += \"bg-tech-purple-900/50 border-tech-purple-400 text-tech-purple-300\";\n                  } else {\n                    buttonClass += \"bg-gray-800 border-gray-600 text-gray-300 hover:border-tech-purple-400 hover:bg-tech-purple-900/30\";\n                  }\n                }\n                \n                return (\n                  <button\n                    key={index}\n                    onClick={() => handleAnswerSelect(question.id, index)}\n                    className={buttonClass}\n                    disabled={submitted}\n                  >\n                    <span className=\"font-code text-sm\">\n                      {String.fromCharCode(65 + index)}. {option}\n                    </span>\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </TechCard>\n      ))}\n      \n      <div className=\"text-center\">\n        {!submitted ? (\n          <TechButton\n            variant=\"accent\"\n            size=\"lg\"\n            onClick={handleSubmit}\n            disabled={!allAnswered}\n            className=\"min-w-48\"\n          >\n            <span className=\"mr-2\">📝</span>\n            SUBMIT ANSWERS\n          </TechButton>\n        ) : allCorrect ? (\n          <div className=\"space-y-4\">\n            <TechButton variant=\"accent\" size=\"lg\" className=\"min-w-48\" disabled>\n              <span className=\"mr-2\">✓</span>\n              PERFECT SCORE!\n            </TechButton>\n            <p className=\"text-green-400 font-code text-sm\">\n              Advancing to completion screen...\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            <TechButton variant=\"secondary\" size=\"lg\" className=\"min-w-48\" disabled>\n              <span className=\"mr-2\">⚠️</span>\n              REVIEW ANSWERS\n            </TechButton>\n            <p className=\"text-red-400 font-code text-sm\">\n              Study the manifesto again and retake the quiz\n            </p>\n          </div>\n        )}\n      </div>\n      \n      {showResults && (\n        <div className=\"text-center mt-8\">\n          <TechCard variant=\"cyan\" className=\"inline-block\">\n            <div className=\"p-4\">\n              <p className=\"font-code text-tech-cyan-400 text-sm\">\n                QUIZ RESULTS: {questions.filter(q => isAnswerCorrect(q.id)).length} / {questions.length} CORRECT\n              </p>\n            </div>\n          </TechCard>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":6479},"client/src/components/cypherpunk/PrincipledBuilder.tsx":{"content":"import { useState } from \"react\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\n\ninterface PrincipledBuilderProps {\n  onComplete: () => void;\n}\n\nexport function PrincipledBuilder({ onComplete }: PrincipledBuilderProps) {\n  const [userResponse, setUserResponse] = useState(\"\");\n  const [showAnalysis, setShowAnalysis] = useState(false);\n\n  const handleSubmitResponse = () => {\n    if (userResponse.trim().length > 50) {\n      setShowAnalysis(true);\n    }\n  };\n\n  const handleContinue = () => {\n    onComplete();\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* The Scenario */}\n      <TechCard variant=\"cyan\">\n        <div className=\"p-8\">\n          <h2 className=\"font-space-gothic text-2xl text-tech-cyan-400 mb-6\">The Ultimate Test</h2>\n          \n          <div className=\"space-y-4 text-gray-300 leading-relaxed\">\n            <p>\n              You've built a revolutionary decentralized application that empowers users with \n              true financial sovereignty. No KYC, no censorship, no central control. It embodies \n              everything the cypherpunks fought for.\n            </p>\n            \n            <div className=\"bg-tech-cyan-900/20 border-l-4 border-tech-cyan-400 p-4 rounded\">\n              <p className=\"font-code text-tech-cyan-400 text-sm\">\n                USER GROWTH: 100,000+ active users • TRANSACTION VOLUME: $50M+ daily\n              </p>\n            </div>\n            \n            <p>\n              Your application is gaining massive adoption, but funding is running low. \n              The infrastructure costs are mounting, and you need capital to scale.\n            </p>\n          </div>\n        </div>\n      </TechCard>\n\n      {/* The Offer */}\n      <TechCard variant=\"purple\" className=\"relative\">\n        <div className=\"p-8\">\n          <div className=\"absolute top-4 right-4\">\n            <span className=\"px-3 py-1 bg-green-900 text-green-400 text-xs font-code rounded animate-pulse\">\n              $10M OFFER\n            </span>\n          </div>\n          \n          <h3 className=\"font-space-gothic text-tech-purple-400 text-xl mb-6\">The Devil's Bargain</h3>\n          \n          <div className=\"space-y-4 text-gray-300 text-sm\">\n            <p>\n              A prestigious venture capital firm approaches you with an offer: \n              <strong className=\"text-green-400\"> $10 million in funding</strong> to accelerate \n              your growth and dominate the market.\n            </p>\n            \n            <div className=\"bg-red-900/20 border border-red-400/50 rounded p-4\">\n              <h4 className=\"text-red-400 font-code text-sm mb-3\">THE CONDITIONS:</h4>\n              <ul className=\"text-xs space-y-2 text-gray-300\">\n                <li className=\"flex items-start\">\n                  <span className=\"text-red-400 mr-2\">•</span>\n                  <span>Implement KYC (Know Your Customer) verification for all users</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <span className=\"text-red-400 mr-2\">•</span>\n                  <span>Grant the VC firm ability to freeze user accounts when \"necessary\"</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <span className=\"text-red-400 mr-2\">•</span>\n                  <span>Share user transaction data with \"approved regulatory partners\"</span>\n                </li>\n                <li className=\"flex items-start\">\n                  <span className=\"text-red-400 mr-2\">•</span>\n                  <span>Remove anonymous features to comply with \"evolving regulations\"</span>\n                </li>\n              </ul>\n            </div>\n            \n            <p>\n              The VC partner explains: <em>\"This is just business pragmatism. You can't change \n              the world if you don't survive in it. Take the money, scale the platform, \n              and worry about ideals later.\"</em>\n            </p>\n          </div>\n        </div>\n      </TechCard>\n\n      {/* The Stakes */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <TechCard variant=\"green\">\n          <div className=\"p-6\">\n            <h4 className=\"font-tech text-green-400 text-lg mb-4\">Accept the Offer</h4>\n            <div className=\"space-y-3 text-gray-300 text-sm\">\n              <ul className=\"text-xs space-y-1\">\n                <li>✓ Immediate $10M to scale operations</li>\n                <li>✓ Market dominance and competitive advantage</li>\n                <li>✓ Job security for your team</li>\n                <li>✓ \"Gradual\" implementation of restrictions</li>\n                <li>✓ Potential to \"change the system from within\"</li>\n              </ul>\n              \n              <div className=\"bg-green-900/20 border-l-4 border-green-400 p-3 rounded mt-4\">\n                <p className=\"text-green-400 font-code text-xs\">\n                  \"Better to have compromised decentralization than no decentralization\"\n                </p>\n              </div>\n            </div>\n          </div>\n        </TechCard>\n\n        <TechCard variant=\"red\">\n          <div className=\"p-6\">\n            <h4 className=\"font-tech text-red-400 text-lg mb-4\">Refuse the Offer</h4>\n            <div className=\"space-y-3 text-gray-300 text-sm\">\n              <ul className=\"text-xs space-y-1\">\n                <li>• Risk running out of funding</li>\n                <li>• Slower growth and scaling challenges</li>\n                <li>• Potential team layoffs</li>\n                <li>• Competitors may take the money instead</li>\n                <li>• Platform might fail entirely</li>\n              </ul>\n              \n              <div className=\"bg-red-900/20 border-l-4 border-red-400 p-3 rounded mt-4\">\n                <p className=\"text-red-400 font-code text-xs\">\n                  \"Principles don't pay the bills or serve users\"\n                </p>\n              </div>\n            </div>\n          </div>\n        </TechCard>\n      </div>\n\n      {/* User Response */}\n      <TechCard variant=\"purple\">\n        <div className=\"p-8\">\n          <h3 className=\"font-space-gothic text-tech-purple-400 text-lg mb-4\">Your Decision</h3>\n          <p className=\"text-gray-300 mb-4\">\n            This is the test every builder faces. When the pressure mounts and the stakes are real, \n            will you hold the line or make the \"pragmatic\" choice?\n          </p>\n          <p className=\"text-gray-300 mb-6\">\n            What do you do, and why? Consider the cypherpunk principles you've learned, \n            the real-world constraints you face, and the users who depend on you:\n          </p>\n          \n          <textarea\n            value={userResponse}\n            onChange={(e) => setUserResponse(e.target.value)}\n            placeholder=\"This is your moment of truth. The cypherpunks faced similar choices in their time. Some held firm to their principles, others made compromises they later regretted. What choice will you make, and how will you justify it to yourself and your users?\"\n            className=\"w-full h-40 bg-black border-2 border-tech-purple-400 rounded p-4 text-green-400 font-mono text-sm placeholder-gray-500 focus:outline-none focus:border-tech-purple-300 resize-none\"\n          />\n          \n          <div className=\"flex items-center justify-between mt-4\">\n            <span className=\"text-gray-400 text-xs font-code\">\n              {userResponse.length}/2000 characters\n            </span>\n            \n            <TechButton \n              variant=\"accent\" \n              onClick={handleSubmitResponse}\n              disabled={userResponse.trim().length < 50}\n            >\n              SUBMIT DECISION\n            </TechButton>\n          </div>\n        </div>\n      </TechCard>\n\n      {/* Analysis */}\n      {showAnalysis && (\n        <TechCard variant=\"cyan\" className=\"animate-fade-in\">\n          <div className=\"p-8\">\n            <h3 className=\"font-space-gothic text-tech-cyan-400 text-lg mb-4\">The Weight of Choice</h3>\n            \n            <div className=\"space-y-4 text-gray-300 text-sm\">\n              <p>\n                Your response reveals the complexity of building in the real world. \n                There are no perfect choices, only trade-offs between ideals and survival, \n                principles and pragmatism.\n              </p>\n              \n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div className=\"bg-tech-cyan-900/20 border-l-4 border-tech-cyan-400 p-4 rounded\">\n                  <h4 className=\"text-tech-cyan-400 font-code text-sm mb-2\">HISTORICAL PRECEDENT:</h4>\n                  <p className=\"text-xs\">\n                    Many cypherpunk projects faced similar pressures. Some maintained their principles \n                    and remained niche. Others compromised and became the platforms we criticize today.\n                  </p>\n                </div>\n                \n                <div className=\"bg-tech-purple-900/20 border-l-4 border-tech-purple-400 p-4 rounded\">\n                  <h4 className=\"text-tech-purple-400 font-code text-sm mb-2\">THE PATTERN:</h4>\n                  <p className=\"text-xs\">\n                    Every generation of builders faces this choice. The tools evolve, but the fundamental \n                    tension between freedom and control, idealism and realism, remains constant.\n                  </p>\n                </div>\n              </div>\n              \n              <p>\n                The cypherpunks understood that technology alone isn't enough. It takes builders \n                with conviction to resist the gravitational pull of power and profit. \n                The future depends on people who choose principles over pressure.\n              </p>\n              \n              <div className=\"bg-orange-900/20 border border-orange-400/50 rounded p-4\">\n                <p className=\"text-orange-400 font-code text-sm text-center\">\n                  \"The future is not some place we are going, but one we are creating. \n                  The paths are not to be found, but made.\" - John Schaar\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"mt-8 text-center\">\n              <TechButton variant=\"accent\" size=\"lg\" onClick={handleContinue}>\n                COMPLETE THE LEGACY\n                <span className=\"ml-2\">→</span>\n              </TechButton>\n            </div>\n          </div>\n        </TechCard>\n      )}\n    </div>\n  );\n}","size_bytes":10552},"client/src/components/cypherpunk/PrivacyScenario.tsx":{"content":"import { useState } from \"react\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\n\ninterface PrivacyScenarioProps {\n  onComplete: () => void;\n}\n\nexport function PrivacyScenario({ onComplete }: PrivacyScenarioProps) {\n  const [selectedChoice, setSelectedChoice] = useState<number | null>(null);\n  const [showFeedback, setShowFeedback] = useState(false);\n\n  const handleChoice = (choice: number) => {\n    setSelectedChoice(choice);\n    setShowFeedback(true);\n  };\n\n  const handleContinue = () => {\n    onComplete();\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Scenario Description */}\n      <TechCard variant=\"cyan\" className=\"relative\">\n        <div className=\"p-8\">\n          <div className=\"absolute top-4 right-4\">\n            <span className=\"px-3 py-1 bg-red-900 text-red-400 text-xs font-code rounded\">\n              CLASSIFIED SCENARIO\n            </span>\n          </div>\n          \n          <h2 className=\"font-space-gothic text-2xl text-tech-cyan-400 mb-6\">Emergency Communication</h2>\n          \n          <div className=\"space-y-4 text-gray-300 leading-relaxed\">\n            <p>\n              A journalist in an oppressive regime has uncovered evidence of government corruption. \n              They need to safely transmit this sensitive document to their editor in another country. \n              The government monitors all communications and severely punishes dissidents.\n            </p>\n            \n            <div className=\"bg-tech-cyan-900/20 border-l-4 border-tech-cyan-400 p-4 rounded\">\n              <p className=\"font-code text-tech-cyan-400 text-sm\">\n                MISSION PARAMETERS: Document must reach editor safely without exposing journalist's identity\n              </p>\n            </div>\n            \n            <p className=\"font-tech text-white\">\n              How should the journalist transmit this document?\n            </p>\n          </div>\n        </div>\n      </TechCard>\n\n      {/* Choices */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <TechCard \n          variant=\"purple\" \n          className={`cursor-pointer transition-all duration-300 ${\n            selectedChoice === 1 ? 'ring-2 ring-tech-purple-400' : 'hover:scale-105'\n          }`}\n          onClick={() => !showFeedback && handleChoice(1)}\n        >\n          <div className=\"p-6\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-12 h-12 bg-tech-purple-600 rounded-lg flex items-center justify-center mr-4\">\n                <span className=\"text-xl\">📱</span>\n              </div>\n              <h3 className=\"font-space-gothic text-tech-purple-400 text-lg\">Option A</h3>\n            </div>\n            \n            <p className=\"text-gray-300 text-sm mb-4\">\n              Send the document through a social media direct message to the editor. \n              It's quick and convenient, and they use this platform regularly.\n            </p>\n            \n            <div className=\"flex items-center text-xs text-gray-400\">\n              <span className=\"w-2 h-2 bg-red-400 rounded-full mr-2\"></span>\n              <span>Unencrypted Communication</span>\n            </div>\n          </div>\n        </TechCard>\n\n        <TechCard \n          variant=\"cyan\" \n          className={`cursor-pointer transition-all duration-300 ${\n            selectedChoice === 2 ? 'ring-2 ring-tech-cyan-400' : 'hover:scale-105'\n          }`}\n          onClick={() => !showFeedback && handleChoice(2)}\n        >\n          <div className=\"p-6\">\n            <div className=\"flex items-center mb-4\">\n              <div className=\"w-12 h-12 bg-tech-cyan-600 rounded-lg flex items-center justify-center mr-4\">\n                <span className=\"text-xl\">🔐</span>\n              </div>\n              <h3 className=\"font-space-gothic text-tech-cyan-400 text-lg\">Option B</h3>\n            </div>\n            \n            <p className=\"text-gray-300 text-sm mb-4\">\n              Encrypt the document using PGP encryption, then send it through a secure, \n              end-to-end encrypted messaging service designed for journalists.\n            </p>\n            \n            <div className=\"flex items-center text-xs text-gray-400\">\n              <span className=\"w-2 h-2 bg-green-400 rounded-full mr-2\"></span>\n              <span>End-to-End Encrypted</span>\n            </div>\n          </div>\n        </TechCard>\n      </div>\n\n      {/* Feedback */}\n      {showFeedback && selectedChoice && (\n        <TechCard variant={selectedChoice === 2 ? \"cyan\" : \"purple\"} className=\"animate-fade-in\">\n          <div className=\"p-6\">\n            <div className=\"flex items-start\">\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center mr-4 ${\n                selectedChoice === 2 ? 'bg-green-600' : 'bg-red-600'\n              }`}>\n                <span className=\"text-white font-bold\">\n                  {selectedChoice === 2 ? '✓' : '✗'}\n                </span>\n              </div>\n              \n              <div className=\"flex-1\">\n                <h3 className={`font-tech text-lg mb-3 ${\n                  selectedChoice === 2 ? 'text-green-400' : 'text-red-400'\n                }`}>\n                  {selectedChoice === 2 ? 'CORRECT CHOICE' : 'DANGEROUS CHOICE'}\n                </h3>\n                \n                <div className=\"space-y-3 text-gray-300 text-sm\">\n                  {selectedChoice === 2 ? (\n                    <>\n                      <p>\n                        <strong>Outcome:</strong> The document reaches the editor safely. Even if intercepted, \n                        the PGP encryption makes it unreadable to surveillance systems.\n                      </p>\n                      <p>\n                        <strong>Why this works:</strong> End-to-end encryption ensures only the intended \n                        recipient can decrypt the message. The journalist's identity and the document's \n                        contents remain protected.\n                      </p>\n                      <div className=\"bg-green-900/20 border-l-4 border-green-400 p-3 rounded\">\n                        <p className=\"text-green-400 font-code text-xs\">\n                          PRIVACY PILLAR: Strong encryption protects both message content and sender identity\n                        </p>\n                      </div>\n                    </>\n                  ) : (\n                    <>\n                      <p>\n                        <strong>Outcome:</strong> Government surveillance systems intercept the message. \n                        The journalist is arrested within hours, and the story is buried.\n                      </p>\n                      <p>\n                        <strong>Why this failed:</strong> Social media platforms can access all messages. \n                        Without encryption, sensitive communications are vulnerable to interception.\n                      </p>\n                      <div className=\"bg-red-900/20 border-l-4 border-red-400 p-3 rounded\">\n                        <p className=\"text-red-400 font-code text-xs\">\n                          LESSON: Convenience without privacy can be deadly in authoritarian contexts\n                        </p>\n                      </div>\n                    </>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </TechCard>\n      )}\n\n      {/* Continue Button */}\n      {showFeedback && (\n        <div className=\"text-center animate-fade-in\">\n          <TechButton variant=\"accent\" size=\"lg\" onClick={handleContinue}>\n            PROCEED TO PILLAR 2\n            <span className=\"ml-2\">→</span>\n          </TechButton>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":7773},"client/src/components/cypherpunk/SatoshiMessage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\n\ninterface SatoshiMessageProps {\n  onComplete: () => void;\n}\n\nexport function SatoshiMessage({ onComplete }: SatoshiMessageProps) {\n  const [revealedText, setRevealedText] = useState(\"\");\n  const [isRevealing, setIsRevealing] = useState(false);\n  const [showContinue, setShowContinue] = useState(false);\n\n  const fullMessage = `I've been working on a new electronic cash system that's fully peer-to-peer, with no trusted third party.\n\nThe main properties:\n- Double-spending is prevented with a peer-to-peer network.\n- No mint or other trusted parties.\n- Participants can be anonymous.\n- New coins are made from Hashcash style proof-of-work.\n- The proof-of-work for new coin generation also powers the network to prevent double-spending.\n\nBitcoin v0.1 will be released soon.\n\nThe nature of Bitcoin is such that once version 0.1 was released, the core design was set in stone for the rest of its lifetime.\n\n- Satoshi Nakamoto`;\n\n  const handleRevealMessage = async () => {\n    setIsRevealing(true);\n    setRevealedText(\"\");\n    \n    for (let i = 0; i <= fullMessage.length; i++) {\n      await new Promise(resolve => setTimeout(resolve, 30));\n      setRevealedText(fullMessage.slice(0, i));\n    }\n    \n    setIsRevealing(false);\n    setTimeout(() => setShowContinue(true), 1000);\n  };\n\n  const handleContinue = () => {\n    onComplete();\n  };\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Email Header */}\n      <TechCard variant=\"cyan\" className=\"font-mono\">\n        <div className=\"p-6 bg-black border-2 border-tech-cyan-400\">\n          <div className=\"border-b border-tech-cyan-400/30 pb-4 mb-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\n              <div className=\"text-tech-cyan-400\">\n                <span className=\"text-gray-400\">From:</span> satoshi@gmx.com\n              </div>\n              <div className=\"text-tech-cyan-400\">\n                <span className=\"text-gray-400\">Date:</span> Oct 31, 2008 21:21:40\n              </div>\n              <div className=\"text-tech-cyan-400\">\n                <span className=\"text-gray-400\">To:</span> cryptography@metzdowd.com\n              </div>\n              <div className=\"text-tech-cyan-400\">\n                <span className=\"text-gray-400\">Subject:</span> Bitcoin P2P e-cash paper\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center text-xs text-gray-400 mb-4\">\n            <span className=\"w-2 h-2 bg-green-400 rounded-full mr-2 animate-pulse\"></span>\n            <span>AUTHENTICATED MESSAGE • CRYPTOGRAPHY MAILING LIST</span>\n          </div>\n        </div>\n      </TechCard>\n\n      {/* Message Content */}\n      <TechCard variant=\"purple\" className=\"relative\">\n        <div className=\"p-8\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"font-space-gothic text-2xl text-tech-purple-400\">Message Decryption</h2>\n            <div className=\"px-3 py-1 bg-tech-purple-900 text-tech-purple-400 text-xs font-code rounded\">\n              CLASSIFIED: LEVEL 5\n            </div>\n          </div>\n          \n          <div className=\"min-h-96 bg-black rounded border-2 border-tech-purple-400 p-6 font-mono text-sm relative overflow-hidden\">\n            {!isRevealing && !revealedText ? (\n              <div className=\"text-center py-20\">\n                <div className=\"w-16 h-16 border-4 border-tech-purple-400 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n                <p className=\"text-tech-purple-400 font-code\">\n                  ENCRYPTED MESSAGE DETECTED\n                </p>\n                <p className=\"text-gray-400 text-xs mt-2\">\n                  Click below to decrypt historical communication\n                </p>\n              </div>\n            ) : (\n              <div className=\"text-green-400 leading-relaxed whitespace-pre-wrap\">\n                {revealedText}\n                {isRevealing && (\n                  <span className=\"animate-pulse bg-green-400 text-black px-1\">▌</span>\n                )}\n              </div>\n            )}\n            \n            {/* Matrix-style background effect */}\n            <div className=\"absolute inset-0 pointer-events-none opacity-10\">\n              <div className=\"text-tech-purple-400 text-xs animate-pulse\">\n                {Array.from({ length: 20 }, (_, i) => (\n                  <div key={i} className=\"mb-1\">\n                    {Array.from({ length: 80 }, () => Math.random() > 0.7 ? '1' : '0').join('')}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </TechCard>\n\n      {/* Historical Context */}\n      <TechCard variant=\"cyan\">\n        <div className=\"p-6\">\n          <h3 className=\"font-space-gothic text-tech-cyan-400 text-lg mb-4\">Historical Significance</h3>\n          <div className=\"space-y-3 text-gray-300 text-sm\">\n            <p>\n              This message, sent on Halloween 2008, introduced Bitcoin to the world. Posted to the \n              cryptography mailing list where cypherpunks had discussed digital cash for years, \n              it proposed the first working solution to the double-spend problem.\n            </p>\n            <div className=\"bg-tech-cyan-900/20 border-l-4 border-tech-cyan-400 p-3 rounded\">\n              <p className=\"text-tech-cyan-400 font-code text-xs\">\n                TIMING: Sent during the 2008 financial crisis, when trust in traditional banking was collapsing\n              </p>\n            </div>\n          </div>\n        </div>\n      </TechCard>\n\n      {/* Controls */}\n      <div className=\"text-center space-y-4\">\n        {!revealedText && !isRevealing ? (\n          <TechButton variant=\"accent\" size=\"lg\" onClick={handleRevealMessage}>\n            <span className=\"mr-2\">🔓</span>\n            DECRYPT MESSAGE\n          </TechButton>\n        ) : showContinue ? (\n          <TechButton variant=\"accent\" size=\"lg\" onClick={handleContinue}>\n            ANALYZE THE CONNECTIONS\n            <span className=\"ml-2\">→</span>\n          </TechButton>\n        ) : (\n          <TechButton variant=\"secondary\" size=\"lg\" disabled>\n            <span className=\"mr-2\">⚡</span>\n            DECRYPTING...\n          </TechButton>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":6447},"client/src/components/cypherpunk/Web2Montage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { TechButton } from \"@/components/ui/TechButton\";\n\ninterface Web2MontageProps {\n  onComplete: () => void;\n}\n\ninterface LogoData {\n  name: string;\n  icon: string;\n  color: string;\n  glitchTexts: string[];\n}\n\nconst logos: LogoData[] = [\n  {\n    name: \"Facebook\",\n    icon: \"📘\",\n    color: \"#1877F2\",\n    glitchTexts: [\"DATA HARVESTED\", \"PRIVACY VIOLATED\", \"DEMOCRACY COMPROMISED\"]\n  },\n  {\n    name: \"Google\",\n    icon: \"🔍\",\n    color: \"#4285F4\",\n    glitchTexts: [\"SEARCHES TRACKED\", \"BEHAVIOR PROFILED\", \"THOUGHTS MONETIZED\"]\n  },\n  {\n    name: \"TikTok\",\n    icon: \"🎵\",\n    color: \"#FF0050\",\n    glitchTexts: [\"ATTENTION HIJACKED\", \"ADDICTION ENGINEERED\", \"MINDS CONTROLLED\"]\n  },\n  {\n    name: \"Amazon\",\n    icon: \"📦\",\n    color: \"#FF9900\",\n    glitchTexts: [\"WORKERS EXPLOITED\", \"COMPETITION CRUSHED\", \"SURVEILLANCE EXPANDED\"]\n  },\n  {\n    name: \"Twitter\",\n    icon: \"🐦\",\n    color: \"#1DA1F2\",\n    glitchTexts: [\"VOICES SILENCED\", \"DISCOURSE MANIPULATED\", \"TRUTH DISTORTED\"]\n  }\n];\n\nexport function Web2Montage({ onComplete }: Web2MontageProps) {\n  const [currentLogoIndex, setCurrentLogoIndex] = useState(0);\n  const [currentGlitchIndex, setCurrentGlitchIndex] = useState(0);\n  const [showNarrative, setShowNarrative] = useState(false);\n  const [showContinue, setShowContinue] = useState(false);\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  useEffect(() => {\n    const startAnimation = async () => {\n      setIsAnimating(true);\n      \n      // Show each logo with glitch effects\n      for (let logoIndex = 0; logoIndex < logos.length; logoIndex++) {\n        setCurrentLogoIndex(logoIndex);\n        \n        // Show each glitch text for this logo\n        for (let glitchIndex = 0; glitchIndex < logos[logoIndex].glitchTexts.length; glitchIndex++) {\n          setCurrentGlitchIndex(glitchIndex);\n          await new Promise(resolve => setTimeout(resolve, 800));\n        }\n        \n        // Pause between logos\n        await new Promise(resolve => setTimeout(resolve, 500));\n      }\n      \n      // Fade to black\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // Show narrative\n      setShowNarrative(true);\n      await new Promise(resolve => setTimeout(resolve, 3000));\n      \n      // Show continue button\n      setShowContinue(true);\n      setIsAnimating(false);\n    };\n\n    startAnimation();\n  }, []);\n\n  const handleContinue = () => {\n    onComplete();\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black flex items-center justify-center overflow-hidden\">\n      {/* Logo Display */}\n      {isAnimating && currentLogoIndex < logos.length && (\n        <div className=\"text-center relative\">\n          <div \n            className=\"text-9xl mb-8 logo-animation\"\n            style={{ \n              filter: `drop-shadow(0 0 30px ${logos[currentLogoIndex].color}) drop-shadow(0 0 60px ${logos[currentLogoIndex].color}50)`,\n              color: logos[currentLogoIndex].color,\n              textShadow: `0 0 20px ${logos[currentLogoIndex].color}`\n            }}\n          >\n            {logos[currentLogoIndex].icon}\n          </div>\n          \n          <h2 \n            className=\"text-4xl font-bold mb-8 animate-fade-in\"\n            style={{ color: logos[currentLogoIndex].color }}\n          >\n            {logos[currentLogoIndex].name}\n          </h2>\n          \n          {/* Glitch Overlay */}\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div \n              className=\"text-red-500 text-3xl font-mono font-bold animate-glitch\"\n              data-text={logos[currentLogoIndex].glitchTexts[currentGlitchIndex]}\n              style={{\n                textShadow: `\n                  -2px 0 #ff0000,\n                  2px 0 #00ffff,\n                  0 -2px #ffff00,\n                  0 2px #ff00ff,\n                  -1px -1px #ff0000,\n                  1px 1px #00ffff\n                `,\n                filter: 'brightness(1.2) contrast(1.3)'\n              }}\n            >\n              {logos[currentLogoIndex].glitchTexts[currentGlitchIndex]}\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Narrative */}\n      {showNarrative && !isAnimating && (\n        <div className=\"text-center max-w-4xl px-8 animate-fade-in\">\n          <div className=\"space-y-8 text-gray-300 leading-relaxed\">\n            <p className=\"text-2xl font-light\">\n              The Cypherpunks gave us the tools for a free and open internet.\n            </p>\n            \n            <p className=\"text-3xl text-red-400 font-medium\">\n              But what did we build?\n            </p>\n            \n            <div className=\"bg-red-900/20 border border-red-400/50 rounded-lg p-8\">\n              <p className=\"text-lg\">\n                Instead of liberation, we created digital plantations. Instead of privacy, \n                we built surveillance empires. Instead of decentralization, we built \n                new monopolies more powerful than anything the world had ever seen.\n              </p>\n            </div>\n            \n            <p className=\"text-xl text-tech-cyan-400\">\n              The fight for the future is not over. It's just beginning.\n            </p>\n          </div>\n          \n          {showContinue && (\n            <div className=\"mt-12 animate-fade-in\">\n              <TechButton \n                variant=\"accent\" \n                size=\"lg\" \n                onClick={handleContinue}\n                className=\"relative overflow-hidden\"\n              >\n                <span className=\"relative z-10 flex items-center\">\n                  <span className=\"mr-2\">⚔️</span>\n                  CONTINUE THE FIGHT\n                  <span className=\"ml-2\">⚔️</span>\n                </span>\n                <div className=\"absolute inset-0 bg-gradient-to-r from-red-600/50 to-tech-cyan-600/50 animate-pulse\"></div>\n              </TechButton>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Custom CSS for animations */}\n      <style jsx>{`\n        @keyframes glitch {\n          0%, 100% { \n            transform: translate(0);\n            filter: hue-rotate(0deg);\n          }\n          10% { \n            transform: translate(-2px, -2px);\n            filter: hue-rotate(90deg);\n          }\n          20% { \n            transform: translate(2px, 2px);\n            filter: hue-rotate(180deg);\n          }\n          30% { \n            transform: translate(-1px, 1px);\n            filter: hue-rotate(270deg);\n          }\n          40% { \n            transform: translate(1px, -1px);\n            filter: hue-rotate(360deg);\n          }\n          50% { \n            transform: translate(-1px, -1px);\n            filter: hue-rotate(180deg);\n          }\n          60% { \n            transform: translate(1px, 1px);\n            filter: hue-rotate(90deg);\n          }\n          70% { \n            transform: translate(-2px, 1px);\n            filter: hue-rotate(270deg);\n          }\n          80% { \n            transform: translate(2px, -1px);\n            filter: hue-rotate(45deg);\n          }\n          90% { \n            transform: translate(-1px, 2px);\n            filter: hue-rotate(135deg);\n          }\n        }\n        \n        .animate-glitch {\n          animation: glitch 0.3s infinite;\n          text-shadow: \n            -1px 0 red,\n            1px 0 cyan,\n            0 -1px yellow,\n            0 1px blue;\n        }\n        \n        .animate-fade-in {\n          animation: fadeIn 1s ease-in;\n        }\n        \n        @keyframes fadeIn {\n          from { opacity: 0; transform: translateY(20px); }\n          to { opacity: 1; transform: translateY(0); }\n        }\n      `}</style>\n    </div>\n  );\n}","size_bytes":7727},"client/src/components/editor/LanguageSelector.tsx":{"content":"import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface LanguageSelectorProps {\n  value: string;\n  onChange: (value: string) => void;\n}\n\nexport function LanguageSelector({ value, onChange }: LanguageSelectorProps) {\n  return (\n    <Select value={value} onValueChange={onChange}>\n      <SelectTrigger className=\"w-48 bg-gray-700 border-gray-600 text-gray-300 font-mono\">\n        <SelectValue />\n      </SelectTrigger>\n      <SelectContent className=\"bg-gray-700 border-gray-600\">\n        <SelectItem value=\"rust\" className=\"text-gray-300 font-mono\">\n          Rust (Anchor)\n        </SelectItem>\n        <SelectItem value=\"python\" className=\"text-gray-300 font-mono\">\n          Python (Seahorse)\n        </SelectItem>\n      </SelectContent>\n    </Select>\n  );\n}\n","size_bytes":820},"client/src/components/editor/MonacoEditor.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { WesternButton } from \"@/components/ui/WesternButton\";\nimport { LanguageSelector } from \"./LanguageSelector\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useGameStore } from \"@/hooks/use-game-store\";\n\ninterface MonacoEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  language: string;\n  onLanguageChange: (language: string) => void;\n  height?: string;\n  onRun?: (data: any) => void;\n  onValidate?: (data: any) => void;\n  lessonId?: number;\n  currentStep?: number;\n}\n\nexport function MonacoEditor({\n  value,\n  onChange,\n  language,\n  onLanguageChange,\n  height = \"400px\",\n  onRun,\n  onValidate,\n  lessonId,\n  currentStep\n}: MonacoEditorProps) {\n  const [isRunning, setIsRunning] = useState(false);\n  const [isValidating, setIsValidating] = useState(false);\n  const [output, setOutput] = useState<string[]>([\n    \"$ cargo run\",\n    \"Compiling lesson v0.1.0\",\n    \"Ready for your code...\"\n  ]);\n  const { toast } = useToast();\n  const gameStore = useGameStore();\n\n  const handleRun = async () => {\n    if (!lessonId || !currentStep) {\n      toast({\n        title: \"Error\",\n        description: \"Missing lesson information\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setIsRunning(true);\n    gameStore.triggerNetworkPing();\n    \n    try {\n      const response = await fetch('/api/compile', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          code: value,\n          language,\n          lessonId,\n          currentStep\n        })\n      });\n\n      const data = await response.json();\n      \n      // Update console output\n      const newOutput = [\n        \"$ cargo run\",\n        \"Compiling lesson v0.1.0\",\n        ...(data.success \n          ? [\n              \"   Finished dev [unoptimized + debuginfo] target(s) in 0.50s\",\n              `Running \\`target/debug/lesson\\``,\n              data.output\n            ]\n          : [\n              \"error: compilation failed\",\n              data.output\n            ]\n        )\n      ];\n      setOutput(newOutput);\n\n      if (data.success) {\n        gameStore.triggerSparkleAnimation();\n        gameStore.earnRanchCoin(data.coins || 10);\n        gameStore.addExperience(data.experience || 25);\n        toast({\n          title: \"Code Executed Successfully!\",\n          description: `+${data.experience || 25} XP, +${data.coins || 10} Ranch Coins`,\n        });\n      } else {\n        toast({\n          title: \"Code Failed\",\n          description: data.message,\n          variant: \"destructive\"\n        });\n      }\n\n      if (onRun) {\n        onRun(data);\n      }\n    } catch (error) {\n      const errorOutput = [\n        \"$ cargo run\",\n        \"error: failed to compile\",\n        \"Connection error - please try again\"\n      ];\n      setOutput(errorOutput);\n      \n      toast({\n        title: \"Execution Failed\",\n        description: \"Failed to execute code. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  const handleValidate = async () => {\n    if (!lessonId || !currentStep) return;\n\n    setIsValidating(true);\n    gameStore.triggerNetworkPing();\n    \n    try {\n      const response = await fetch('/api/validate', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          code: value,\n          lessonId,\n          currentStep\n        })\n      });\n\n      const data = await response.json();\n      \n      if (data.success) {\n        gameStore.triggerTransactionAnimation();\n        toast({\n          title: \"Validation Passed!\",\n          description: \"All requirements met. Ready for next step!\",\n        });\n      } else {\n        toast({\n          title: \"Validation Failed\",\n          description: data.errors?.join(\", \") || \"Some requirements not met\",\n          variant: \"destructive\"\n        });\n      }\n\n      if (onValidate) {\n        onValidate(data);\n      }\n    } catch (error) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Failed to validate code. Please try again.\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setIsValidating(false);\n    }\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"font-space-gothic text-xl text-sunset-400\">Code Editor</h3>\n        <div className=\"flex items-center space-x-3\">\n          <LanguageSelector \n            value={language} \n            onChange={onLanguageChange} \n          />\n          <WesternButton\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={handleValidate}\n            disabled={isValidating}\n          >\n            {isValidating ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-1\" />\n                Validating...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-check-double mr-1\" />\n                Validate\n              </>\n            )}\n          </WesternButton>\n          <WesternButton\n            variant=\"primary\"\n            size=\"sm\"\n            onClick={handleRun}\n            disabled={isRunning}\n          >\n            {isRunning ? (\n              <>\n                <i className=\"fas fa-spinner fa-spin mr-1\" />\n                Running...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-play mr-1\" />\n                Run\n              </>\n            )}\n          </WesternButton>\n        </div>\n      </div>\n\n      {/* Mock Monaco Editor */}\n      <div className=\"flex-1 code-editor rounded-lg overflow-hidden\" style={{ height }}>\n        <div className=\"bg-gray-800 px-4 py-2 border-b border-gray-600 flex items-center justify-between\">\n          <span className=\"text-sm text-gray-400 font-mono\">\n            {language === 'rust' ? 'main.rs' : 'main.py'}\n          </span>\n          <div className=\"flex space-x-2\">\n            <div className=\"w-3 h-3 bg-red-500 rounded-full\" />\n            <div className=\"w-3 h-3 bg-yellow-500 rounded-full\" />\n            <div className=\"w-3 h-3 bg-green-500 rounded-full\" />\n          </div>\n        </div>\n        <textarea \n          className=\"w-full h-full bg-gray-900 text-gray-300 p-4 font-mono text-sm resize-none border-none outline-none\"\n          placeholder={language === 'rust' ? '// Start coding here...' : '# Start coding here...'}\n          value={value}\n          onChange={(e) => onChange(e.target.value)}\n          style={{ minHeight: 'calc(100% - 48px)' }}\n        />\n      </div>\n\n      {/* Console Output */}\n      <div className=\"mt-4 bg-gray-900 border border-gray-700 rounded-lg\">\n        <div className=\"bg-gray-800 px-4 py-2 border-b border-gray-700\">\n          <span className=\"text-sm text-gray-400 font-mono\">Console Output</span>\n        </div>\n        <div className=\"p-4 font-mono text-sm min-h-20 max-h-32 overflow-y-auto\">\n          {output.map((line, index) => (\n            <div \n              key={index} \n              className={\n                line.startsWith('$') ? 'text-green-400' :\n                line.includes('Compiling') || line.includes('Finished') || line.includes('Running') ? 'text-gray-400' :\n                line.includes('error') ? 'text-red-400' :\n                line.includes('Ready') ? 'text-blue-400' :\n                'text-white'\n              }\n            >\n              {line}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7615},"client/src/components/game/ChallengeReward.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\n\ninterface ChallengeRewardProps {\n  isVisible: boolean;\n  nftImageUrl: string | null;\n}\n\nexport function ChallengeReward({ isVisible, nftImageUrl }: ChallengeRewardProps) {\n  const [showContent, setShowContent] = useState(false);\n\n  useEffect(() => {\n    if (isVisible) {\n      setShowContent(true);\n      // Auto-hide after 4 seconds\n      const timer = setTimeout(() => {\n        setShowContent(false);\n      }, 4000);\n      return () => clearTimeout(timer);\n    } else {\n      setShowContent(false);\n    }\n  }, [isVisible]);\n\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-[100] flex items-center justify-center pointer-events-none\">\n      {/* Background overlay with matrix effect */}\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        transition={{ duration: 0.3 }}\n        className=\"absolute inset-0 bg-black/80 backdrop-blur-sm\"\n        style={{\n          backgroundImage: `radial-gradient(circle at 25% 25%, rgba(139, 92, 246, 0.1) 0%, transparent 50%),\n                           radial-gradient(circle at 75% 75%, rgba(6, 182, 212, 0.1) 0%, transparent 50%)`\n        }}\n      />\n\n      {/* Matrix digital rain effect */}\n      <div className=\"absolute inset-0 overflow-hidden opacity-20\">\n        {[...Array(20)].map((_, i) => (\n          <motion.div\n            key={i}\n            className=\"absolute w-px bg-gradient-to-b from-transparent via-tech-cyan-400 to-transparent\"\n            style={{\n              left: `${(i * 5) % 100}%`,\n              height: '100vh',\n            }}\n            initial={{ y: '-100vh', opacity: 0 }}\n            animate={{ \n              y: '100vh', \n              opacity: [0, 1, 0],\n              transition: {\n                duration: 2 + (i % 3),\n                repeat: Infinity,\n                delay: i * 0.2,\n                ease: 'linear'\n              }\n            }}\n          />\n        ))}\n      </div>\n\n      {/* Main content container */}\n      <div className=\"relative z-10 flex flex-col items-center\">\n        {/* \"CORRECT\" Text with Matrix Effect */}\n        <motion.h1\n          initial={{ opacity: 0, scale: 0.5, rotateX: -90 }}\n          animate={{ \n            opacity: 1, \n            scale: 1, \n            rotateX: 0,\n            transition: {\n              duration: 0.6,\n              ease: \"easeOut\",\n              type: \"spring\",\n              stiffness: 100\n            }\n          }}\n          className=\"text-8xl font-titulo text-tech-cyan-400 text-shadow-matrix-glow mb-8 select-none\"\n          style={{\n            fontWeight: 900,\n            letterSpacing: '0.1em',\n            textTransform: 'uppercase'\n          }}\n        >\n          CORRECT\n        </motion.h1>\n\n        {/* Subtitle */}\n        <motion.div\n          initial={{ opacity: 0, y: 20 }}\n          animate={{ \n            opacity: 1, \n            y: 0,\n            transition: { delay: 0.3, duration: 0.4 }\n          }}\n          className=\"text-center mb-8\"\n        >\n          <div className=\"text-tech-purple-400 font-code text-lg tracking-wider\">\n            CHALLENGE COMPLETED\n          </div>\n          <div className=\"text-gray-400 font-code text-sm mt-1\">\n            REWARD UNLOCKED\n          </div>\n        </motion.div>\n\n        {/* NFT Image with Advanced Animation */}\n        {nftImageUrl && (\n          <motion.div\n            initial={{ opacity: 0, y: 50, scale: 0.8, rotateY: -180 }}\n            animate={{ \n              opacity: 1, \n              y: 0, \n              scale: 1,\n              rotateY: 0,\n              transition: { \n                delay: 0.5, \n                duration: 0.8, \n                ease: \"easeOut\",\n                type: \"spring\",\n                stiffness: 80\n              }\n            }}\n            whileHover={{ \n              scale: 1.05, \n              rotateY: 5,\n              transition: { duration: 0.2 }\n            }}\n            className=\"relative\"\n          >\n            {/* Glow effect behind NFT */}\n            <motion.div\n              animate={{\n                scale: [1, 1.1, 1],\n                opacity: [0.3, 0.6, 0.3],\n                transition: {\n                  duration: 2,\n                  repeat: Infinity,\n                  ease: \"easeInOut\"\n                }\n              }}\n              className=\"absolute inset-0 bg-gradient-to-r from-tech-purple-500 to-tech-cyan-500 rounded-2xl blur-xl -z-10\"\n            />\n\n            {/* NFT Container */}\n            <div className=\"relative p-4 bg-gradient-to-br from-tech-purple-900/50 to-tech-cyan-900/50 rounded-2xl border-2 border-tech-cyan-400/30 backdrop-blur-sm\">\n              <img\n                src={nftImageUrl}\n                alt=\"Challenge Reward NFT\"\n                className=\"w-64 h-64 object-contain rounded-xl\"\n                style={{\n                  filter: 'drop-shadow(0 0 20px rgba(6, 182, 212, 0.4))'\n                }}\n              />\n            </div>\n\n            {/* Sparkle effects around NFT */}\n            {[...Array(8)].map((_, i) => (\n              <motion.div\n                key={i}\n                className=\"absolute w-2 h-2 bg-tech-cyan-400 rounded-full\"\n                style={{\n                  top: `${20 + (i % 4) * 20}%`,\n                  left: `${10 + (i % 3) * 30}%`,\n                }}\n                animate={{\n                  scale: [0, 1, 0],\n                  opacity: [0, 1, 0],\n                  rotate: [0, 180, 360],\n                  transition: {\n                    duration: 1.5,\n                    repeat: Infinity,\n                    delay: i * 0.2,\n                    ease: \"easeInOut\"\n                  }\n                }}\n              />\n            ))}\n          </motion.div>\n        )}\n\n        {/* Bottom message */}\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ \n            opacity: 1,\n            transition: { delay: 1.2, duration: 0.5 }\n          }}\n          className=\"mt-8 text-center\"\n        >\n          <div className=\"text-tech-cyan-400 font-code text-sm tracking-wider\">\n            + NFT REWARD ADDED TO COLLECTION\n          </div>\n          <motion.div\n            animate={{\n              opacity: [0.5, 1, 0.5],\n              transition: {\n                duration: 2,\n                repeat: Infinity,\n                ease: \"easeInOut\"\n              }\n            }}\n            className=\"text-gray-500 font-code text-xs mt-2\"\n          >\n            Continue to next challenge...\n          </motion.div>\n        </motion.div>\n      </div>\n    </div>\n  );\n}","size_bytes":6661},"client/src/components/game/GameCanvas.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { useGameStore } from \"@/hooks/use-game-store\";\n\ninterface GameCanvasProps {\n  networkPingActive?: boolean;\n  sparkleActive?: boolean;\n  coinFallActive?: boolean;\n  dataStreamActive?: boolean;\n  transactionActive?: boolean;\n  lastStoredMessage?: string | null;\n}\n\nexport function GameCanvas({\n  networkPingActive,\n  sparkleActive,\n  coinFallActive,\n  dataStreamActive,\n  transactionActive,\n  lastStoredMessage\n}: GameCanvasProps) {\n  const canvasRef = useRef<HTMLDivElement>(null);\n  const gameState = useGameStore();\n\n  useEffect(() => {\n    if (sparkleActive && canvasRef.current) {\n      // Create sparkle effects\n      for (let i = 0; i < 5; i++) {\n        const sparkle = document.createElement('div');\n        sparkle.className = 'sparkle-effect';\n        sparkle.style.left = Math.random() * 100 + '%';\n        sparkle.style.top = Math.random() * 100 + '%';\n        sparkle.style.animationDelay = i * 0.1 + 's';\n        canvasRef.current.appendChild(sparkle);\n        \n        setTimeout(() => {\n          if (sparkle.parentNode) {\n            sparkle.parentNode.removeChild(sparkle);\n          }\n        }, 1500);\n      }\n    }\n  }, [sparkleActive]);\n\n  useEffect(() => {\n    if (dataStreamActive && canvasRef.current) {\n      // Create data stream effects for PDA success\n      for (let i = 0; i < 20; i++) {\n        const dataParticle = document.createElement('div');\n        dataParticle.className = 'data-stream-particle';\n        dataParticle.style.cssText = `\n          position: absolute;\n          width: 4px;\n          height: 4px;\n          background: #08ddb8;\n          border-radius: 50%;\n          left: ${40 + Math.sin(i * 0.3) * 20}%;\n          top: ${i * 4}%;\n          animation: dataStreamFlow 3.5s ease-out forwards;\n          animation-delay: ${i * 100}ms;\n          box-shadow: 0 0 8px #08ddb8;\n        `;\n        canvasRef.current.appendChild(dataParticle);\n        \n        setTimeout(() => {\n          if (dataParticle.parentNode) {\n            dataParticle.parentNode.removeChild(dataParticle);\n          }\n        }, 3500);\n      }\n    }\n  }, [dataStreamActive]);\n\n  return (\n    <div \n      ref={canvasRef}\n      className=\"fixed inset-0 pointer-events-none z-40\"\n      style={{ \n        display: networkPingActive || sparkleActive || coinFallActive || dataStreamActive || transactionActive || lastStoredMessage ? 'block' : 'none' \n      }}\n    >\n      {/* Network ping effect */}\n      {networkPingActive && (\n        <div className=\"absolute top-4 right-4 bg-blue-500/90 text-white px-3 py-2 rounded-lg font-mono text-sm animate-pulse\">\n          <i className=\"fas fa-wifi mr-2\" />\n          Connecting to Solana...\n        </div>\n      )}\n\n      {/* Transaction success effect */}\n      {transactionActive && (\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-green-500/90 text-white px-6 py-4 rounded-lg font-deputy text-lg animate-bounce\">\n          <i className=\"fas fa-check-circle mr-2\" />\n          Transaction Successful!\n        </div>\n      )}\n\n      {/* Coin fall effect */}\n      {coinFallActive && (\n        <div className=\"absolute inset-0\">\n          {Array.from({ length: 10 }, (_, i) => (\n            <div\n              key={i}\n              className=\"absolute text-sunset-400 text-2xl animate-bounce\"\n              style={{\n                left: Math.random() * 100 + '%',\n                top: Math.random() * 50 + '%',\n                animationDelay: i * 0.1 + 's',\n                animationDuration: '2s'\n              }}\n            >\n              <i className=\"fas fa-coins\" />\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Stored message display */}\n      {lastStoredMessage && (\n        <div className=\"absolute bottom-4 left-4 bg-mystic-600/90 text-white px-4 py-3 rounded-lg font-mono text-sm max-w-md\">\n          <i className=\"fas fa-save mr-2\" />\n          {lastStoredMessage}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4007},"client/src/components/layout/Header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { WalletButton } from \"@/components/wallet/WalletButton\";\nimport { cn } from \"@/lib/utils\";\n\ninterface HeaderProps {\n  onThemeToggle: () => void;\n  currentTheme?: string;\n}\n\nexport function Header({ onThemeToggle, currentTheme }: HeaderProps) {\n  const [location] = useLocation();\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  const navItems = [\n    { href: \"/\", label: \"Home\" },\n    { href: \"/cypherpunks-ethos\", label: \"Ethos\" },\n    { href: \"/mindmap\", label: \"Mindmap\" },\n    { href: \"/lessons\", label: \"Lessons\" },\n    { href: \"/profile\", label: \"Profile\" },\n  ];\n\n  const toggleMobileMenu = () => {\n    setIsMobileMenuOpen(!isMobileMenuOpen);\n  };\n\n  const closeMobileMenu = () => {\n    setIsMobileMenuOpen(false);\n  };\n\n  return (\n    <>\n      {/* Mobile header - optimized for small screens */}\n      <header \n        className=\"fixed top-0 left-0 right-0 z-50 bg-black/95 backdrop-blur-sm border-b border-cyan-400/20\"\n        style={{ height: 'var(--header-height)' }}\n      >\n        <div className=\"container mx-auto px-3 py-2 sm:px-4 sm:py-3 flex items-center justify-between h-full\">\n          {/* Mobile menu button */}\n          <button\n            onClick={toggleMobileMenu}\n            className=\"mobile-nav-toggle md:hidden\"\n            aria-label=\"Toggle navigation menu\"\n          >\n            <svg\n              className=\"w-6 h-6 text-cyan-400\"\n              fill=\"none\"\n              stroke=\"currentColor\"\n              viewBox=\"0 0 24 24\"\n            >\n              {isMobileMenuOpen ? (\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              ) : (\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\n              )}\n            </svg>\n          </button>\n\n          {/* Logo - responsive sizing */}\n          <Link href=\"/\">\n            <div className=\"flex items-center cursor-pointer touch-target\">\n              <img \n                src=\"/sr-logo.png\" \n                alt=\"@sr\" \n                className=\"h-8 sm:h-10 md:h-12 w-auto hover:opacity-80 transition-opacity\"\n              />\n            </div>\n          </Link>\n          \n          {/* Desktop navigation */}\n          <nav className=\"hidden md:flex items-center space-x-6\">\n            {navItems.map((item) => (\n              <Link key={item.href} href={item.href}>\n                <span\n                  className={cn(\n                    \"font-mono text-sm lg:text-base text-gray-300 hover:text-cyan-400 transition-colors uppercase tracking-wider cursor-pointer touch-target flex items-center justify-center px-3 py-2 rounded-lg\",\n                    location === item.href && \"text-cyan-400 bg-cyan-400/10\"\n                  )}\n                >\n                  {item.label}\n                </span>\n              </Link>\n            ))}\n          </nav>\n          \n          {/* Right side actions */}\n          <div className=\"flex items-center\">\n            <WalletButton />\n          </div>\n        </div>\n      </header>\n      {/* Mobile navigation overlay */}\n      {isMobileMenuOpen && (\n        <div \n          className=\"mobile-overlay md:hidden\"\n          onClick={closeMobileMenu}\n        />\n      )}\n      {/* Mobile navigation sidebar */}\n      <nav className={cn(\n        \"mobile-sidebar md:hidden\",\n        isMobileMenuOpen ? \"mobile-sidebar-open\" : \"mobile-sidebar-closed\"\n      )}\n      style={{ top: 'var(--header-height)' }}\n      >\n        <div className=\"p-mobile-6 space-y-1\">\n          <div className=\"text-tech-cyan-400 font-mono text-mobile-sm uppercase tracking-wider mb-6 px-3\">\n            Navigation\n          </div>\n          {navItems.map((item) => (\n            <Link key={item.href} href={item.href}>\n              <div\n                onClick={closeMobileMenu}\n                className={cn(\n                  \"block px-4 py-4 text-mobile-lg font-medium text-gray-300 hover:text-tech-cyan-400 hover:bg-tech-cyan-400/10 rounded-lg transition-all duration-200 touch-target cursor-pointer\",\n                  location === item.href && \"text-tech-cyan-400 bg-tech-cyan-400/20 border-l-4 border-tech-cyan-400\"\n                )}\n              >\n                {item.label}\n              </div>\n            </Link>\n          ))}\n          \n          {/* Mobile-only utility links */}\n          <div className=\"pt-6 mt-6 border-t border-tech-cyan-400/20\">\n            <Link href=\"/wallet-test\">\n              <div\n                onClick={closeMobileMenu}\n                className=\"block px-4 py-4 text-mobile-lg font-medium text-gray-400 hover:text-tech-cyan-400 hover:bg-tech-cyan-400/10 rounded-lg transition-all duration-200 touch-target cursor-pointer\"\n              >\n                Wallet Test\n              </div>\n            </Link>\n          </div>\n        </div>\n      </nav>\n    </>\n  );\n}\n","size_bytes":4975},"client/src/components/layout/MainLayout.tsx":{"content":"import { ReactNode, useEffect, useState } from \"react\";\nimport { Header } from \"./Header\";\nimport { useGameStore } from \"@/hooks/use-game-store\";\nimport { GameCanvas } from \"@/components/game/GameCanvas\";\nimport { useTheme } from \"next-themes\";\nimport { GlobalLoader } from \"@/components/ui/GlobalLoader\";\nimport { useLoadingManager } from \"@/hooks/use-loading-manager\";\n\ninterface MainLayoutProps {\n  children: ReactNode;\n}\n\nexport function MainLayout({ children }: MainLayoutProps) {\n  const { theme, setTheme } = useTheme();\n  const [mounted, setMounted] = useState(false);\n  const gameState = useGameStore();\n  const { showLoader } = useLoadingManager();\n\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  useEffect(() => {\n    // Create data particles periodically with error handling\n    const createDataParticle = () => {\n      try {\n        const particle = document.createElement('div');\n        particle.className = 'data-particle';\n        particle.style.top = Math.random() * 100 + '%';\n        particle.style.animationDelay = Math.random() * 15 + 's';\n        particle.style.animationDuration = (15 + Math.random() * 10) + 's';\n        document.body.appendChild(particle);\n        \n        setTimeout(() => {\n          try {\n            if (particle.parentNode) {\n              particle.parentNode.removeChild(particle);\n            }\n          } catch (error) {\n            console.debug('Particle cleanup error:', error);\n          }\n        }, 25000);\n      } catch (error) {\n        console.debug('Particle creation error:', error);\n      }\n    };\n\n    const interval = setInterval(createDataParticle, 2000);\n    \n    // Create initial particles\n    for (let i = 0; i < 8; i++) {\n      setTimeout(createDataParticle, i * 500);\n    }\n    \n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"dark\" ? \"light\" : \"dark\");\n  };\n\n  if (!mounted) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-black text-white overflow-x-hidden relative flex flex-col\">\n      {/* Blueshift geometric grid pattern background */}\n      <div className=\"absolute inset-0 opacity-[0.03] bg-repeat\" style={{\n        backgroundImage: `url(\"data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' stroke='%2300FFFF' stroke-width='0.5'%3E%3Cpath d='M0 0h60v60H0z'/%3E%3Cpath d='M0 30h60M30 0v60'/%3E%3Cpath d='M15 0v60M45 0v60M0 15h60M0 45h60'/%3E%3C/g%3E%3C/svg%3E\")`,\n      }} />\n      {/* Subtle tech accent lines */}\n      <div className=\"absolute inset-0 opacity-[0.02]\" style={{\n        backgroundImage: `linear-gradient(45deg, transparent 49%, rgba(0, 255, 255, 0.1) 50%, transparent 51%), linear-gradient(-45deg, transparent 49%, rgba(0, 255, 255, 0.1) 50%, transparent 51%)`,\n        backgroundSize: '20px 20px'\n      }} />\n      {/* Blueshift-style floating data elements */}\n      <div className=\"absolute top-[15%] right-[10%] w-1 h-1 bg-cyan-400 rounded-full opacity-60 animate-pulse\" style={{ animationDelay: '0s' }} />\n      <div className=\"absolute top-[35%] left-[5%] w-1 h-1 bg-cyan-400 rounded-full opacity-40 animate-pulse\" style={{ animationDelay: '-2s' }} />\n      <div className=\"absolute top-[55%] right-[20%] w-1 h-1 bg-cyan-400 rounded-full opacity-70 animate-pulse\" style={{ animationDelay: '-4s' }} />\n      <div className=\"absolute top-[75%] left-[15%] w-1 h-1 bg-cyan-400 rounded-full opacity-50 animate-pulse\" style={{ animationDelay: '-6s' }} />\n      <Header onThemeToggle={toggleTheme} currentTheme={theme} />\n      <main \n        className=\"flex-grow px-3 sm:px-4 md:px-6 lg:px-8\"\n        style={{ paddingTop: 'var(--header-height)' }}\n      >\n        {children}\n      </main>\n      {/* Game Canvas Overlay */}\n      <GameCanvas\n        networkPingActive={gameState.networkPingActive}\n        sparkleActive={gameState.sparkleActive}\n        coinFallActive={gameState.coinFallActive}\n        transactionActive={gameState.transactionActive}\n        lastStoredMessage={gameState.lastStoredMessage}\n      />\n      {/* Global Loader */}\n      <GlobalLoader show={showLoader} />\n      {/* Blueshift-style Footer */}\n      <footer className=\"bg-black/50 border-t border-cyan-400/10 py-4 backdrop-blur-sm mt-auto\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center space-y-2 md:space-y-0\">\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"font-space-gothic text-sm bg-gradient-to-r from-tech-cyan-400 to-tech-purple-400 bg-clip-text text-transparent\">@shadowranch.xyz </span>\n              <span className=\"text-gray-500 font-code text-xs\">|</span>\n              <span className=\"text-gray-400 font-code text-xs\">Learn Solana Program Development</span>\n            </div>\n            <div className=\"flex items-center space-x-6\">\n              <a \n                href=\"https://x.com/Bull_Run_Boost\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"text-gray-400 hover:text-tech-cyan-400 transition-colors flex items-center space-x-1\"\n                title=\"Follow us on X\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z\"/>\n                </svg>\n              </a>\n              <a \n                href=\"https://t.me/+Cb2SmUQ-53QwZGM5\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"text-gray-400 hover:text-tech-cyan-400 transition-colors flex items-center space-x-1\"\n                title=\"Join our Telegram\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M11.944 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0a12 12 0 0 0-.056 0zm4.962 7.224c.1-.002.321.023.465.14a.506.506 0 0 1 .171.325c.016.093.036.306.02.472-.18 1.898-.962 6.502-1.36 8.627-.168.9-.499 1.201-.82 1.23-.696.065-1.225-.46-1.9-.902-1.056-.693-1.653-1.124-2.678-1.8-1.185-.78-.417-1.21.258-1.91.177-.184 3.247-2.977 3.307-3.23.007-.032.014-.15-.056-.212s-.174-.041-.249-.024c-.106.024-1.793 1.14-5.061 3.345-.48.33-.913.49-1.302.48-.428-.008-1.252-.241-1.865-.44-.752-.245-1.349-.374-1.297-.789.027-.216.325-.437.893-.663 3.498-1.524 5.83-2.529 6.998-3.014 3.332-1.386 4.025-1.627 4.476-1.635z\"/>\n                </svg>\n              </a>\n              <a \n                href=\"https://discord.com/users/cialonecodes\" \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"text-gray-400 hover:text-tech-cyan-400 transition-colors\"\n                title=\"Connect on Discord\"\n              >\n                <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M20.317 4.3698a19.7913 19.7913 0 00-4.8851-1.5152.0741.0741 0 00-.0785.0371c-.211.3753-.4447.8648-.6083 1.2495-1.8447-.2762-3.68-.2762-5.4868 0-.1636-.3933-.4058-.8742-.6177-1.2495a.077.077 0 00-.0785-.037 19.7363 19.7363 0 00-4.8852 1.515.0699.0699 0 00-.0321.0277C.5334 9.0458-.319 13.5799.0992 18.0578a.0824.0824 0 00.0312.0561c2.0528 1.5076 4.0413 2.4228 5.9929 3.0294a.0777.0777 0 00.0842-.0276c.4616-.6304.8731-1.2952 1.226-1.9942a.076.076 0 00-.0416-.1057c-.6528-.2476-1.2743-.5495-1.8722-.8923a.077.077 0 01-.0076-.1277c.1258-.0943.2517-.1923.3718-.2914a.0743.0743 0 01.0776-.0105c3.9278 1.7933 8.18 1.7933 12.0614 0a.0739.0739 0 01.0785.0095c.1202.099.246.1981.3728.2924a.077.077 0 01-.0066.1276 12.2986 12.2986 0 01-1.873.8914.0766.0766 0 00-.0407.1067c.3604.698.7719 1.3628 1.225 1.9932a.076.076 0 00.0842.0286c1.961-.6067 3.9495-1.5219 6.0023-3.0294a.077.077 0 00.0313-.0552c.5004-5.177-.8382-9.6739-3.5485-13.6604a.061.061 0 00-.0312-.0286zM8.02 15.3312c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9555-2.4189 2.157-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419-.0002 1.3332-.9555 2.4189-2.1569 2.4189zm7.9748 0c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9554-2.4189 2.1569-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.9554 2.4189-2.1568 2.4189Z\"/>\n                </svg>\n              </a>\n              \n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":8478},"client/src/components/lessons/HintCharacter-corrupted.tsx":{"content":"import { useState, useImperativeHandle, forwardRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { TechCard } from \"@/components/ui/TechCard\";\n\ninterface HintCharacterProps {\n  stepHints?: string[];\n  currentStep?: number;\n}\n\nexport interface HintCharacterRef {\n  showHint: (message: string) => void;\n  showContextualHint: (stepId: number) => void;\n  showProgressiveHint: (attemptCount: number) => void;\n}\n\nconst HintCharacter = forwardRef<HintCharacterRef, HintCharacterProps>((props, ref) => {\n  const { stepHints = [], currentStep = 1 } = props;\n  const [isVisible, setIsVisible] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [hintType, setHintType] = useState<'default' | 'contextual' | 'progressive'>('default');\n\n  const progressiveHints = [\n    \"Try checking the syntax carefully. Look for any missing characters.\",\n    \"Remember to follow the exact pattern shown in the instructions.\",\n    \"Take a closer look at the example code structure. What might be missing?\",\n    \"Check for typos, spacing, and proper capitalization in your code.\",\n    \"Still stuck? The solution requires following the exact pattern specified in the challenge.\"\n  ];\n\n  useImperativeHandle(ref, () => ({\n    showHint: (hintMessage: string) => {\n      setMessage(hintMessage);\n      setHintType('default');\n      setIsVisible(true);\n      \n      setTimeout(() => {\n        setIsVisible(false);\n      }, 8000);\n    },\n    \n    showContextualHint: (stepId: number) => {\n      const stepHint = stepHints[stepId - 1] || \"Keep working through the challenge step by step!\";\n      setMessage(stepHint);\n      setHintType('contextual');\n      setIsVisible(true);\n      \n      setTimeout(() => {\n        setIsVisible(false);\n      }, 10000);\n    },\n    \n    showProgressiveHint: (attemptCount: number) => {\n      const hintIndex = Math.min(attemptCount - 1, progressiveHints.length - 1);\n      const progressiveHint = progressiveHints[hintIndex];\n      setMessage(progressiveHint);\n      setHintType('progressive');\n      setIsVisible(true);\n      \n      setTimeout(() => {\n        setIsVisible(false);\n      }, 12000);\n    }\n  }));\n\n  const getBubbleColor = () => {\n    switch (hintType) {\n      case 'contextual':\n        return 'bg-tech-purple-500 border-t-tech-purple-500';\n      case 'progressive':\n        return 'bg-amber-500 border-t-amber-500';\n      default:\n        return 'bg-tech-cyan-500 border-t-tech-cyan-500';\n    }\n  };\n\n  const getCharacterEmoji = () => {\n    switch (hintType) {\n      case 'contextual':\n        return '🎯';\n      case 'progressive':\n        return '💡';\n      default:\n        return '🤖';\n    }\n  };\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <div className=\"fixed bottom-4 right-4 z-50\">\n          <motion.div\n            initial={{ opacity: 0, y: 50, scale: 0.8 }}\n            animate={{ opacity: 1, y: 0, scale: 1 }}\n            exit={{ opacity: 0, y: 50, scale: 0.8 }}\n            transition={{ duration: 0.3, ease: \"easeOut\" }}\n            className=\"relative\"\n          >\n            {/* Enhanced Speech Bubble */}\n            <motion.div\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.8 }}\n              transition={{ duration: 0.2, delay: 0.1 }}\n              className=\"absolute bottom-20 right-0 mb-2 mr-4 max-w-sm\"\n            >\n              <TechCard variant=\"cyan\" className={`${getBubbleColor().split(' ')[0]} border-2 border-tech-cyan-600/50 shadow-2xl`}>\n                <div className=\"p-4\">\n                  <div className=\"flex items-start space-x-2\">\n                    <span className=\"text-lg flex-shrink-0 mt-0.5\">{getCharacterEmoji()}</span>\n                    <div>\n                      <div className=\"text-xs font-tech text-tech-cyan-300 uppercase tracking-wider mb-1\">\n                        {hintType === 'contextual' ? 'CONTEXTUAL HINT' : \n                         hintType === 'progressive' ? 'PROGRESSIVE HINT' : 'AI ASSISTANT'}\n                      </div>\n                      <p className=\"text-sm font-code leading-relaxed text-white\">{message}</p>\n                    </div>\n                  </div>\n                </div>\n                {/* Enhanced Speech bubble tail */}\n                <div className=\"absolute bottom-0 right-8 transform translate-y-full\">\n                  <div className={`w-0 h-0 border-x-8 border-t-8 border-solid border-transparent ${getBubbleColor().split(' ')[1]}`}></div>\n                </div>\n              </TechCard>\n            </motion.div>\n\n            {/* Character Image/Avatar */}\n            <motion.div\n              animate={{ \n                rotate: [0, 2, -2, 0],\n                scale: [1, 1.05, 1]\n              }}\n              transition={{\n                rotate: {\n                  duration: 2,\n                  repeat: Infinity,\n                  ease: \"easeInOut\"\n                },\n                scale: {\n                  duration: 1.5,\n                  repeat: Infinity,\n                  ease: \"easeInOut\"\n                }\n              }}\n              className=\"w-16 h-16 bg-gradient-to-br from-tech-purple-600 to-tech-cyan-600 rounded-full flex items-center justify-center shadow-lg border-2 border-tech-cyan-400\"\n            >\n              <span className=\"text-2xl\">🤖</span>\n            </motion.div>\n\n            {/* Floating particles around character */}\n            <motion.div\n              animate={{\n                y: [-2, 2, -2],\n                x: [-1, 1, -1],\n                opacity: [0.7, 1, 0.7]\n              }}\n              transition={{\n                duration: 3,\n                repeat: Infinity,\n                ease: \"easeInOut\"\n              }}\n              className=\"absolute -top-1 -right-1 w-2 h-2 bg-tech-cyan-400 rounded-full\"\n            />\n            <motion.div\n              animate={{\n                y: [2, -2, 2],\n                x: [1, -1, 1],\n                opacity: [0.5, 0.9, 0.5]\n              }}\n              transition={{\n                duration: 2.5,\n                repeat: Infinity,\n                ease: \"easeInOut\",\n                delay: 0.5\n              }}\n              className=\"absolute -bottom-1 -left-1 w-1.5 h-1.5 bg-tech-purple-400 rounded-full\"\n            />\n          </motion.div>\n        </div>\n      )}\n    </AnimatePresence>\n  );\n});\n\nHintCharacter.displayName = \"HintCharacter\";\n\nexport { HintCharacter };","size_bytes":6491},"client/src/components/lessons/HintCharacter.tsx":{"content":"import { useState, useImperativeHandle, forwardRef } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { TechCard } from \"@/components/ui/TechCard\";\n\ninterface HintCharacterProps {\n  stepHints?: string[];\n  currentStep?: number;\n}\n\nexport interface HintCharacterRef {\n  showHint: (message: string) => void;\n  showContextualHint: (stepId: number) => void;\n  showProgressiveHint: (attemptCount: number) => void;\n}\n\nconst HintCharacter = forwardRef<HintCharacterRef, HintCharacterProps>((props, ref) => {\n  const { stepHints = [], currentStep = 1 } = props;\n  const [isVisible, setIsVisible] = useState(false);\n  const [message, setMessage] = useState(\"\");\n  const [hintType, setHintType] = useState<'default' | 'contextual' | 'progressive'>('default');\n\n  const progressiveHints = [\n    \"Try checking the syntax carefully. Look for any missing characters.\",\n    \"Remember to follow the exact pattern shown in the instructions.\",\n    \"Take a closer look at the example code structure. What might be missing?\",\n    \"Check for typos, spacing, and proper capitalization in your code.\",\n    \"Still stuck? The solution requires following the exact pattern specified in the challenge.\"\n  ];\n\n  useImperativeHandle(ref, () => ({\n    showHint: (hintMessage: string) => {\n      setMessage(hintMessage);\n      setHintType('default');\n      setIsVisible(true);\n      \n      setTimeout(() => {\n        setIsVisible(false);\n      }, 8000);\n    },\n    \n    showContextualHint: (stepId: number) => {\n      const stepHint = stepHints[stepId - 1] || \"Keep working through the challenge step by step!\";\n      setMessage(stepHint);\n      setHintType('contextual');\n      setIsVisible(true);\n      \n      setTimeout(() => {\n        setIsVisible(false);\n      }, 10000);\n    },\n    \n    showProgressiveHint: (attemptCount: number) => {\n      const hintIndex = Math.min(attemptCount - 1, progressiveHints.length - 1);\n      const progressiveHint = progressiveHints[hintIndex];\n      setMessage(progressiveHint);\n      setHintType('progressive');\n      setIsVisible(true);\n      \n      setTimeout(() => {\n        setIsVisible(false);\n      }, 12000);\n    }\n  }));\n\n  const getBubbleColor = () => {\n    switch (hintType) {\n      case 'contextual':\n        return 'bg-tech-purple-500 border-t-tech-purple-500';\n      case 'progressive':\n        return 'bg-amber-500 border-t-amber-500';\n      default:\n        return 'bg-tech-cyan-500 border-t-tech-cyan-500';\n    }\n  };\n\n  const getCharacterEmoji = () => {\n    switch (hintType) {\n      case 'contextual':\n        return '🎯';\n      case 'progressive':\n        return '💡';\n      default:\n        return '🤖';\n    }\n  };\n\n  return (\n    <AnimatePresence>\n      {isVisible && (\n        <div className=\"fixed bottom-4 right-4 z-50\">\n          <motion.div\n            initial={{ opacity: 0, y: 50, scale: 0.8 }}\n            animate={{ opacity: 1, y: 0, scale: 1 }}\n            exit={{ opacity: 0, y: 50, scale: 0.8 }}\n            transition={{ duration: 0.3, ease: \"easeOut\" }}\n            className=\"relative\"\n          >\n            {/* Enhanced Speech Bubble */}\n            <motion.div\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.8 }}\n              transition={{ duration: 0.2, delay: 0.1 }}\n              className=\"absolute bottom-20 right-0 mb-2 mr-4 max-w-sm\"\n            >\n              <div className={`relative ${getBubbleColor().split(' ')[0]} border-2 border-tech-cyan-600/50 shadow-2xl rounded-lg`}>\n                {/* Enhanced Speech bubble tail */}\n                <div className=\"absolute bottom-0 right-8 transform translate-y-full\">\n                  <div className={`w-0 h-0 border-x-8 border-t-8 border-solid border-transparent ${getBubbleColor().split(' ')[1]}`}></div>\n                </div>\n              </div>\n            </motion.div>\n\n            \n\n            {/* Floating particles around character */}\n            <motion.div\n              animate={{\n                y: [-2, 2, -2],\n                x: [-1, 1, -1],\n                opacity: [0.7, 1, 0.7]\n              }}\n              transition={{\n                duration: 3,\n                repeat: Infinity,\n                ease: \"easeInOut\"\n              }}\n              className=\"absolute -top-1 -right-1 w-2 h-2 bg-tech-cyan-400 rounded-full\"\n            />\n            <motion.div\n              animate={{\n                y: [2, -2, 2],\n                x: [1, -1, 1],\n                opacity: [0.5, 0.9, 0.5]\n              }}\n              transition={{\n                duration: 2.5,\n                repeat: Infinity,\n                ease: \"easeInOut\",\n                delay: 0.5\n              }}\n              className=\"absolute -bottom-1 -left-1 w-1.5 h-1.5 bg-tech-purple-400 rounded-full\"\n            />\n          </motion.div>\n        </div>\n      )}\n    </AnimatePresence>\n  );\n});\n\nHintCharacter.displayName = \"HintCharacter\";\n\nexport { HintCharacter };","size_bytes":5007},"client/src/components/lessons/LessonLayout.tsx":{"content":"import { ReactNode } from \"react\";\nimport { WesternCard } from \"@/components/ui/WesternCard\";\nimport { WesternButton } from \"@/components/ui/WesternButton\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { TechButton } from \"@/components/ui/TechButton\";\nimport { LessonProgress } from \"./LessonProgress\";\nimport { useLocation } from \"wouter\";\n\ninterface LessonLayoutProps {\n  title: string;\n  currentStep: number;\n  totalSteps: number;\n  progress: number;\n  onPrevious?: () => void;\n  onNext?: () => void;\n  onComplete?: () => void;\n  canGoNext?: boolean;\n  hasPrevious?: boolean;\n  hasNext?: boolean;\n  nextButtonText?: string;\n  isCompleted?: boolean;\n  children: ReactNode;\n}\n\nexport function LessonLayout({\n  title,\n  currentStep,\n  totalSteps,\n  progress,\n  onPrevious,\n  onNext,\n  onComplete,\n  canGoNext = false,\n  hasPrevious = false,\n  hasNext = false,\n  nextButtonText = \"Next\",\n  isCompleted = false,\n  children\n}: LessonLayoutProps) {\n  const [, setLocation] = useLocation();\n\n  const handleExit = () => {\n    setLocation(\"/lessons\");\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      {/* Simplified Top Bar - Removed Progress Container */}\n      <div className=\"fixed top-0 left-0 right-0 z-40 w-full bg-black/80 backdrop-blur-sm\">\n        <div className=\"container mx-auto px-4 py-2\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"font-space-gothic text-xl text-cyan-400\">\n              {title}\n            </h1>\n            <TechButton\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={handleExit}\n              className=\"text-gray-400 hover:text-white bg-transparent\"\n            >\n              <span className=\"text-lg\">✕</span>\n            </TechButton>\n          </div>\n        </div>\n      </div>\n      {/* Main Content - Scrollable with proper padding */}\n      <main className=\"flex-grow overflow-y-auto pt-[120px] pb-[80px]\">\n        <div className=\"container mx-auto px-4 py-6\">\n          {children}\n        </div>\n      </main>\n      {/* Bottom Navigation - Transparent Background */}\n      <div className=\"fixed bottom-0 left-0 right-0 z-30 w-full pl-[0px] pr-[0px] pt-[10px] pb-[10px] mt-[60px] mb-[60px]\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <TechButton\n              variant=\"secondary\"\n              onClick={onPrevious}\n              disabled={!hasPrevious}\n              size=\"sm\"\n              className=\"bg-transparent border-gray-600 text-gray-300 hover:bg-gray-800\"\n            >\n              <span className=\"mr-2\">←</span>\n              PREVIOUS\n            </TechButton>\n            \n            <div className=\"text-center\">\n              <div className=\"font-tech text-xs text-gray-400 uppercase tracking-wider\">STEP</div>\n              <div className=\"font-code text-sm text-cyan-400\">{currentStep} / {totalSteps}</div>\n            </div>\n            \n            {isCompleted ? (\n              <TechButton\n                variant=\"accent\"\n                onClick={onComplete}\n                size=\"sm\"\n                className=\"bg-transparent border-green-600 text-green-400 hover:bg-green-800\"\n              >\n                <span className=\"mr-2\">⭐</span>\n                COMPLETE LESSON\n              </TechButton>\n            ) : (\n              <TechButton\n                variant=\"primary\"\n                onClick={onNext}\n                disabled={!canGoNext}\n                size=\"sm\"\n                className=\"bg-transparent border-cyan-600 text-cyan-400 hover:bg-cyan-800\"\n              >\n                {nextButtonText.toUpperCase()}\n                <span className=\"ml-2\">→</span>\n              </TechButton>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3858},"client/src/components/lessons/LessonProgress.tsx":{"content":"interface LessonProgressProps {\n  currentStep: number;\n  totalSteps: number;\n  progress: number;\n}\n\nexport function LessonProgress({ currentStep, totalSteps, progress }: LessonProgressProps) {\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"flex items-center justify-between text-sm\">\n        <span className=\"font-mono text-gray-400\">\n          Step {currentStep} of {totalSteps}\n        </span>\n        <span className=\"font-mono text-gray-400\">\n          {Math.round(progress)}% Complete\n        </span>\n      </div>\n      \n      <div className=\"progress-trail h-3 rounded-full\">\n        <div \n          className=\"bg-gradient-to-r from-desert-500 to-sunset-500 h-full rounded-full transition-all duration-500\"\n          style={{ width: `${progress}%` }}\n        />\n      </div>\n      \n      {/* Step indicators */}\n      <div className=\"flex justify-between items-center\">\n        {Array.from({ length: totalSteps }, (_, i) => i + 1).map((step) => (\n          <div\n            key={step}\n            className={`w-3 h-3 rounded-full border-2 ${\n              step <= currentStep\n                ? 'bg-desert-500 border-desert-500'\n                : 'bg-transparent border-gray-600'\n            }`}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1275},"client/src/components/lessons/NarrativeBox.tsx":{"content":"import { ReactNode, useState, useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nconst narrativeBoxVariants = cva(\n  \"border-l-4 p-4 rounded-r-lg mb-6 backdrop-blur-sm\",\n  {\n    variants: {\n      variant: {\n        story: \"bg-gradient-to-r from-tech-purple-800/50 to-tech-purple-700/50 border-tech-purple-500\",\n        challenge: \"bg-gradient-to-r from-tech-cyan-800/30 to-tech-cyan-700/30 border-tech-cyan-600\",\n        success: \"bg-gradient-to-r from-green-800/30 to-green-700/30 border-green-500\",\n        warning: \"bg-gradient-to-r from-tech-pink-800/30 to-tech-pink-700/30 border-tech-pink-500\",\n        info: \"bg-gradient-to-r from-blue-800/30 to-blue-700/30 border-blue-500\"\n      }\n    },\n    defaultVariants: {\n      variant: \"story\"\n    }\n  }\n);\n\ninterface NarrativeBoxProps extends VariantProps<typeof narrativeBoxVariants> {\n  children: ReactNode;\n  icon?: string;\n  title?: string;\n  className?: string;\n  typewriter?: boolean;\n  typewriterSpeed?: number;\n}\n\nexport function NarrativeBox({ \n  children, \n  variant, \n  icon = \"🤖\", \n  title = \"System Protocol\",\n  className,\n  typewriter = false,\n  typewriterSpeed = 50\n}: NarrativeBoxProps) {\n  const [displayedText, setDisplayedText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n\n  const text = typeof children === 'string' ? children : '';\n\n  useEffect(() => {\n    if (typewriter && text) {\n      setIsTyping(true);\n      setDisplayedText('');\n      \n      let currentIndex = 0;\n      const timer = setInterval(() => {\n        if (currentIndex <= text.length) {\n          setDisplayedText(text.slice(0, currentIndex));\n          currentIndex++;\n        } else {\n          setIsTyping(false);\n          clearInterval(timer);\n        }\n      }, typewriterSpeed);\n\n      return () => clearInterval(timer);\n    }\n  }, [text, typewriter, typewriterSpeed]);\n  const getIconColor = () => {\n    switch (variant) {\n      case 'challenge':\n        return 'text-tech-cyan-400';\n      case 'success':\n        return 'text-green-400';\n      case 'warning':\n        return 'text-tech-pink-400';\n      case 'info':\n        return 'text-blue-400';\n      default:\n        return 'text-tech-purple-400';\n    }\n  };\n\n  const getTitleColor = () => {\n    switch (variant) {\n      case 'challenge':\n        return 'text-tech-cyan-400';\n      case 'success':\n        return 'text-green-400';\n      case 'warning':\n        return 'text-tech-pink-400';\n      case 'info':\n        return 'text-blue-400';\n      default:\n        return 'text-tech-purple-400';\n    }\n  };\n\n  return (\n    <div className={cn(narrativeBoxVariants({ variant }), className)}>\n      <div className=\"flex items-start space-x-3\">\n        <span className={`${getIconColor()} text-xl mt-1`}>{icon}</span>\n        <div>\n          <h4 className={`font-tech mb-2 ${getTitleColor()} uppercase tracking-wider`}>\n            {title}\n          </h4>\n          <div className=\"text-gray-300 font-code text-sm\">\n            {typewriter ? (\n              <>\n                {displayedText}\n                {isTyping && <span className=\"animate-pulse\">|</span>}\n              </>\n            ) : (\n              children\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3300},"client/src/components/ranch/RewardNftGallery.tsx":{"content":"import { motion } from \"framer-motion\";\nimport { TechCard } from \"@/components/ui/TechCard\";\n\ninterface RewardNft {\n  id: string;\n  lessonId: number;\n  nftImageUrl: string;\n  rewardName: string;\n  awardedAt: Date;\n}\n\ninterface RewardNftGalleryProps {\n  rewards: RewardNft[];\n}\n\nexport function RewardNftGallery({ rewards }: RewardNftGalleryProps) {\n  if (rewards.length === 0) {\n    return (\n      <TechCard variant=\"purple\" className=\"p-6 text-center\">\n        <div className=\"text-tech-cyan-400 text-4xl mb-4\">🎁</div>\n        <h3 className=\"font-space-gothic text-lg text-gray-300 mb-2\">No NFT Rewards Yet</h3>\n        <p className=\"font-code text-sm text-gray-500\">\n          Complete lesson challenges to earn collectible NFT rewards!\n        </p>\n      </TechCard>\n    );\n  }\n\n  return (\n    <TechCard variant=\"purple\" className=\"p-6\">\n      <h3 className=\"font-space-gothic text-xl text-tech-cyan-400 mb-6 flex items-center\">\n        <span className=\"mr-2\">🏆</span>\n        NFT REWARD COLLECTION\n      </h3>\n      \n      <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n        {rewards.map((reward, index) => (\n          <motion.div\n            key={reward.id}\n            initial={{ opacity: 0, scale: 0.8, rotateY: -180 }}\n            animate={{ \n              opacity: 1, \n              scale: 1, \n              rotateY: 0,\n              transition: { \n                delay: index * 0.1,\n                duration: 0.6,\n                ease: \"easeOut\"\n              }\n            }}\n            whileHover={{ \n              scale: 1.05, \n              rotateY: 5,\n              transition: { duration: 0.2 }\n            }}\n            className=\"relative group\"\n          >\n            {/* Glow effect behind NFT */}\n            <motion.div\n              animate={{\n                scale: [1, 1.05, 1],\n                opacity: [0.2, 0.4, 0.2],\n                transition: {\n                  duration: 3,\n                  repeat: Infinity,\n                  ease: \"easeInOut\"\n                }\n              }}\n              className=\"absolute inset-0 bg-gradient-to-r from-tech-purple-500 to-tech-cyan-500 rounded-lg blur-md -z-10\"\n            />\n\n            {/* NFT Container */}\n            <div className=\"relative p-2 bg-gradient-to-br from-tech-purple-900/70 to-tech-cyan-900/70 rounded-lg border border-tech-cyan-400/30 backdrop-blur-sm group-hover:border-tech-cyan-400/60 transition-colors\">\n              <img\n                src={reward.nftImageUrl}\n                alt={reward.rewardName}\n                className=\"w-full h-24 sm:h-32 object-contain rounded-md\"\n                style={{\n                  filter: 'drop-shadow(0 0 10px rgba(6, 182, 212, 0.3))'\n                }}\n              />\n              \n              {/* Reward Info */}\n              <div className=\"mt-2\">\n                <div className=\"text-xs font-code text-tech-cyan-400 truncate\">\n                  {reward.rewardName}\n                </div>\n                <div className=\"text-xs font-code text-gray-500\">\n                  Lesson {reward.lessonId}\n                </div>\n                <div className=\"text-xs font-code text-gray-600\">\n                  {typeof reward.awardedAt === 'string' ? \n                    new Date(reward.awardedAt).toLocaleDateString() : \n                    reward.awardedAt.toLocaleDateString()}\n                </div>\n              </div>\n\n              {/* Sparkle effects on hover */}\n              <div className=\"absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity pointer-events-none\">\n                {[...Array(6)].map((_, i) => (\n                  <motion.div\n                    key={i}\n                    className=\"absolute w-1 h-1 bg-tech-cyan-400 rounded-full\"\n                    style={{\n                      top: `${20 + (i % 3) * 20}%`,\n                      left: `${10 + (i % 2) * 70}%`,\n                    }}\n                    animate={{\n                      scale: [0, 1, 0],\n                      opacity: [0, 1, 0],\n                      transition: {\n                        duration: 2,\n                        repeat: Infinity,\n                        delay: i * 0.3,\n                        ease: \"easeInOut\"\n                      }\n                    }}\n                  />\n                ))}\n              </div>\n            </div>\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Collection Stats */}\n      <div className=\"mt-6 pt-4 border-t border-tech-purple-600/30\">\n        <div className=\"flex justify-between items-center text-sm\">\n          <span className=\"font-code text-gray-400\">Total Collected:</span>\n          <span className=\"font-tech text-tech-cyan-400\">{rewards.length} NFTs</span>\n        </div>\n        <div className=\"flex justify-between items-center text-sm mt-1\">\n          <span className=\"font-code text-gray-400\">Latest Reward:</span>\n          <span className=\"font-code text-gray-300\">\n            {rewards.length > 0 ? (\n              typeof rewards[0].awardedAt === 'string' ? \n                new Date(rewards[0].awardedAt).toLocaleDateString() : \n                rewards[0].awardedAt.toLocaleDateString()\n            ) : 'None'}\n          </span>\n        </div>\n      </div>\n    </TechCard>\n  );\n}","size_bytes":5267},"client/src/components/ui/BackButton.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { TechButton } from \"@/components/ui/TechButton\";\n\ninterface BackButtonProps {\n  currentModule: number;\n  className?: string;\n}\n\nexport function BackButton({ currentModule, className = \"\" }: BackButtonProps) {\n  const [, setLocation] = useLocation();\n\n  const handleGoBack = () => {\n    if (currentModule > 1) {\n      setLocation(`/cypherpunk-module-${currentModule - 1}`);\n    }\n  };\n\n  if (currentModule <= 1) {\n    return null;\n  }\n\n  return (\n    <div className={`fixed top-6 left-6 z-50 ${className}`}>\n      <TechButton \n        variant=\"secondary\" \n        size=\"sm\"\n        onClick={handleGoBack}\n        className=\"bg-gray-800/80 backdrop-blur border-gray-600 hover:border-tech-cyan-400 transition-all duration-300\"\n      >\n        <span className=\"mr-2\">←</span>\n        PREVIOUS\n      </TechButton>\n    </div>\n  );\n}","size_bytes":874},"client/src/components/ui/CodeEditorMobile.tsx":{"content":"import { useRef, useEffect, useState } from 'react';\n// Mobile-first code editor fallback\nimport { TechButton } from '@/components/ui/TechButton';\nimport { cn } from '@/lib/utils';\n\ninterface CodeEditorMobileProps {\n  defaultValue?: string;\n  language?: string;\n  onRun?: (code: string) => void;\n  readOnly?: boolean;\n  theme?: 'vs-dark' | 'light';\n  className?: string;\n  placeholder?: string;\n}\n\nexport function CodeEditorMobile({\n  defaultValue = '',\n  language = 'rust',\n  onRun,\n  readOnly = false,\n  theme = 'vs-dark',\n  className,\n  placeholder = 'Start coding...'\n}: CodeEditorMobileProps) {\n  const editorRef = useRef<any>(null);\n  const [code, setCode] = useState(defaultValue);\n  const [isRunning, setIsRunning] = useState(false);\n  const [editorHeight, setEditorHeight] = useState(300);\n\n  // Dynamically adjust editor height for mobile\n  useEffect(() => {\n    const updateHeight = () => {\n      const viewportHeight = window.innerHeight;\n      const availableHeight = viewportHeight - 200; // Account for header, buttons, etc.\n      const mobileHeight = Math.min(Math.max(availableHeight * 0.4, 250), 400);\n      const desktopHeight = Math.min(Math.max(availableHeight * 0.6, 300), 600);\n      \n      setEditorHeight(window.innerWidth < 768 ? mobileHeight : desktopHeight);\n    };\n\n    updateHeight();\n    window.addEventListener('resize', updateHeight);\n    return () => window.removeEventListener('resize', updateHeight);\n  }, []);\n\n  // Mobile-optimized viewport handling\n  useEffect(() => {\n    if ('visualViewport' in window) {\n      const handleViewportChange = () => {\n        if (window.visualViewport) {\n          const newHeight = window.visualViewport.height * 0.4;\n          if (newHeight > 150) {\n            setEditorHeight(newHeight);\n          }\n        }\n      };\n\n      window.visualViewport?.addEventListener('resize', handleViewportChange);\n      return () => window.visualViewport?.removeEventListener('resize', handleViewportChange);\n    }\n  }, []);\n\n  function handleChange(value: string | undefined) {\n    setCode(value || '');\n  }\n\n  async function handleRun() {\n    if (!onRun || isRunning) return;\n    \n    setIsRunning(true);\n    try {\n      await onRun(code);\n    } finally {\n      setIsRunning(false);\n    }\n  }\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      {/* Editor container with mobile-first styling */}\n      <div className=\"relative\">\n        <div \n          className=\"border-2 border-tech-cyan-400/30 rounded-lg overflow-hidden bg-gray-900\"\n          style={{ height: `${editorHeight}px` }}\n        >\n          <textarea\n            className=\"w-full h-full bg-gray-900 text-green-400 font-mono p-4 resize-none outline-none\"\n            value={code}\n            onChange={(e) => handleChange(e.target.value)}\n            readOnly={readOnly}\n            placeholder={placeholder}\n            style={{\n              fontSize: window.innerWidth < 768 ? '14px' : '16px',\n              lineHeight: window.innerWidth < 768 ? '20px' : '24px',\n              fontFamily: 'ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, \"Liberation Mono\", Menlo, monospace',\n            }}\n          />\n        </div>\n        \n        {/* Mobile optimization indicator */}\n        <div className=\"absolute top-2 right-2 opacity-50\">\n          <div className=\"flex items-center space-x-1 text-xs text-gray-400\">\n            <span className=\"block sm:hidden\">📱</span>\n            <span className=\"hidden sm:block md:hidden\">📱</span>\n            <span className=\"hidden md:block\">💻</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Mobile-optimized run button */}\n      {onRun && (\n        <div className=\"flex flex-col sm:flex-row gap-3 sm:justify-between sm:items-center\">\n          <TechButton\n            onClick={handleRun}\n            disabled={isRunning}\n            variant=\"primary\"\n            size=\"lg\"\n            className=\"w-full sm:w-auto order-2 sm:order-1\"\n          >\n            {isRunning ? (\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                <span>Running...</span>\n              </div>\n            ) : (\n              <div className=\"flex items-center space-x-2\">\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                  <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zM9.555 7.168A1 1 0 008 8v4a1 1 0 001.555.832l3-2a1 1 0 000-1.664l-3-2z\" clipRule=\"evenodd\" />\n                </svg>\n                <span>Run Code</span>\n              </div>\n            )}\n          </TechButton>\n          \n          {/* Mobile-friendly code stats */}\n          <div className=\"text-mobile-sm text-gray-400 font-mono order-1 sm:order-2 text-center sm:text-right\">\n            <div className=\"flex justify-center sm:justify-end space-x-4\">\n              <span>Lines: {code.split('\\n').length}</span>\n              <span>Chars: {code.length}</span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Mobile typing assistance */}\n      <div className=\"block sm:hidden\">\n        <div className=\"text-xs text-gray-500 text-center\">\n          Tip: Tap and hold for selection, double-tap for word selection\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5339},"client/src/components/ui/DecryptedText.tsx":{"content":"import { motion, HTMLMotionProps } from 'framer-motion'\nimport { useState, useEffect, useRef } from 'react'\n\nconst styles = {\n    wrapper: {\n        display: 'inline-block',\n        whiteSpace: 'pre-wrap',\n    },\n    srOnly: {\n        position: 'absolute' as 'absolute',\n        width: '1px',\n        height: '1px',\n        padding: 0,\n        margin: '-1px',\n        overflow: 'hidden',\n        clip: 'rect(0,0,0,0)',\n        border: 0,\n    },\n}\n\ninterface DecryptedTextProps extends HTMLMotionProps<'span'> {\n    text: string\n    speed?: number\n    maxIterations?: number\n    sequential?: boolean\n    revealDirection?: 'start' | 'end' | 'center'\n    useOriginalCharsOnly?: boolean\n    characters?: string\n    className?: string\n    parentClassName?: string\n    encryptedClassName?: string\n    animateOn?: 'view' | 'hover'\n}\n\nexport default function DecryptedText({\n    text,\n    speed = 50,\n    maxIterations = 10,\n    sequential = false,\n    revealDirection = 'start',\n    useOriginalCharsOnly = false,\n    characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!@#$%^&*()_+',\n    className = '',\n    parentClassName = '',\n    encryptedClassName = '',\n    animateOn = 'hover',\n    ...props\n}: DecryptedTextProps) {\n    const [displayText, setDisplayText] = useState<string>(text)\n    const [isHovering, setIsHovering] = useState<boolean>(false)\n    const [isScrambling, setIsScrambling] = useState<boolean>(false)\n    const [revealedIndices, setRevealedIndices] = useState<Set<number>>(new Set())\n    const [hasAnimated, setHasAnimated] = useState<boolean>(false)\n    const containerRef = useRef<HTMLSpanElement>(null)\n\n    useEffect(() => {\n        let interval: NodeJS.Timeout;\n        let currentIteration = 0\n\n        const getNextIndex = (revealedSet: Set<number>): number => {\n            const textLength = text.length\n            switch (revealDirection) {\n                case 'start':\n                    return revealedSet.size\n                case 'end':\n                    return textLength - 1 - revealedSet.size\n                case 'center': {\n                    const middle = Math.floor(textLength / 2)\n                    const offset = Math.floor(revealedSet.size / 2)\n                    const nextIndex =\n                        revealedSet.size % 2 === 0\n                            ? middle + offset\n                            : middle - offset - 1\n\n                    if (nextIndex >= 0 && nextIndex < textLength && !revealedSet.has(nextIndex)) {\n                        return nextIndex\n                    }\n\n                    for (let i = 0; i < textLength; i++) {\n                        if (!revealedSet.has(i)) return i\n                    }\n                    return 0\n                }\n                default:\n                    return revealedSet.size\n            }\n        }\n\n        const availableChars = useOriginalCharsOnly\n            ? Array.from(new Set(text.split(''))).filter((char) => char !== ' ')\n            : characters.split('')\n\n        const shuffleText = (originalText: string, currentRevealed: Set<number>): string => {\n            if (useOriginalCharsOnly) {\n                const positions = originalText.split('').map((char, i) => ({\n                    char,\n                    isSpace: char === ' ',\n                    index: i,\n                    isRevealed: currentRevealed.has(i),\n                }))\n\n                const nonSpaceChars = positions\n                    .filter((p) => !p.isSpace && !p.isRevealed)\n                    .map((p) => p.char)\n\n                for (let i = nonSpaceChars.length - 1; i > 0; i--) {\n                    const j = Math.floor(Math.random() * (i + 1))\n                    ;[nonSpaceChars[i], nonSpaceChars[j]] = [nonSpaceChars[j], nonSpaceChars[i]]\n                }\n\n                let charIndex = 0\n                return positions\n                    .map((p) => {\n                        if (p.isSpace) return ' '\n                        if (p.isRevealed) return originalText[p.index]\n                        return nonSpaceChars[charIndex++]\n                    })\n                    .join('')\n            } else {\n                return originalText\n                    .split('')\n                    .map((char, i) => {\n                        if (char === ' ') return ' '\n                        if (currentRevealed.has(i)) return originalText[i]\n                        return availableChars[Math.floor(Math.random() * availableChars.length)]\n                    })\n                    .join('')\n            }\n        }\n\n        if (isHovering) {\n            setIsScrambling(true)\n            interval = setInterval(() => {\n                setRevealedIndices((prevRevealed) => {\n                    if (sequential) {\n                        if (prevRevealed.size < text.length) {\n                            const nextIndex = getNextIndex(prevRevealed)\n                            const newRevealed = new Set(prevRevealed)\n                            newRevealed.add(nextIndex)\n                            setDisplayText(shuffleText(text, newRevealed))\n                            return newRevealed\n                        } else {\n                            clearInterval(interval)\n                            setIsScrambling(false)\n                            return prevRevealed\n                        }\n                    } else {\n                        setDisplayText(shuffleText(text, prevRevealed))\n                        currentIteration++\n                        if (currentIteration >= maxIterations) {\n                            clearInterval(interval)\n                            setIsScrambling(false)\n                            setDisplayText(text)\n                        }\n                        return prevRevealed\n                    }\n                })\n            }, speed)\n        } else {\n            setDisplayText(text)\n            setRevealedIndices(new Set())\n            setIsScrambling(false)\n        }\n\n        return () => {\n            if (interval) clearInterval(interval)\n        }\n    }, [\n        isHovering,\n        text,\n        speed,\n        maxIterations,\n        sequential,\n        revealDirection,\n        characters,\n        useOriginalCharsOnly,\n    ])\n\n    useEffect(() => {\n        if (animateOn !== 'view') return\n\n        const observerCallback = (entries: IntersectionObserverEntry[]) => {\n            entries.forEach((entry) => {\n                if (entry.isIntersecting && !hasAnimated) {\n                    setIsHovering(true)\n                    setHasAnimated(true)\n                }\n            })\n        }\n\n        const observerOptions = {\n            root: null,\n            rootMargin: '0px',\n            threshold: 0.1,\n        }\n\n        const observer = new IntersectionObserver(observerCallback, observerOptions)\n        const currentRef = containerRef.current\n        if (currentRef) {\n            observer.observe(currentRef)\n        }\n\n        return () => {\n            if (currentRef) {\n                observer.unobserve(currentRef)\n            }\n        }\n    }, [animateOn, hasAnimated])\n\n    const hoverProps =\n        animateOn === 'hover'\n            ? {\n                onMouseEnter: () => setIsHovering(true),\n                onMouseLeave: () => setIsHovering(false),\n            }\n            : {}\n\n    return (\n        <motion.span className={parentClassName} ref={containerRef} style={styles.wrapper} {...hoverProps} {...props}>\n            <span style={styles.srOnly}>{displayText}</span>\n\n            <span aria-hidden=\"true\">\n                {displayText.split('').map((char, index) => {\n                    const isRevealedOrDone =\n                        revealedIndices.has(index) || !isScrambling || !isHovering\n\n                    return (\n                        <span\n                            key={index}\n                            className={isRevealedOrDone ? className : encryptedClassName}\n                        >\n                            {char}\n                        </span>\n                    )\n                })}\n            </span>\n        </motion.span>\n    )\n}","size_bytes":8123},"client/src/components/ui/EnhancedConsole.tsx":{"content":"import { TechCard } from \"./TechCard\";\n\ninterface EnhancedConsoleProps {\n  output: string[];\n  title?: string;\n  height?: string;\n  isLive?: boolean;\n}\n\nexport function EnhancedConsole({ \n  output, \n  title = \"SYSTEM OUTPUT\", \n  height = \"h-72\",\n  isLive = true \n}: EnhancedConsoleProps) {\n  return (\n    <TechCard variant=\"neutral\" className=\"h-fit\">\n      <div className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <h3 className=\"font-space-gothic text-sm text-gray-300 uppercase tracking-wider\">{title}</h3>\n          {isLive && (\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 rounded-full bg-tech-cyan-400 animate-pulse\"></div>\n              <span className=\"font-code text-xs text-gray-500\">LIVE</span>\n            </div>\n          )}\n        </div>\n        <div className={`bg-black/60 rounded-lg p-4 font-code text-sm ${height} overflow-y-auto border border-tech-cyan-600/50 backdrop-blur-sm`}>\n          <div className=\"mb-2 text-tech-cyan-400 text-xs opacity-75\">\n            === BLOCKCHAIN DEVELOPMENT CONSOLE ===\n          </div>\n          {output.map((line, index) => (\n            <div \n              key={index} \n              className={`mb-1 leading-relaxed ${\n                line.startsWith('$') || line.startsWith('>')\n                  ? 'text-tech-cyan-400 font-semibold' \n                  : line.includes('Error') || line.includes('error') || line.includes('ERROR')\n                  ? 'text-red-400 bg-red-400/10 px-2 py-1 rounded border-l-2 border-red-400' \n                  : line.includes('Success') || line.includes('✓') || line.includes('OK')\n                  ? 'text-green-400 bg-green-400/10 px-2 py-1 rounded border-l-2 border-green-400'\n                  : line.includes('Warning') || line.includes('⚠') || line.includes('WARN')\n                  ? 'text-yellow-400 bg-yellow-400/10 px-2 py-1 rounded border-l-2 border-yellow-400'\n                  : line.includes('Info') || line.includes('INFO')\n                  ? 'text-blue-400 bg-blue-400/10 px-2 py-1 rounded border-l-2 border-blue-400'\n                  : 'text-gray-300'\n              }`}\n            >\n              <span className=\"text-gray-500 text-xs mr-2 select-none\">{String(index + 1).padStart(3, '0')}</span>\n              {line}\n            </div>\n          ))}\n          {output.length === 0 && (\n            <div className=\"text-gray-500 italic text-center py-8\">\n              <div className=\"text-tech-cyan-400/50 mb-2\">⚡</div>\n              Console ready for output...\n            </div>\n          )}\n        </div>\n      </div>\n    </TechCard>\n  );\n}","size_bytes":2654},"client/src/components/ui/GlobalLoader.tsx":{"content":"import LetterGlitch from './LetterGlitch';\n\ninterface GlobalLoaderProps {\n  show: boolean;\n}\n\nexport function GlobalLoader({ show }: GlobalLoaderProps) {\n  if (!show) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50\" style={{ backgroundColor: 'rgba(0, 0, 0, 0.7)' }}>\n      <LetterGlitch\n        glitchColors={[\"#34d399\", \"#06b6d4\", \"#8b5cf6\"]} // Tech cyan, purple colors\n        glitchSpeed={30}\n        centerVignette={false}\n        outerVignette={true}\n        smooth={true}\n      />\n    </div>\n  );\n}","size_bytes":521},"client/src/components/ui/LetterGlitch.tsx":{"content":"import { useRef, useEffect } from 'react';\n\nconst LetterGlitch = ({\n  glitchColors = [\"#2b4539\", \"#61dca3\", \"#61b3dc\"],\n  glitchSpeed = 50,\n  centerVignette = false,\n  outerVignette = true,\n  smooth = true,\n}: {\n  glitchColors?: string[];\n  glitchSpeed?: number;\n  centerVignette?: boolean;\n  outerVignette?: boolean;\n  smooth?: boolean;\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement | null>(null);\n  const animationRef = useRef<number | null>(null);\n  const letters = useRef<\n    {\n      char: string;\n      color: string;\n      targetColor: string;\n      colorProgress: number;\n    }[]\n  >([]);\n  const grid = useRef({ columns: 0, rows: 0 });\n  const context = useRef<CanvasRenderingContext2D | null>(null);\n  const lastGlitchTime = useRef(Date.now());\n\n  const fontSize = 16;\n  const charWidth = 10;\n  const charHeight = 20;\n\n  const lettersAndSymbols = [\n    \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\",\n    \"!\", \"@\", \"#\", \"$\", \"&\", \"*\", \"(\", \")\", \"-\", \"_\", \"+\", \"=\", \"/\", \"[\", \"]\", \"{\", \"}\", \";\", \":\", \"<\", \">\", \",\",\n    \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\",\n  ];\n\n  const getRandomChar = () => {\n    return lettersAndSymbols[\n      Math.floor(Math.random() * lettersAndSymbols.length)\n    ];\n  };\n\n  const getRandomColor = () => {\n    return glitchColors[Math.floor(Math.random() * glitchColors.length)];\n  };\n\n  const hexToRgb = (hex: string) => {\n    const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, (m, r, g, b) => {\n      return r + r + g + g + b + b;\n    });\n\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n      ? {\n          r: parseInt(result[1], 16),\n          g: parseInt(result[2], 16),\n          b: parseInt(result[3], 16),\n        }\n      : null;\n  };\n\n  const interpolateColor = (\n    start: { r: number; g: number; b: number },\n    end: { r: number; g: number; b: number },\n    factor: number\n  ) => {\n    const result = {\n      r: Math.round(start.r + (end.r - start.r) * factor),\n      g: Math.round(start.g + (end.g - start.g) * factor),\n      b: Math.round(start.b + (end.b - start.b) * factor),\n    };\n    return `rgb(${result.r}, ${result.g}, ${result.b})`;\n  };\n\n  const calculateGrid = (width: number, height: number) => {\n    const columns = Math.ceil(width / charWidth);\n    const rows = Math.ceil(height / charHeight);\n    return { columns, rows };\n  };\n\n  const initializeLetters = (columns: number, rows: number) => {\n    grid.current = { columns, rows };\n    const totalLetters = columns * rows;\n    letters.current = Array.from({ length: totalLetters }, () => ({\n      char: getRandomChar(),\n      color: getRandomColor(),\n      targetColor: getRandomColor(),\n      colorProgress: 1,\n    }));\n  };\n\n  const resizeCanvas = () => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    const parent = canvas.parentElement;\n    if (!parent) return;\n\n    const dpr = window.devicePixelRatio || 1;\n    const rect = parent.getBoundingClientRect();\n\n    canvas.width = rect.width * dpr;\n    canvas.height = rect.height * dpr;\n\n    canvas.style.width = `${rect.width}px`;\n    canvas.style.height = `${rect.height}px`;\n\n    if (context.current) {\n      context.current.setTransform(dpr, 0, 0, dpr, 0, 0);\n    }\n\n    const { columns, rows } = calculateGrid(rect.width, rect.height);\n    initializeLetters(columns, rows);\n    drawLetters();\n  };\n\n  const drawLetters = () => {\n    if (!context.current || letters.current.length === 0) return;\n    const ctx = context.current;\n    const { width, height } = canvasRef.current!.getBoundingClientRect();\n    ctx.clearRect(0, 0, width, height);\n    ctx.font = `${fontSize}px monospace`;\n    ctx.textBaseline = \"top\";\n\n    letters.current.forEach((letter, index) => {\n      const x = (index % grid.current.columns) * charWidth;\n      const y = Math.floor(index / grid.current.columns) * charHeight;\n      ctx.fillStyle = letter.color;\n      ctx.fillText(letter.char, x, y);\n    });\n  };\n\n  const updateLetters = () => {\n    if (!letters.current || letters.current.length === 0) return;\n\n    const updateCount = Math.max(1, Math.floor(letters.current.length * 0.05));\n\n    for (let i = 0; i < updateCount; i++) {\n      const index = Math.floor(Math.random() * letters.current.length);\n      if (!letters.current[index]) continue;\n\n      letters.current[index].char = getRandomChar();\n      letters.current[index].targetColor = getRandomColor();\n\n      if (!smooth) {\n        letters.current[index].color = letters.current[index].targetColor;\n        letters.current[index].colorProgress = 1;\n      } else {\n        letters.current[index].colorProgress = 0;\n      }\n    }\n  };\n\n  const handleSmoothTransitions = () => {\n    let needsRedraw = false;\n    letters.current.forEach((letter) => {\n      if (letter.colorProgress < 1) {\n        letter.colorProgress += 0.05;\n        if (letter.colorProgress > 1) letter.colorProgress = 1;\n\n        const startRgb = hexToRgb(letter.color);\n        const endRgb = hexToRgb(letter.targetColor);\n        if (startRgb && endRgb) {\n          letter.color = interpolateColor(\n            startRgb,\n            endRgb,\n            letter.colorProgress\n          );\n          needsRedraw = true;\n        }\n      }\n    });\n\n    if (needsRedraw) {\n      drawLetters();\n    }\n  };\n\n  const animate = () => {\n    const now = Date.now();\n    if (now - lastGlitchTime.current >= glitchSpeed) {\n      updateLetters();\n      drawLetters();\n      lastGlitchTime.current = now;\n    }\n\n    if (smooth) {\n      handleSmoothTransitions();\n    }\n\n    animationRef.current = requestAnimationFrame(animate);\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    context.current = canvas.getContext(\"2d\");\n    resizeCanvas();\n    animate();\n\n    let resizeTimeout: NodeJS.Timeout;\n\n    const handleResize = () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = setTimeout(() => {\n        cancelAnimationFrame(animationRef.current as number);\n        resizeCanvas();\n        animate();\n      }, 100);\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n\n    return () => {\n      cancelAnimationFrame(animationRef.current!);\n      window.removeEventListener(\"resize\", handleResize);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [glitchSpeed, smooth]);\n\n  const containerStyle = {\n    position: \"relative\",\n    width: \"100%\",\n    height: \"100%\",\n    backgroundColor: \"#000000\",\n    overflow: \"hidden\",\n  };\n\n  const canvasStyle = {\n    display: \"block\",\n    width: \"100%\",\n    height: \"100%\",\n  };\n\n  const outerVignetteStyle = {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    pointerEvents: \"none\",\n    background:\n      \"radial-gradient(circle, rgba(0,0,0,0) 60%, rgba(0,0,0,1) 100%)\",\n  };\n\n  const centerVignetteStyle = {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    width: \"100%\",\n    height: \"100%\",\n    pointerEvents: \"none\",\n    background:\n      \"radial-gradient(circle, rgba(0,0,0,0.8) 0%, rgba(0,0,0,0) 60%)\",\n  };\n\n  return (\n    <div style={containerStyle as React.CSSProperties}>\n      <canvas ref={canvasRef} style={canvasStyle} />\n      {outerVignette && (\n        <div style={outerVignetteStyle as React.CSSProperties}></div>\n      )}\n      {centerVignette && (\n        <div style={centerVignetteStyle as React.CSSProperties}></div>\n      )}\n    </div>\n  );\n};\n\nexport default LetterGlitch;","size_bytes":7541},"client/src/components/ui/TechButton.tsx":{"content":"import { ButtonHTMLAttributes, forwardRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface TechButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: \"primary\" | \"secondary\" | \"accent\" | \"danger\";\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nconst TechButton = forwardRef<HTMLButtonElement, TechButtonProps>(\n  ({ className, variant = \"primary\", size = \"md\", ...props }, ref) => {\n    const baseClasses = \"touch-target inline-flex items-center justify-center font-mono uppercase tracking-wider transition-all duration-200 relative overflow-hidden border-2 disabled:opacity-50 disabled:cursor-not-allowed active:scale-95\";\n    \n    const variants = {\n      primary: \"bg-cyan-500 hover:bg-cyan-400 border-cyan-400 text-black font-bold hover:shadow-lg hover:shadow-cyan-400/25\",\n      secondary: \"bg-gray-800 hover:bg-gray-700 border-gray-600 text-cyan-400 hover:shadow-lg hover:shadow-gray-700/25\",\n      accent: \"bg-purple-600 hover:bg-purple-500 border-purple-400 text-white hover:shadow-lg hover:shadow-purple-500/25\",\n      danger: \"bg-red-600 hover:bg-red-500 border-red-400 text-white hover:shadow-lg hover:shadow-red-500/25\"\n    };\n\n    const sizes = {\n      sm: \"px-3 py-2 text-mobile-sm rounded-md min-h-10\",\n      md: \"px-4 py-3 text-mobile-base rounded-lg min-h-11\", \n      lg: \"px-6 py-4 text-mobile-lg rounded-xl min-h-12\"\n    };\n\n    return (\n      <button\n        className={cn(\n          baseClasses,\n          variants[variant],\n          sizes[size],\n          className\n        )}\n        ref={ref}\n        {...props}\n      >\n        <span className=\"relative z-10\">{props.children}</span>\n        {/* Hover effect overlay */}\n        <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent transform -translate-x-full hover:translate-x-full transition-transform duration-700\" />\n      </button>\n    );\n  }\n);\n\nTechButton.displayName = \"TechButton\";\n\nexport { TechButton };","size_bytes":1947},"client/src/components/ui/TechCard.tsx":{"content":"import { HTMLAttributes, forwardRef } from \"react\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\n\nconst techCardVariants = cva(\n  \"card-mobile-compact sm:card-mobile shadow-xl backdrop-blur-sm transition-all duration-200 hover:shadow-2xl\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-gray-900/50 border-2 border-cyan-400/30\",\n        purple: \"bg-gray-900/50 border-2 border-purple-400/30\",\n        cyan: \"bg-gray-900/50 border-2 border-cyan-400/30\",\n        pink: \"bg-gray-900/50 border-2 border-purple-400/30\",\n        neutral: \"bg-gray-900/50 border-2 border-gray-600/30\",\n      },\n      glow: {\n        none: \"\",\n        purple: \"shadow-2xl shadow-purple-500/20\",\n        cyan: \"shadow-2xl shadow-cyan-500/20\",\n        pink: \"shadow-2xl shadow-purple-500/20\",\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      glow: \"none\",\n    },\n  }\n);\n\nexport interface TechCardProps\n  extends HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof techCardVariants> {}\n\nconst TechCard = forwardRef<HTMLDivElement, TechCardProps>(\n  ({ className, variant, glow, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(techCardVariants({ variant, glow, className }))}\n        {...props}\n      />\n    );\n  }\n);\nTechCard.displayName = \"TechCard\";\n\nexport { TechCard, techCardVariants };","size_bytes":1393},"client/src/components/ui/TypewriterText.tsx":{"content":"import { useState, useEffect } from 'react';\n\ninterface TypewriterTextProps {\n  text: string;\n  speed?: number;\n  delay?: number;\n  className?: string;\n}\n\nexport function TypewriterText({ text, speed = 50, delay = 0, className = '' }: TypewriterTextProps) {\n  const [displayText, setDisplayText] = useState('');\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isTyping, setIsTyping] = useState(false);\n\n  useEffect(() => {\n    const startTyping = setTimeout(() => {\n      setIsTyping(true);\n    }, delay);\n\n    return () => clearTimeout(startTyping);\n  }, [delay]);\n\n  useEffect(() => {\n    if (!isTyping) return;\n\n    if (currentIndex < text.length) {\n      const timeout = setTimeout(() => {\n        setDisplayText(prev => prev + text[currentIndex]);\n        setCurrentIndex(prev => prev + 1);\n      }, speed);\n\n      return () => clearTimeout(timeout);\n    }\n  }, [currentIndex, text, speed, isTyping]);\n\n  return (\n    <span className=\"text-[#34dce9]\">\n      {displayText}\n      {currentIndex < text.length && (\n        <span className=\"animate-pulse\">|</span>\n      )}\n    </span>\n  );\n}","size_bytes":1108},"client/src/components/ui/WesternButton.tsx":{"content":"import { ButtonHTMLAttributes, forwardRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nconst westernButtonVariants = cva(\n  \"inline-flex items-center justify-center font-deputy font-semibold rounded-lg transition-all duration-200 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 transform\",\n  {\n    variants: {\n      variant: {\n        primary: \"bg-gradient-to-r from-desert-500 to-sunset-500 text-white border-2 border-desert-600 hover:scale-105 hover:shadow-xl shadow-lg\",\n        secondary: \"bg-gradient-to-r from-sage-500 to-sage-600 text-white border-2 border-sage-700 hover:scale-105 hover:shadow-xl shadow-lg\",\n        tertiary: \"bg-gradient-to-r from-rust-500 to-rust-600 text-white border-2 border-rust-700 hover:scale-105 hover:shadow-xl shadow-lg\",\n        ghost: \"bg-transparent border-2 border-desert-600 text-desert-400 hover:bg-desert-600/20 hover:text-desert-300\",\n        outline: \"bg-transparent border-2 border-current hover:bg-current hover:text-background\"\n      },\n      size: {\n        sm: \"px-3 py-2 text-sm\",\n        default: \"px-6 py-3 text-base\",\n        lg: \"px-8 py-4 text-lg\",\n        icon: \"h-10 w-10\"\n      },\n      glow: {\n        true: \"animate-glow-pulse\",\n        false: \"\"\n      }\n    },\n    defaultVariants: {\n      variant: \"primary\",\n      size: \"default\",\n      glow: false\n    }\n  }\n);\n\nexport interface WesternButtonProps\n  extends ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof westernButtonVariants> {}\n\nconst WesternButton = forwardRef<HTMLButtonElement, WesternButtonProps>(\n  ({ className, variant, size, glow, ...props }, ref) => {\n    return (\n      <button\n        className={cn(westernButtonVariants({ variant, size, glow, className }))}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\n\nWesternButton.displayName = \"WesternButton\";\n\nexport { WesternButton, westernButtonVariants };\n","size_bytes":2037},"client/src/components/ui/WesternCard.tsx":{"content":"import { HTMLAttributes, forwardRef } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nconst westernCardVariants = cva(\n  \"rounded-lg shadow-xl backdrop-blur-sm border-2 transition-all duration-200\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-gradient-to-br from-leather-900/90 to-leather-800/90 border-desert-600\",\n        leather: \"bg-gradient-to-br from-leather-800/90 to-leather-700/90 border-leather-600\",\n        gold: \"bg-gradient-to-br from-sunset-900/90 to-sunset-800/90 border-sunset-600\",\n        mystical: \"bg-gradient-to-br from-mystic-900/90 to-mystic-800/90 border-mystic-600\"\n      },\n      glow: {\n        true: \"animate-glow-pulse\",\n        false: \"\"\n      }\n    },\n    defaultVariants: {\n      variant: \"default\",\n      glow: false\n    }\n  }\n);\n\nexport interface WesternCardProps\n  extends HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof westernCardVariants> {}\n\nconst WesternCard = forwardRef<HTMLDivElement, WesternCardProps>(\n  ({ className, variant, glow, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(westernCardVariants({ variant, glow, className }))}\n        {...props}\n      />\n    );\n  }\n);\n\nWesternCard.displayName = \"WesternCard\";\n\nconst WesternCardHeader = forwardRef<\n  HTMLDivElement,\n  HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\n\nWesternCardHeader.displayName = \"WesternCardHeader\";\n\nconst WesternCardTitle = forwardRef<\n  HTMLParagraphElement,\n  HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\"font-western text-2xl leading-none tracking-tight text-desert-400\", className)}\n    {...props}\n  />\n));\n\nWesternCardTitle.displayName = \"WesternCardTitle\";\n\nconst WesternCardDescription = forwardRef<\n  HTMLParagraphElement,\n  HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground font-mono\", className)}\n    {...props}\n  />\n));\n\nWesternCardDescription.displayName = \"WesternCardDescription\";\n\nconst WesternCardContent = forwardRef<\n  HTMLDivElement,\n  HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n));\n\nWesternCardContent.displayName = \"WesternCardContent\";\n\nconst WesternCardFooter = forwardRef<\n  HTMLDivElement,\n  HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n));\n\nWesternCardFooter.displayName = \"WesternCardFooter\";\n\nexport {\n  WesternCard,\n  WesternCardHeader,\n  WesternCardFooter,\n  WesternCardTitle,\n  WesternCardDescription,\n  WesternCardContent,\n};\n","size_bytes":2921},"client/src/components/ui/WesternModal.tsx":{"content":"import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { cn } from \"@/lib/utils\";\nimport { HTMLAttributes } from \"react\";\n\ninterface WesternModalProps extends HTMLAttributes<HTMLDivElement> {\n  trigger?: React.ReactNode;\n  title?: string;\n  description?: string;\n  children: React.ReactNode;\n}\n\nexport function WesternModal({ \n  trigger, \n  title, \n  description, \n  children, \n  className,\n  ...props \n}: WesternModalProps) {\n  return (\n    <Dialog>\n      {trigger && <DialogTrigger asChild>{trigger}</DialogTrigger>}\n      <DialogContent \n        className={cn(\n          \"bg-gradient-to-br from-leather-900 to-leather-800 border-2 border-desert-600 shadow-2xl\",\n          \"max-w-2xl\",\n          className\n        )}\n        {...props}\n      >\n        {(title || description) && (\n          <DialogHeader>\n            {title && (\n              <DialogTitle className=\"font-western text-2xl text-desert-400\">\n                {title}\n              </DialogTitle>\n            )}\n            {description && (\n              <DialogDescription className=\"font-mono text-gray-300\">\n                {description}\n              </DialogDescription>\n            )}\n          </DialogHeader>\n        )}\n        <div className=\"font-mono text-gray-100\">\n          {children}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":1402},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }","size_bytes":708},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-gray-800\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-gradient-to-r from-cyan-500 to-purple-500 transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }","size_bytes":808},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":770},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/wallet/WalletButton.tsx":{"content":"import { useWallet } from \"@/hooks/use-wallet\";\nimport { formatWalletAddress, cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function WalletButton() {\n  const { connected, address, connecting, connect, disconnect, walletInstalled } = useWallet();\n  const { toast } = useToast();\n\n  const handleClick = async () => {\n    if (connected) {\n      disconnect();\n      toast({\n        title: \"Wallet Disconnected\",\n        description: \"Your wallet has been disconnected from Shadow Ranch\",\n      });\n    } else {\n      if (!walletInstalled) {\n        toast({\n          title: \"No Wallet Found\",\n          description: \"Please install Phantom wallet to connect to Shadow Ranch\",\n          variant: \"destructive\",\n        });\n        window.open('https://phantom.app/', '_blank');\n        return;\n      }\n      \n      try {\n        await connect();\n        toast({\n          title: \"Wallet Connected\",\n          description: \"Welcome to Shadow Ranch, partner!\",\n        });\n      } catch (error: any) {\n        toast({\n          title: \"Connection Failed\",\n          description: error.message || \"Failed to connect wallet. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  return (\n    <button\n      onClick={handleClick}\n      disabled={connecting}\n      className={cn(\n        \"btn-mobile rounded-lg font-mono text-mobile-sm sm:text-mobile-base transition-all duration-200 border-2\",\n        connected \n          ? \"bg-cyan-500 hover:bg-cyan-400 border-cyan-400 text-black font-bold\" \n          : \"bg-gray-800 hover:bg-gray-700 border-gray-600 text-cyan-400\",\n        connecting && \"opacity-75 cursor-not-allowed\",\n        \"shadow-lg hover:shadow-xl active:scale-95\"\n      )}\n    >\n      <div className=\"flex items-center space-x-2\">\n        {connecting ? (\n          <>\n            <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n            <span className=\"hidden sm:inline\">Connecting...</span>\n            <span className=\"sm:hidden\">...</span>\n          </>\n        ) : connected ? (\n          <>\n            <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n            </svg>\n            <span className=\"font-mono text-xs sm:text-sm\">\n              {formatWalletAddress(address)}\n            </span>\n          </>\n        ) : (\n          <>\n            <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2H4zm1 10v-1a1 1 0 011-1h8a1 1 0 011 1v1H5zm10-4V6H5v4h10z\" clipRule=\"evenodd\" />\n            </svg>\n            <span className=\"hidden sm:inline\">Connect Wallet</span>\n            <span className=\"sm:hidden\">Connect</span>\n          </>\n        )}\n      </div>\n    </button>\n  );\n}\n","size_bytes":3025},"client/src/components/wallet/WalletConnectButton.tsx":{"content":"import { useState } from 'react';\nimport { useWalletContext } from './WalletProvider';\nimport { TechButton } from '@/components/ui/TechButton';\nimport { TechCard } from '@/components/ui/TechCard';\nimport { useToast } from '@/hooks/use-toast';\n\ninterface WalletOption {\n  name: string;\n  icon: string;\n  adapter: string;\n}\n\nconst availableWallets: WalletOption[] = [\n  { name: 'Phantom', icon: '👻', adapter: 'phantom' },\n  { name: 'Solflare', icon: '🔥', adapter: 'solflare' },\n  { name: 'Ledger', icon: '🔒', adapter: 'ledger' },\n];\n\nexport function WalletConnectButton() {\n  const { connected, address, connecting, connect, disconnect } = useWalletContext();\n  const [showWalletModal, setShowWalletModal] = useState(false);\n  const { toast } = useToast();\n\n  const handleConnect = async (walletAdapter: string) => {\n    try {\n      setShowWalletModal(false);\n      await connect();\n      toast({\n        title: \"Wallet Connected\",\n        description: `Successfully connected to ${walletAdapter}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Connection Failed\",\n        description: \"Failed to connect wallet. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDisconnect = () => {\n    disconnect();\n    toast({\n      title: \"Wallet Disconnected\",\n      description: \"Your wallet has been disconnected.\",\n    });\n  };\n\n  const truncateAddress = (addr: string) => {\n    return `${addr.slice(0, 4)}...${addr.slice(-4)}`;\n  };\n\n  if (connected && address) {\n    return (\n      <div className=\"flex items-center space-x-3\">\n        <div className=\"bg-tech-cyan-900/20 border border-tech-cyan-400/50 rounded-lg px-3 py-2\">\n          <span className=\"font-code text-tech-cyan-400 text-sm\">\n            {truncateAddress(address)}\n          </span>\n        </div>\n        <TechButton\n          variant=\"secondary\"\n          size=\"sm\"\n          onClick={handleDisconnect}\n        >\n          Disconnect\n        </TechButton>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <TechButton\n        variant=\"accent\"\n        onClick={() => setShowWalletModal(true)}\n        disabled={connecting}\n        className=\"min-w-[120px]\"\n      >\n        {connecting ? (\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 border-2 border-tech-cyan-400 border-t-transparent rounded-full animate-spin\"></div>\n            <span>Connecting...</span>\n          </div>\n        ) : (\n          'Connect Wallet'\n        )}\n      </TechButton>\n\n      {/* Wallet Selection Modal */}\n      {showWalletModal && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n          <TechCard variant=\"cyan\" className=\"w-full max-w-md\">\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h3 className=\"font-space-gothic text-xl text-tech-cyan-400\">\n                  Connect Wallet\n                </h3>\n                <button\n                  onClick={() => setShowWalletModal(false)}\n                  className=\"text-gray-400 hover:text-white transition-colors text-xl\"\n                >\n                  ×\n                </button>\n              </div>\n\n              <p className=\"text-gray-300 text-sm mb-6\">\n                Choose a wallet to connect to the Shadow Ranch. Your wallet is used to track progress and earn NFT rewards.\n              </p>\n\n              <div className=\"space-y-3\">\n                {availableWallets.map((wallet) => (\n                  <button\n                    key={wallet.adapter}\n                    onClick={() => handleConnect(wallet.adapter)}\n                    className=\"w-full flex items-center space-x-3 p-3 bg-gray-800 hover:bg-gray-700 border border-gray-600 hover:border-tech-cyan-400/50 rounded-lg transition-all duration-200\"\n                  >\n                    <span className=\"text-2xl\">{wallet.icon}</span>\n                    <span className=\"font-tech text-white\">{wallet.name}</span>\n                  </button>\n                ))}\n              </div>\n\n              <p className=\"text-xs text-gray-500 mt-4 text-center\">\n                Don't have a wallet? Visit{' '}\n                <a\n                  href=\"https://phantom.app\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-tech-cyan-400 hover:underline\"\n                >\n                  phantom.app\n                </a>{' '}\n                to get started.\n              </p>\n            </div>\n          </TechCard>\n        </div>\n      )}\n    </>\n  );\n}","size_bytes":4622},"client/src/components/wallet/WalletConnectButtonMobile.tsx":{"content":"import { useState } from 'react';\nimport { useWalletContext } from './WalletProvider';\nimport { useToast } from '@/hooks/use-toast';\nimport { cn } from '@/lib/utils';\n\ninterface WalletOption {\n  name: string;\n  icon: string;\n  adapter: string;\n}\n\nconst availableWallets: WalletOption[] = [\n  { name: 'Phantom', icon: '👻', adapter: 'phantom' },\n  { name: 'Solflare', icon: '🔥', adapter: 'solflare' },\n  { name: 'Ledger', icon: '🔒', adapter: 'ledger' },\n];\n\nexport function WalletConnectButtonMobile() {\n  const { connected, address, connecting, connect, disconnect } = useWalletContext();\n  const [showWalletModal, setShowWalletModal] = useState(false);\n  const { toast } = useToast();\n\n  const handleConnect = async (walletAdapter: string) => {\n    try {\n      setShowWalletModal(false);\n      await connect();\n      toast({\n        title: \"Wallet Connected\",\n        description: `Successfully connected to ${walletAdapter}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Connection Failed\",\n        description: \"Failed to connect wallet. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleDisconnect = () => {\n    disconnect();\n    toast({\n      title: \"Wallet Disconnected\",\n      description: \"Your wallet has been disconnected.\",\n    });\n  };\n\n  const truncateAddress = (addr: string) => {\n    return `${addr.slice(0, 4)}...${addr.slice(-4)}`;\n  };\n\n  if (connected && address) {\n    return (\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"bg-tech-cyan-900/20 border border-tech-cyan-400/50 rounded-lg px-2 py-1 sm:px-3 sm:py-2\">\n          <span className=\"font-mono text-tech-cyan-400 text-xs sm:text-sm\">\n            {truncateAddress(address)}\n          </span>\n        </div>\n        <button\n          onClick={handleDisconnect}\n          className=\"btn-mobile-sm bg-tech-purple-600 hover:bg-tech-purple-500 text-white border border-tech-purple-500\"\n        >\n          Disconnect\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <button\n        onClick={() => setShowWalletModal(true)}\n        disabled={connecting}\n        className={cn(\n          \"btn-mobile bg-gradient-to-r from-tech-purple-600 to-tech-purple-700 text-white border-2 border-tech-purple-500\",\n          connecting && \"opacity-75 cursor-not-allowed\"\n        )}\n      >\n        {connecting ? (\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n            <span className=\"hidden sm:inline\">Connecting...</span>\n            <span className=\"sm:hidden\">...</span>\n          </div>\n        ) : (\n          <div className=\"flex items-center space-x-2\">\n            <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M4 4a2 2 0 00-2 2v8a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2H4zm1 10v-1a1 1 0 011-1h8a1 1 0 011 1v1H5zm10-4V6H5v4h10z\" clipRule=\"evenodd\" />\n            </svg>\n            <span className=\"hidden sm:inline\">Connect</span>\n            <span className=\"sm:hidden\">Connect</span>\n          </div>\n        )}\n      </button>\n\n      {/* Mobile-optimized wallet selection modal */}\n      {showWalletModal && (\n        <>\n          <div \n            className=\"fixed inset-0 bg-black/50 z-50\" \n            onClick={() => setShowWalletModal(false)}\n          />\n          <div className=\"fixed inset-x-4 bottom-4 sm:inset-x-auto sm:left-1/2 sm:transform sm:-translate-x-1/2 sm:bottom-auto sm:top-1/2 sm:-translate-y-1/2 z-50\">\n            <div className=\"bg-gradient-to-b from-tech-purple-900 to-tech-purple-800 border-2 border-tech-cyan-400/50 rounded-xl p-6 max-w-sm mx-auto\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h3 className=\"font-mono text-mobile-xl text-tech-cyan-400\">\n                  Connect Wallet\n                </h3>\n                <button\n                  onClick={() => setShowWalletModal(false)}\n                  className=\"text-gray-400 hover:text-white transition-colors text-2xl w-8 h-8 flex items-center justify-center\"\n                >\n                  ×\n                </button>\n              </div>\n\n              <p className=\"text-gray-300 text-mobile-sm mb-6\">\n                Choose a wallet to connect to Shadow Ranch. Your wallet tracks progress and earns NFT rewards.\n              </p>\n\n              <div className=\"space-y-3\">\n                {availableWallets.map((wallet) => (\n                  <button\n                    key={wallet.adapter}\n                    onClick={() => handleConnect(wallet.adapter)}\n                    className=\"w-full flex items-center space-x-3 p-4 bg-gray-800 hover:bg-gray-700 border border-gray-600 hover:border-tech-cyan-400/50 rounded-lg transition-all duration-200 touch-target\"\n                  >\n                    <span className=\"text-2xl\">{wallet.icon}</span>\n                    <span className=\"font-mono text-white text-mobile-lg\">{wallet.name}</span>\n                  </button>\n                ))}\n              </div>\n\n              <p className=\"text-xs text-gray-500 mt-4 text-center\">\n                Don't have a wallet?{' '}\n                <a\n                  href=\"https://phantom.app\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-tech-cyan-400 hover:underline\"\n                >\n                  Get Phantom\n                </a>\n              </p>\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n}","size_bytes":5609},"client/src/components/wallet/WalletProvider.tsx":{"content":"import { createContext, useContext, ReactNode } from 'react';\nimport { useWallet } from '@/hooks/use-wallet';\n\ninterface WalletContextType {\n  connected: boolean;\n  address: string | null;\n  connecting: boolean;\n  connect: () => Promise<void>;\n  disconnect: () => void;\n}\n\nconst WalletContext = createContext<WalletContextType | undefined>(undefined);\n\nexport function WalletProvider({ children }: { children: ReactNode }) {\n  const wallet = useWallet();\n\n  return (\n    <WalletContext.Provider value={wallet}>\n      {children}\n    </WalletContext.Provider>\n  );\n}\n\nexport function useWalletContext() {\n  const context = useContext(WalletContext);\n  if (context === undefined) {\n    throw new Error('useWalletContext must be used within a WalletProvider');\n  }\n  return context;\n}\n","size_bytes":781},"client/src/components/profile/AchievementGallery.tsx":{"content":"import { Lock, Trophy, Star, Gem, Crown } from \"lucide-react\";\nimport { NFTBadge } from \"@/lib/firebase\";\nimport { cn } from \"@/lib/utils\";\n\ninterface AchievementGalleryProps {\n  badges: NFTBadge[];\n}\n\nexport function AchievementGallery({ badges }: AchievementGalleryProps) {\n  const getRarityIcon = (rarity: NFTBadge['rarity']) => {\n    switch (rarity) {\n      case 'common':\n        return <Star size={16} className=\"text-gray-400\" />;\n      case 'uncommon':\n        return <Star size={16} className=\"text-green-400\" />;\n      case 'rare':\n        return <Gem size={16} className=\"text-blue-400\" />;\n      case 'epic':\n        return <Trophy size={16} className=\"text-purple-400\" />;\n      case 'legendary':\n        return <Crown size={16} className=\"text-yellow-400\" />;\n      default:\n        return <Star size={16} className=\"text-gray-400\" />;\n    }\n  };\n\n  const getRarityBorder = (rarity: NFTBadge['rarity']) => {\n    switch (rarity) {\n      case 'common':\n        return 'border-gray-400/30';\n      case 'uncommon':\n        return 'border-green-400/30';\n      case 'rare':\n        return 'border-blue-400/30';\n      case 'epic':\n        return 'border-purple-400/30';\n      case 'legendary':\n        return 'border-yellow-400/30';\n      default:\n        return 'border-gray-400/30';\n    }\n  };\n\n  const getRarityGlow = (rarity: NFTBadge['rarity']) => {\n    switch (rarity) {\n      case 'common':\n        return 'shadow-gray-400/20';\n      case 'uncommon':\n        return 'shadow-green-400/20';\n      case 'rare':\n        return 'shadow-blue-400/20';\n      case 'epic':\n        return 'shadow-purple-400/20';\n      case 'legendary':\n        return 'shadow-yellow-400/20';\n      default:\n        return 'shadow-gray-400/20';\n    }\n  };\n\n  return (\n    <div className=\"bg-black/40 backdrop-blur-sm border border-cyan-400/20 rounded-xl p-4 sm:p-6\">\n      <div className=\"flex items-center justify-between mb-4 sm:mb-6\">\n        <h2 className=\"font-space-gothic text-xl sm:text-2xl text-cyan-400\">\n          Achievements\n        </h2>\n        <div className=\"text-sm text-gray-400\">\n          {badges.filter(badge => badge.unlocked).length} / {badges.length} Unlocked\n        </div>\n      </div>\n\n      {/* Clean 2x3 Grid Layout */}\n      <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-4 sm:gap-6 max-w-lg mx-auto\">\n        {badges.map((badge) => (\n          <div\n            key={badge.id}\n            className={cn(\n              \"group relative flex flex-col items-center p-4 sm:p-6 rounded-xl border-2 transition-all duration-300 cursor-pointer\",\n              badge.unlocked \n                ? `${getRarityBorder(badge.rarity)} bg-gradient-to-br from-black/60 to-gray-900/60 hover:shadow-lg ${getRarityGlow(badge.rarity)}` \n                : \"border-gray-600/30 bg-gray-900/40\"\n            )}\n            title={badge.description}\n          >\n            {/* Badge Icon */}\n            <div className={cn(\n              \"w-12 h-12 sm:w-16 sm:h-16 mb-3 flex items-center justify-center rounded-xl transition-all duration-300\",\n              badge.unlocked \n                ? \"bg-cyan-400/20 border-2 border-cyan-400/30\" \n                : \"bg-gray-700/40 border-2 border-gray-600/30 opacity-40\"\n            )}>\n              {badge.unlocked ? (\n                getRarityIcon(badge.rarity)\n              ) : (\n                <Lock size={20} className=\"text-gray-400\" />\n              )}\n            </div>\n\n            {/* Badge Name */}\n            <h3 className={cn(\n              \"text-center text-sm sm:text-base font-medium leading-tight\",\n              badge.unlocked ? \"text-white\" : \"text-gray-500 opacity-60\"\n            )}>\n              {badge.name}\n            </h3>\n\n            {/* Hover Tooltip */}\n            <div className=\"absolute bottom-full left-1/2 transform -translate-x-1/2 mb-2 px-3 py-2 bg-black/95 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none z-10 whitespace-nowrap border border-cyan-400/30\">\n              <div className=\"font-medium\">{badge.name}</div>\n              <div className=\"text-gray-300 text-xs mt-1\">{badge.description}</div>\n              {badge.unlocked && badge.unlockedAt && (\n                <div className=\"text-cyan-400 text-xs mt-1\">\n                  Unlocked: {badge.unlockedAt?.toDate ? badge.unlockedAt.toDate().toLocaleDateString() : 'Recently'}\n                </div>\n              )}\n              {/* Tooltip Arrow */}\n              <div className=\"absolute top-full left-1/2 transform -translate-x-1/2 border-4 border-transparent border-t-black/95\"></div>\n            </div>\n\n            {/* Rarity Indicator */}\n            <div className=\"absolute top-2 right-2\">\n              <div className={cn(\n                \"w-3 h-3 rounded-full border\",\n                badge.unlocked ? {\n                  'common': 'bg-gray-400 border-gray-300',\n                  'uncommon': 'bg-green-400 border-green-300',\n                  'rare': 'bg-blue-400 border-blue-300',\n                  'epic': 'bg-purple-400 border-purple-300',\n                  'legendary': 'bg-yellow-400 border-yellow-300'\n                }[badge.rarity] : 'bg-gray-600 border-gray-500 opacity-50'\n              )} />\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Empty State */}\n      {badges.length === 0 && (\n        <div className=\"text-center py-8\">\n          <Trophy size={48} className=\"mx-auto text-gray-600 mb-4\" />\n          <p className=\"text-gray-400\">No achievements yet</p>\n          <p className=\"text-sm text-gray-500 mt-1\">Complete lessons and challenges to earn badges!</p>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":5666},"client/src/components/profile/PerformanceNotice.tsx":{"content":"import { Zap, Info } from \"lucide-react\";\n\nexport function PerformanceNotice() {\n  return (\n    <div className=\"bg-gradient-to-r from-cyan-500/10 to-purple-500/10 border border-cyan-400/30 rounded-xl p-4 mb-6\">\n      <div className=\"flex items-start gap-3\">\n        <div className=\"flex-shrink-0 w-8 h-8 bg-cyan-400/20 rounded-lg flex items-center justify-center\">\n          <Zap size={16} className=\"text-cyan-400\" />\n        </div>\n        <div className=\"flex-1\">\n          <h3 className=\"font-medium text-cyan-400 mb-1\">Server-Side Firebase Architecture</h3>\n          <p className=\"text-sm text-gray-300 leading-relaxed\">\n            Profile system now uses instant local storage with server-side Firebase sync. \n            Data persists instantly locally and syncs to <strong className=\"text-cyan-400\">Firebase Cloud</strong> in background.\n          </p>\n          <div className=\"flex items-center gap-2 mt-2 text-xs text-gray-400\">\n            <Info size={12} />\n            <span>Best of both worlds - instant response + reliable cloud persistence</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1128},"client/src/components/profile/ProfileHeader.tsx":{"content":"import { useState } from \"react\";\nimport { Copy, Edit3, ExternalLink } from \"lucide-react\";\nimport { UserProfile } from \"@/lib/firebase\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ProfileHeaderProps {\n  profile: UserProfile;\n  isOwner: boolean;\n  onEditClick: () => void;\n}\n\nexport function ProfileHeader({ profile, isOwner, onEditClick }: ProfileHeaderProps) {\n  const { toast } = useToast();\n  const [imageError, setImageError] = useState(false);\n\n  const shortenAddress = (address: string) => {\n    return `${address.slice(0, 4)}...${address.slice(-4)}`;\n  };\n\n  const copyToClipboard = async (text: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      toast({\n        title: \"Copied!\",\n        description: \"Wallet address copied to clipboard\",\n      });\n    } catch (err) {\n      toast({\n        title: \"Copy failed\",\n        description: \"Could not copy to clipboard\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const DefaultAvatar = () => (\n    <div className=\"w-full h-full bg-gradient-to-br from-cyan-500 to-purple-600 flex items-center justify-center rounded-lg\">\n      <span className=\"text-2xl sm:text-3xl md:text-4xl font-bold text-white\">\n        {profile.username.charAt(0).toUpperCase()}\n      </span>\n    </div>\n  );\n\n  return (\n    <div className=\"bg-black/40 backdrop-blur-sm border border-cyan-400/20 rounded-xl p-4 sm:p-6 md:p-8\">\n      {/* Mobile Layout: Vertical Stack */}\n      <div className=\"flex flex-col md:flex-row md:items-center gap-4 md:gap-6\">\n        {/* Profile Picture */}\n        <div className=\"flex justify-center md:justify-start\">\n          <div className=\"w-24 h-24 sm:w-28 sm:h-28 md:w-32 md:h-32 lg:w-36 lg:h-36 rounded-lg overflow-hidden border-2 border-cyan-400/30 hover:border-cyan-400/60 transition-colors\">\n            {profile.profileImageUrl && !imageError ? (\n              <img\n                src={profile.profileImageUrl}\n                alt={`${profile.username}'s profile`}\n                className=\"w-full h-full object-cover\"\n                onError={() => setImageError(true)}\n              />\n            ) : (\n              <DefaultAvatar />\n            )}\n          </div>\n        </div>\n\n        {/* Profile Info */}\n        <div className=\"flex-1 text-center md:text-left\">\n          {/* Username */}\n          <h1 className=\"font-space-gothic text-2xl sm:text-3xl md:text-4xl text-cyan-400 mb-2 break-words\">\n            {profile.username}\n          </h1>\n\n          {/* Bio */}\n          {profile.bio && (\n            <p className=\"text-gray-300 text-sm sm:text-base mb-3 max-w-md\">\n              {profile.bio}\n            </p>\n          )}\n\n          {/* Wallet Address */}\n          <div className=\"flex flex-col sm:flex-row items-center justify-center md:justify-start gap-2 mb-3\">\n            <span className=\"font-mono text-sm sm:text-base text-gray-300\">\n              {shortenAddress(profile.publicKey)}\n            </span>\n            <div className=\"flex gap-2\">\n              <button\n                onClick={() => copyToClipboard(profile.publicKey)}\n                className=\"p-1.5 text-gray-400 hover:text-cyan-400 transition-colors\"\n                aria-label=\"Copy wallet address\"\n              >\n                <Copy size={16} />\n              </button>\n              <a\n                href={`https://explorer.solana.com/address/${profile.publicKey}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"p-1.5 text-gray-400 hover:text-cyan-400 transition-colors\"\n                aria-label=\"View on Solana Explorer\"\n              >\n                <ExternalLink size={16} />\n              </a>\n            </div>\n          </div>\n\n          {/* Bio */}\n          {profile.bio && (\n            <p className=\"text-gray-300 text-sm sm:text-base leading-relaxed mb-4 max-w-md mx-auto md:mx-0\">\n              {profile.bio}\n            </p>\n          )}\n\n          {/* Edit Button - Only for profile owner */}\n          {isOwner && (\n            <Button\n              onClick={onEditClick}\n              variant=\"outline\"\n              className=\"w-full sm:w-auto bg-transparent border-cyan-400/30 text-cyan-400 hover:bg-cyan-400/10 hover:border-cyan-400/50\"\n            >\n              <Edit3 size={16} className=\"mr-2\" />\n              Edit Profile\n            </Button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4462},"client/src/components/profile/SpeedTestButton.tsx":{"content":"import { useState } from \"react\";\nimport { Zap, Timer } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { FastProfile } from \"@/lib/local-storage\";\nimport { useWallet } from \"@/hooks/use-wallet\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function SpeedTestButton() {\n  const { address: connectedAddress, connected } = useWallet();\n  const { toast } = useToast();\n  const [testing, setTesting] = useState(false);\n\n  const runSpeedTest = async () => {\n    if (!connectedAddress || !connected) {\n      toast({\n        title: \"No Wallet Connected\",\n        description: \"Connect your wallet first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setTesting(true);\n    const startTime = performance.now();\n\n    try {\n      // Test instant local storage with background sync architecture\n      await FastProfile.unlockBadge(connectedAddress, 'wallet-connected');\n      \n      const endTime = performance.now();\n      const duration = Math.round(endTime - startTime);\n\n      toast({\n        title: \"Lightning Fast!\",\n        description: `Badge unlocked in ${duration}ms - Local storage + server sync!`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Speed Test Failed\",\n        description: \"Could not complete test\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setTesting(false);\n    }\n  };\n\n  return (\n    <Button\n      onClick={runSpeedTest}\n      disabled={testing || !connected}\n      variant=\"outline\"\n      size=\"sm\"\n      className=\"bg-transparent border-cyan-400/30 text-cyan-400 hover:bg-cyan-400/10 hover:border-cyan-400/50\"\n    >\n      {testing ? (\n        <>\n          <Timer size={16} className=\"mr-2 animate-spin\" />\n          Testing...\n        </>\n      ) : (\n        <>\n          <Zap size={16} className=\"mr-2\" />\n          Speed Test\n        </>\n      )}\n    </Button>\n  );\n}","size_bytes":1885},"client/src/pages/ProfilePage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams } from \"wouter\";\nimport { Loader2, AlertCircle, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { UserProfile } from \"@/lib/firebase\";\nimport { FastProfile } from \"@/lib/local-storage\";\nimport { useWallet } from \"@/hooks/use-wallet\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ProfileHeader } from \"@/components/profile/ProfileHeader\";\nimport { AchievementGallery } from \"@/components/profile/AchievementGallery\";\nimport { ProfileEditorModal } from \"@/components/profile/ProfileEditorModal\";\n\nimport { usePageLoader } from \"@/hooks/use-page-loader\";\n\nexport default function ProfilePage() {\n  const { publicKey: routePublicKey } = useParams<{ publicKey: string }>();\n  const { address: connectedPublicKey, connected } = useWallet();\n  const { toast } = useToast();\n  usePageLoader();\n\n  const [profile, setProfile] = useState<UserProfile | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [isEditorOpen, setIsEditorOpen] = useState(false);\n\n  // Determine which public key to use (route param or connected wallet)\n  const targetPublicKey = routePublicKey || connectedPublicKey;\n  const isOwner = connected && connectedPublicKey === targetPublicKey;\n\n  useEffect(() => {\n    const loadProfile = async () => {\n      if (!targetPublicKey) {\n        setError(\"No wallet address provided\");\n        setLoading(false);\n        return;\n      }\n\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Use local storage for instant response while Firebase Functions are set up\n        let userProfile = await FastProfile.getProfile(targetPublicKey);\n\n        // If no profile exists and this is the owner, create one\n        if (!userProfile && isOwner) {\n          toast({\n            title: \"Creating your profile\",\n            description: \"Setting up your Shadow Ranch profile...\",\n          });\n          userProfile = await FastProfile.createProfile(targetPublicKey);\n        }\n\n        if (!userProfile) {\n          setError(\"Profile not found\");\n          return;\n        }\n\n        setProfile(userProfile);\n      } catch (err) {\n        console.error('Error loading profile:', err);\n        setError(\"Failed to load profile\");\n        toast({\n          title: \"Error loading profile\",\n          description: \"Could not load profile data. Please try again.\",\n          variant: \"destructive\",\n        });\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadProfile();\n  }, [targetPublicKey, isOwner, toast]);\n\n  const handleProfileUpdate = (updates: Partial<UserProfile>) => {\n    if (profile) {\n      setProfile({ ...profile, ...updates });\n    }\n  };\n\n  // Loading state\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Loader2 size={48} className=\"mx-auto text-cyan-400 animate-spin mb-4\" />\n          <p className=\"text-gray-300\">Loading profile...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Error state\n  if (error || !profile) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-900 flex items-center justify-center\">\n        <div className=\"text-center max-w-md mx-auto p-6\">\n          <AlertCircle size={48} className=\"mx-auto text-red-400 mb-4\" />\n          <h1 className=\"text-xl font-bold text-white mb-2\">\n            {error || \"Profile not found\"}\n          </h1>\n          <p className=\"text-gray-400 mb-6\">\n            {!connected \n              ? \"Please connect your wallet to view your profile\"\n              : \"This profile doesn't exist or could not be loaded\"\n            }\n          </p>\n          <Link href=\"/\">\n            <button className=\"inline-flex items-center px-4 py-2 bg-cyan-600 hover:bg-cyan-700 text-white rounded-lg transition-colors\">\n              <ArrowLeft size={16} className=\"mr-2\" />\n              Back to Home\n            </button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-gray-900 via-black to-gray-900\">\n      {/* Background Effects */}\n      <div className=\"absolute inset-0 opacity-30\">\n        <div className=\"sparkle-effect\" style={{ top: '20%', left: '10%', animationDelay: '0s' }} />\n        <div className=\"sparkle-effect\" style={{ top: '60%', left: '80%', animationDelay: '0.5s' }} />\n        <div className=\"sparkle-effect\" style={{ top: '40%', left: '30%', animationDelay: '1s' }} />\n        <div className=\"sparkle-effect\" style={{ top: '80%', left: '60%', animationDelay: '1.5s' }} />\n      </div>\n\n      <div className=\"relative z-10 container mx-auto px-4 py-6 sm:py-8 space-y-6 sm:space-y-8\">\n        {/* Navigation */}\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/\">\n            <button className=\"inline-flex items-center text-gray-400 hover:text-cyan-400 transition-colors\">\n              <ArrowLeft size={20} className=\"mr-2\" />\n              <span className=\"hidden sm:inline\">Back to Home</span>\n              <span className=\"sm:hidden\">Back</span>\n            </button>\n          </Link>\n          \n          {isOwner && (\n            <span className=\"text-sm text-cyan-400 font-mono\">Your Profile</span>\n          )}\n        </div>\n\n        {/* Page Title */}\n        <div className=\"text-center sm:text-left\">\n          <h1 className=\"font-space-gothic text-3xl sm:text-4xl md:text-5xl text-cyan-400 mb-2\">\n            {isOwner ? \"Your Profile\" : `${profile.username}'s Profile`}\n          </h1>\n          <p className=\"text-gray-400 text-sm sm:text-base\">\n            Shadow Ranch member since {profile.createdAt?.toDate ? profile.createdAt.toDate().toLocaleDateString() : new Date().toLocaleDateString()}\n          </p>\n        </div>\n\n        {/* Profile Content - Responsive Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 sm:gap-8\">\n          {/* Profile Header - Full width on mobile, spans 2 columns on desktop */}\n          <div className=\"lg:col-span-2\">\n            <ProfileHeader\n              profile={profile}\n              isOwner={isOwner}\n              onEditClick={() => setIsEditorOpen(true)}\n            />\n          </div>\n\n          {/* Achievement Gallery - Full width on mobile, spans 1 column on desktop */}\n          <div className=\"lg:col-span-1\">\n            <AchievementGallery badges={profile.nftBadges} />\n          </div>\n        </div>\n\n        {/* Additional Stats Section - Could be added later */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 sm:gap-6\">\n          <div className=\"bg-black/40 backdrop-blur-sm border border-cyan-400/20 rounded-xl p-4 sm:p-6 text-center\">\n            <div className=\"text-2xl sm:text-3xl font-bold text-cyan-400 mb-2\">\n              {profile.nftBadges.filter(badge => badge.unlocked).length}\n            </div>\n            <div className=\"text-gray-400 text-sm\">Achievements</div>\n          </div>\n          \n          <div className=\"bg-black/40 backdrop-blur-sm border border-cyan-400/20 rounded-xl p-4 sm:p-6 text-center\">\n            <div className=\"text-2xl sm:text-3xl font-bold text-cyan-400 mb-2\">\n              {Math.floor((Date.now() - (profile.createdAt?.toDate ? profile.createdAt.toDate().getTime() : Date.now())) / (1000 * 60 * 60 * 24))}\n            </div>\n            <div className=\"text-gray-400 text-sm\">Days Active</div>\n          </div>\n          \n          <div className=\"bg-black/40 backdrop-blur-sm border border-cyan-400/20 rounded-xl p-4 sm:p-6 text-center\">\n            <div className=\"text-2xl sm:text-3xl font-bold text-cyan-400 mb-2\">\n              {profile.nftBadges.filter(badge => badge.rarity === 'rare' || badge.rarity === 'epic' || badge.rarity === 'legendary').filter(badge => badge.unlocked).length}\n            </div>\n            <div className=\"text-gray-400 text-sm\">Rare Badges</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Profile Editor Modal */}\n      {isOwner && (\n        <ProfileEditorModal\n          isOpen={isEditorOpen}\n          onClose={() => setIsEditorOpen(false)}\n          profile={profile}\n          onProfileUpdate={handleProfileUpdate}\n        />\n      )}\n    </div>\n  );\n}","size_bytes":8375},"client/src/pages/LessonTest.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { TechCard } from '@/components/ui/tech-card';\nimport { TechButton } from '@/components/ui/tech-button';\nimport { LessonLayout } from '@/components/lessons/LessonLayout';\n\n// Simplified Quiz Component for Testing\ninterface SimpleQuizProps {\n  onStepComplete: () => void;\n  currentStep: number;\n}\n\nfunction SimpleQuiz({ onStepComplete, currentStep }: SimpleQuizProps) {\n  console.log('🔍 SimpleQuiz rendered - currentStep:', currentStep);\n  \n  return (\n    <TechCard variant=\"cyan\" className=\"p-6\">\n      <h3 className=\"text-xl font-bold text-cyan-300 mb-4\">\n        Test Quiz - Step {currentStep}\n      </h3>\n      <p className=\"text-gray-300 mb-6\">\n        This is a simplified quiz component for testing step progression.\n      </p>\n      \n      <TechButton \n        onClick={() => {\n          console.log('🎯 Quiz Complete Button Clicked - calling onStepComplete');\n          onStepComplete();\n        }}\n        variant=\"primary\"\n        className=\"w-full\"\n      >\n        Complete This Step\n      </TechButton>\n    </TechCard>\n  );\n}\n\nexport default function LessonTest() {\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isCompleted, setIsCompleted] = useState(false);\n  \n  // Log state changes on every render\n  useEffect(() => {\n    console.log('📊 LessonTest State Update:', {\n      currentStep,\n      isCompleted,\n      timestamp: new Date().toISOString()\n    });\n  }, [currentStep, isCompleted]);\n\n  // Step completion handler\n  const handleStepComplete = () => {\n    console.log('🚀 handleStepComplete called - setting isCompleted to true');\n    setIsCompleted(true);\n  };\n\n  // Next step handler\n  const handleNext = () => {\n    console.log('➡️ handleNext called - moving to next step');\n    const nextStep = currentStep + 1;\n    setCurrentStep(nextStep);\n    setIsCompleted(false); // Reset completion for new step\n    console.log('📈 Moved to step:', nextStep);\n  };\n\n  // Previous step handler  \n  const handlePrevious = () => {\n    console.log('⬅️ handlePrevious called');\n    if (currentStep > 1) {\n      const prevStep = currentStep - 1;\n      setCurrentStep(prevStep);\n      setIsCompleted(false); // Reset completion for previous step\n      console.log('📉 Moved to step:', prevStep);\n    }\n  };\n\n  // Hardcoded lesson data for testing\n  const testLesson = {\n    title: \"Test Lesson - Solana Progression Debug\",\n    content: {\n      steps: [\n        { id: 1, title: \"Step 1 - Quiz Test\" },\n        { id: 2, title: \"Step 2 - Second Quiz\" },\n        { id: 3, title: \"Step 3 - Final Step\" }\n      ]\n    }\n  };\n\n  const totalSteps = testLesson.content.steps.length;\n  const progressPercentage = (currentStep / totalSteps) * 100;\n  const canGoNext = isCompleted;\n  const hasPrevious = currentStep > 1;\n  const hasNext = currentStep < totalSteps;\n\n  console.log('🎮 Render State:', {\n    currentStep,\n    isCompleted,\n    canGoNext,\n    hasNext,\n    hasPrevious\n  });\n\n  return (\n    <div className=\"min-h-screen bg-black\">\n      <LessonLayout\n        title={testLesson.title}\n        currentStep={currentStep}\n        totalSteps={totalSteps}\n        progress={progressPercentage}\n        onPrevious={handlePrevious}\n        onNext={handleNext}\n        onComplete={() => console.log('🏁 Lesson completed!')}\n        canGoNext={canGoNext}\n        hasPrevious={hasPrevious}\n        hasNext={hasNext}\n        nextButtonText={hasNext ? \"Next Step\" : \"Complete Lesson\"}\n        isCompleted={currentStep === totalSteps && isCompleted}\n      >\n        <div className=\"max-w-4xl mx-auto p-8\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            {/* Quiz Component */}\n            <div>\n              <SimpleQuiz \n                onStepComplete={handleStepComplete}\n                currentStep={currentStep}\n              />\n            </div>\n\n            {/* Debug Info Panel */}\n            <div>\n              <TechCard variant=\"purple\" className=\"p-6\">\n                <h3 className=\"text-xl font-bold text-purple-300 mb-4\">\n                  Debug Information\n                </h3>\n                <div className=\"space-y-3 text-sm font-mono\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Current Step:</span>\n                    <span className=\"text-cyan-300\">{currentStep}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Is Completed:</span>\n                    <span className={isCompleted ? 'text-green-300' : 'text-red-300'}>\n                      {isCompleted ? 'true' : 'false'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Can Go Next:</span>\n                    <span className={canGoNext ? 'text-green-300' : 'text-red-300'}>\n                      {canGoNext ? 'true' : 'false'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Has Next:</span>\n                    <span className={hasNext ? 'text-green-300' : 'text-red-300'}>\n                      {hasNext ? 'true' : 'false'}\n                    </span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-gray-400\">Progress:</span>\n                    <span className=\"text-cyan-300\">{progressPercentage.toFixed(1)}%</span>\n                  </div>\n                </div>\n\n                {/* Manual Test Buttons */}\n                <div className=\"mt-6 space-y-2\">\n                  <TechButton \n                    onClick={() => setIsCompleted(!isCompleted)}\n                    variant=\"secondary\"\n                    className=\"w-full text-xs\"\n                  >\n                    Toggle Completion: {isCompleted ? 'Complete' : 'Incomplete'}\n                  </TechButton>\n                  \n                  <TechButton \n                    onClick={() => {\n                      console.log('🔄 Reset Test - Going back to step 1');\n                      setCurrentStep(1);\n                      setIsCompleted(false);\n                    }}\n                    variant=\"secondary\" \n                    className=\"w-full text-xs\"\n                  >\n                    Reset to Step 1\n                  </TechButton>\n                </div>\n              </TechCard>\n            </div>\n          </div>\n\n          {/* Console Log Display */}\n          <div className=\"mt-8\">\n            <TechCard variant=\"neutral\" className=\"p-4\">\n              <h4 className=\"text-lg font-bold text-gray-300 mb-2\">\n                Console Monitoring\n              </h4>\n              <p className=\"text-sm text-gray-400\">\n                Open browser console (F12) to see detailed logging of state changes and interactions.\n                All debug info is being logged with timestamps.\n              </p>\n            </TechCard>\n          </div>\n        </div>\n      </LessonLayout>\n    </div>\n  );\n}","size_bytes":7152},"client/src/pages/CodingChallengePage.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useRoute } from \"wouter\";\nimport { CodingChallengeLayout } from \"@/components/lessons/CodingChallengeLayout\";\nimport { TechCard } from \"@/components/ui/TechCard\";\nimport { CodeEditor } from \"@/components/ui/CodeEditor\";\nimport { NarrativeBox } from \"@/components/lessons/NarrativeBox\";\nimport { VisualFeedback } from \"@/components/solana/VisualFeedback\";\nimport { NftAchievementModal } from \"@/components/solana/NftAchievementModal\";\nimport { SplashScreen } from \"@/components/ui/SplashScreen\";\nimport { solanaChallenges } from \"@/data/solana-challenges\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ChallengeProgress {\n  currentChallenge: number;\n  completedChallenges: Set<number>;\n  code: string;\n  badges: string[];\n}\n\nexport default function CodingChallengePage() {\n  const [, params] = useRoute(\"/solana-challenges/:challengeId?\");\n  const challengeId = parseInt(params?.challengeId || \"1\");\n  \n  const [progress, setProgress] = useState<ChallengeProgress>({\n    currentChallenge: 1,\n    completedChallenges: new Set(),\n    code: \"\",\n    badges: []\n  });\n  \n  const [isLoading, setIsLoading] = useState(false);\n  const [isCompiling, setIsCompiling] = useState(false);\n  const [compilationResult, setCompilationResult] = useState<{\n    success: boolean;\n    message: string;\n  } | null>(null);\n  const [showVisualFeedback, setShowVisualFeedback] = useState(false);\n  const [showAchievementModal, setShowAchievementModal] = useState(false);\n  \n  const { toast } = useToast();\n  const currentChallenge = solanaChallenges.find(c => c.id === challengeId);\n\n  // Load progress from localStorage\n  useEffect(() => {\n    const savedProgress = localStorage.getItem('solana-challenge-progress');\n    if (savedProgress) {\n      const parsed = JSON.parse(savedProgress);\n      setProgress({\n        ...parsed,\n        completedChallenges: new Set(parsed.completedChallenges || [])\n      });\n    }\n  }, []);\n\n  // Save progress to localStorage\n  const saveProgress = (newProgress: ChallengeProgress) => {\n    const toSave = {\n      ...newProgress,\n      completedChallenges: Array.from(newProgress.completedChallenges)\n    };\n    localStorage.setItem('solana-challenge-progress', JSON.stringify(toSave));\n    setProgress(newProgress);\n  };\n\n  // Initialize code when challenge changes\n  useEffect(() => {\n    if (currentChallenge) {\n      setProgress(prev => ({\n        ...prev,\n        code: currentChallenge.initialCode,\n        currentChallenge: challengeId\n      }));\n    }\n  }, [challengeId, currentChallenge]);\n\n  // Hide splash screen after challenge changes\n  useEffect(() => {\n    // This runs after the new challenge content has started to load\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, 1500); // Keep splash screen visible for 1.5 seconds\n\n    return () => clearTimeout(timer);\n  }, [challengeId]);\n\n  const handleCodeChange = (newCode: string) => {\n    setProgress(prev => ({ ...prev, code: newCode }));\n  };\n\n  const validateCode = (code: string, challenge: typeof currentChallenge): boolean => {\n    if (!challenge || !challenge.validationPattern) return false;\n    return challenge.validationPattern.test(code);\n  };\n\n  const handleCompile = async () => {\n    if (!currentChallenge) return;\n\n    setIsCompiling(true);\n    setCompilationResult(null);\n\n    // Simulate compilation delay\n    await new Promise(resolve => setTimeout(resolve, 1500));\n\n    const isValid = validateCode(progress.code, currentChallenge);\n\n    if (isValid) {\n      // Success\n      setCompilationResult({\n        success: true,\n        message: \"Compilation successful! All tests passed.\"\n      });\n\n      // Show visual feedback\n      setShowVisualFeedback(true);\n      \n      // After visual feedback, show achievement modal\n      setTimeout(() => {\n        setShowVisualFeedback(false);\n        \n        // Mark challenge as completed\n        const newCompletedChallenges = Array.from(progress.completedChallenges);\n        newCompletedChallenges.push(challengeId);\n        const newProgress = {\n          ...progress,\n          completedChallenges: new Set(newCompletedChallenges),\n          badges: [...progress.badges, currentChallenge.nftBadge]\n        };\n        saveProgress(newProgress);\n        \n        setShowAchievementModal(true);\n      }, 3000);\n\n    } else {\n      // Failure\n      setCompilationResult({\n        success: false,\n        message: \"Compilation failed. Check your code and try again.\"\n      });\n      \n      toast({\n        title: \"Compilation Failed\",\n        description: currentChallenge.hints?.[0] || \"Review the task requirements.\",\n        variant: \"destructive\"\n      });\n    }\n\n    setIsCompiling(false);\n  };\n\n  const handleNext = () => {\n    if (challengeId < solanaChallenges.length) {\n      setIsLoading(true);\n      window.location.href = `/solana-challenges/${challengeId + 1}`;\n    }\n  };\n\n  const handlePrevious = () => {\n    if (challengeId > 1) {\n      setIsLoading(true);\n      window.location.href = `/solana-challenges/${challengeId - 1}`;\n    }\n  };\n\n  const handleCloseModal = () => {\n    setShowAchievementModal(false);\n  };\n\n  const handleContinue = () => {\n    setShowAchievementModal(false);\n    if (challengeId < solanaChallenges.length) {\n      setIsLoading(true);\n      setTimeout(() => {\n        window.location.href = `/solana-challenges/${challengeId + 1}`;\n      }, 300);\n    }\n  };\n\n  if (!currentChallenge) {\n    return (\n      <div className=\"min-h-screen bg-black flex items-center justify-center\">\n        <TechCard className=\"p-8 text-center\">\n          <span className=\"text-4xl mb-4 block\">⚠️</span>\n          <h2 className=\"font-space-gothic text-2xl text-gray-300 mb-4\">CHALLENGE NOT FOUND</h2>\n          <p className=\"font-code text-gray-400\">The requested challenge could not be found.</p>\n        </TechCard>\n      </div>\n    );\n  }\n\n  const canGoNext = progress.completedChallenges.has(challengeId);\n  const hasPrevious = challengeId > 1;\n\n  return (\n    <>\n      <CodingChallengeLayout\n        title={currentChallenge.title}\n        currentChallenge={challengeId}\n        totalChallenges={solanaChallenges.length}\n        onPrevious={handlePrevious}\n        onNext={handleNext}\n        onCompile={handleCompile}\n        canGoNext={canGoNext}\n        hasPrevious={hasPrevious}\n        isCompiling={isCompiling}\n      >\n        <div className=\"container mx-auto px-4 py-6 h-full\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 h-full\">\n            {/* Left Panel - Instructions */}\n            <div className=\"lg:col-span-1\">\n              <TechCard variant=\"cyan\" className=\"h-full\">\n                <div className=\"p-6 h-full overflow-y-auto\">\n                  <div className=\"mb-6\">\n                    <h2 className=\"font-space-gothic text-xl text-cyan-400 mb-4\">\n                      Challenge {challengeId}: {currentChallenge.title}\n                    </h2>\n                    \n                    <NarrativeBox \n                      variant=\"story\" \n                      icon=\"📖\" \n                      title=\"The Story\"\n                      typewriter={true}\n                      typewriterSpeed={30}\n                    >\n                      {currentChallenge.story}\n                    </NarrativeBox>\n                    \n                    {currentChallenge.example && (\n                      <div className=\"mb-6\">\n                        <NarrativeBox variant=\"info\" icon=\"💡\" title=\"The Example\">\n                          <pre className=\"bg-gray-800 p-4 rounded-lg overflow-x-auto text-sm\">\n                            <code className=\"text-gray-200 font-mono\">\n                              {currentChallenge.example}\n                            </code>\n                          </pre>\n                        </NarrativeBox>\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"mb-6\">\n                    <NarrativeBox variant=\"challenge\" icon=\"🎯\" title=\"Your Task\">\n                      {currentChallenge.task}\n                    </NarrativeBox>\n                  </div>\n\n                  {/* Compilation Result */}\n                  {compilationResult && (\n                    <div className=\"mb-6\">\n                      <NarrativeBox \n                        variant={compilationResult.success ? \"success\" : \"warning\"}\n                        icon={compilationResult.success ? \"✅\" : \"❌\"}\n                        title={compilationResult.success ? \"Success!\" : \"Error\"}\n                      >\n                        {compilationResult.message}\n                      </NarrativeBox>\n                    </div>\n                  )}\n\n                  {/* Progress Indicator */}\n                  <div className=\"mt-auto pt-4 border-t border-cyan-400/20\">\n                    <div className=\"flex justify-between text-xs text-gray-400 mb-2\">\n                      <span>Progress</span>\n                      <span>{progress.completedChallenges.size}/{solanaChallenges.length}</span>\n                    </div>\n                    <div className=\"w-full bg-gray-700 rounded-full h-2\">\n                      <div \n                        className=\"bg-gradient-to-r from-cyan-500 to-purple-500 h-2 rounded-full transition-all duration-300\"\n                        style={{ width: `${(progress.completedChallenges.size / solanaChallenges.length) * 100}%` }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </TechCard>\n            </div>\n\n            {/* Center Panel - Code Editor */}\n            <div className=\"lg:col-span-1\">\n              <TechCard variant=\"purple\" className=\"h-full\">\n                <div className=\"p-4 h-full flex flex-col\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h3 className=\"font-tech text-lg text-purple-400 uppercase tracking-wider\">\n                      CODE EDITOR\n                    </h3>\n                    <div className=\"text-xs text-gray-400 font-code\">\n                      Rust • Anchor Framework\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex-1 min-h-0\">\n                    <CodeEditor\n                      value={progress.code}\n                      onChange={handleCodeChange}\n                      language=\"rust\"\n                      className=\"h-full\"\n                    />\n                  </div>\n                </div>\n              </TechCard>\n            </div>\n\n            {/* Right Panel - Visual Feedback */}\n            <div className=\"lg:col-span-1\">\n              <TechCard variant=\"cyan\" className=\"h-full\">\n                <div className=\"p-6 h-full flex flex-col\">\n                  <h3 className=\"font-tech text-lg text-cyan-400 uppercase tracking-wider mb-4\">\n                    VISUAL FEEDBACK\n                  </h3>\n                  \n                  <div className=\"flex-1 min-h-0\">\n                    {showVisualFeedback ? (\n                      <VisualFeedback \n                        effect={currentChallenge.visualEffect}\n                        isVisible={showVisualFeedback}\n                        onComplete={() => setShowVisualFeedback(false)}\n                      />\n                    ) : (\n                      <div className=\"h-full flex items-center justify-center text-gray-500\">\n                        <div className=\"text-center\">\n                          <div className=\"text-6xl mb-4\">🔧</div>\n                          <p className=\"font-code text-sm\">\n                            Run \"Compile & Test\" to see<br />the magic happen!\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </TechCard>\n            </div>\n          </div>\n        </div>\n      </CodingChallengeLayout>\n\n      {/* Achievement Modal */}\n      <NftAchievementModal\n        isVisible={showAchievementModal}\n        badge={currentChallenge.nftBadge}\n        challengeTitle={currentChallenge.title}\n        onContinue={handleContinue}\n        onClose={handleCloseModal}\n      />\n    </>\n  );\n}","size_bytes":12263},"client/src/components/ui/SplashScreen.tsx":{"content":"import React, { useEffect, useRef, useState } from 'react';\n\nconst SolanaLogo = () => (\n    <svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" className=\"w-24 h-24 text-green-400\">\n        <title>Solana</title>\n        <path d=\"M6.44 18.32l-2.32 1.34a.5.5 0 0 1-.75-.43V4.77a.5.5 0 0 1 .75-.43l2.32 1.34a.5.5 0 0 1 .25.43v11.78a.5.5 0 0 1-.25.43zM12.44 20.23L10.12 21.57a.5.5 0 0 1-.75-.43V6.86a.5.5 0 0 1 .75-.43l2.32 1.34a.5.5 0 0 1 .25.43v11.54a.5.5 0 0 1-.25.43zM18.44 15.77l-2.32 1.34a.5.5 0 0 1-.75-.43V2.87a.5.5 0 0 1 .75-.43l2.32 1.34a.5.5 0 0 1 .25.43v11.13a.5.5 0 0 1-.25.43z\" />\n    </svg>\n);\n\nexport const SplashScreen = () => {\n    const canvasRef = useRef<HTMLCanvasElement>(null);\n    const [showLogo, setShowLogo] = useState(false);\n\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        if (!canvas) return;\n        const ctx = canvas.getContext('2d');\n        if (!ctx) return;\n\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n\n        const katakana = 'アァカサタナハマヤャラワガザダバパイィキシチニヒミリヰギジヂビピウゥクスツヌフムユュルグズブプエェケセテネヘメレヱゲゼデベペオォコソトノホモヨョロヲゴゾドボポヴッン';\n        const latin = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        const nums = '0123456789';\n        const alphabet = katakana + latin + nums;\n\n        const fontSize = 16;\n        const columns = canvas.width / fontSize;\n        const rainDrops: number[] = [];\n\n        for (let x = 0; x < columns; x++) {\n            rainDrops[x] = 1;\n        }\n\n        let animationFrameId: number;\n        const draw = () => {\n            ctx.fillStyle = 'rgba(17, 24, 39, 0.05)';\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\n            ctx.fillStyle = '#4ade80'; // theme.colors.green[400]\n            ctx.font = `${fontSize}px monospace`;\n\n            for (let i = 0; i < rainDrops.length; i++) {\n                const text = alphabet.charAt(Math.floor(Math.random() * alphabet.length));\n                ctx.fillText(text, i * fontSize, rainDrops[i] * fontSize);\n\n                if (rainDrops[i] * fontSize > canvas.height && Math.random() > 0.975) {\n                    rainDrops[i] = 0;\n                }\n                rainDrops[i]++;\n            }\n            animationFrameId = window.requestAnimationFrame(draw);\n        };\n\n        draw();\n\n        const fadeTimer = setTimeout(() => {\n            setShowLogo(true);\n        }, 1000);\n\n        return () => {\n            window.cancelAnimationFrame(animationFrameId);\n            clearTimeout(fadeTimer);\n        };\n    }, []);\n\n    return (\n        <div className=\"fixed inset-0 bg-gray-900 z-50 flex items-center justify-center\">\n            <canvas ref={canvasRef} className={`absolute inset-0 transition-opacity duration-500 ${showLogo ? 'opacity-0' : 'opacity-100'}`}></canvas>\n            <div className={`transition-opacity duration-500 ${showLogo ? 'opacity-100' : 'opacity-0'} animate-pulse`}>\n                <SolanaLogo />\n            </div>\n        </div>\n    );\n};","size_bytes":3134}}}